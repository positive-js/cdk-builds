{"version":3,"file":"tree.js","sources":["../../../src/cdk/tree/index.ts","../../../src/cdk/tree/tree.module.ts","../../../src/cdk/tree/toggle.ts","../../../src/cdk/tree/padding.ts","../../../src/cdk/tree/nested-node.ts","../../../src/cdk/tree/tree.ts","../../../src/cdk/tree/tree-errors.ts","../../../src/cdk/tree/node.ts","../../../src/cdk/tree/outlet.ts","../../../src/cdk/tree/control/nested-tree-control.ts","../../../src/cdk/tree/control/flat-tree-control.ts","../../../src/cdk/tree/control/base-tree-control.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\n\nimport { CdkNestedTreeNode } from './nested-node';\nimport { CdkTreeNodeDef } from './node';\nimport { CdkTreeNodeOutlet } from './outlet';\nimport { CdkTreeNodePadding } from './padding';\nimport { CdkTreeNodeToggle } from './toggle';\nimport { CdkTree, CdkTreeNode } from './tree';\n\n\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet\n];\n\n@NgModule({\n    imports: [CommonModule],\n    exports: EXPORTED_DECLARATIONS,\n    declarations: EXPORTED_DECLARATIONS,\n    providers: [FocusMonitor, CdkTreeNodeDef]\n})\nexport class CdkTreeModule {}\n","import {\n    Directive,\n    Input\n} from '@angular/core';\n\nimport { CdkTree, CdkTreeNode } from './tree';\n\n\n/**\n * Node toggle to expand/collapse the node.\n */\n@Directive({\n    selector: '[cdkTreeNodeToggle]',\n    host: {\n        '(click)': '_toggle($event)'\n    }\n})\nexport class CdkTreeNodeToggle<T> {\n    /** Whether expand/collapse the node recursively. */\n    @Input('cdkTreeNodeToggleRecursive')\n    get recursive(): boolean {\n        return this._recursive;\n    }\n\n    set recursive(value: boolean) {\n        this._recursive = value;\n    }\n\n    // set recursive(value: boolean) { this._recursive = toBoolean(value); }\n    protected _recursive = false;\n\n    constructor(protected _tree: CdkTree<T>, protected _treeNode: CdkTreeNode<T>) {}\n\n    _toggle(event: Event): void {\n        this.recursive\n            ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n            : this._tree.treeControl.toggle(this._treeNode.data);\n\n        event.stopPropagation();\n    }\n}\n","import { Directive, ElementRef, Input, OnDestroy, Optional, Renderer2 } from '@angular/core';\n\nimport { Directionality } from '@ptsecurity/cdk/bidi';\n// import {coerceNumberProperty} from '@ptsecurity/cdk/coercion';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { CdkTree, CdkTreeNode } from './tree';\n\n\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\n@Directive({\n    selector: '[cdkTreeNodePadding]'\n})\nexport class CdkTreeNodePadding<T> implements OnDestroy {\n    /** Subject that emits when the component has been destroyed. */\n\n    _level: number;\n    _indent: number;\n\n    private _destroyed = new Subject<void>();\n\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    @Input('cdkTreeNodePadding')\n    get level(): number {\n        return this._level;\n    }\n\n    set level(value: number) {\n        // this._level = coerceNumberProperty(value);\n        this._level = value;\n        this._setPadding();\n    }\n\n\n    @Input('cdkTreeNodePaddingIndent')\n    get indent(): number {\n        return this._indent;\n    }\n\n    set indent(value: number) {\n        // this._indent = coerceNumberProperty(value);\n        this._indent = value;\n        this._setPadding();\n    }\n\n\n    constructor(\n        protected _treeNode: CdkTreeNode<T>,\n        protected _tree: CdkTree<T>,\n        private _renderer: Renderer2,\n        private _element: ElementRef<HTMLElement>,\n        @Optional() private _dir: Directionality\n    ) {\n\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(() => this._setPadding());\n        }\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n\n    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n    _paddingIndent(): string | null {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n\n        const level = this._level || nodeLevel;\n\n        return level ? `${(level * this._indent) + 12}px` : '12px';\n    }\n\n    _setPadding() {\n        const padding = this._paddingIndent();\n        const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n\n        this._renderer.setStyle(this._element.nativeElement, paddingProp, padding);\n    }\n}\n","import {\n    AfterContentInit,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    IterableDiffers,\n    IterableDiffer,\n    OnDestroy,\n    QueryList\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { CdkTreeNodeOutlet } from './outlet';\nimport { CdkTree, CdkTreeNode } from './tree';\nimport { getTreeControlFunctionsMissingError } from './tree-errors';\n\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * For example:\n *   ```html\n *   <cdk-mested-tree-node>\n *     {{node.name}}\n *     <ng-template cdkTreeNodeOutlet></ng-template>\n *   </cdk-tree-node>\n *   ```\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\n * like this:\n *   ```html\n *   <cdk-nested-tree-node>\n *     {{node.name}}\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>\n *   </cdk-tree-node>\n *   ```\n */\n@Directive({\n    selector: 'cdk-nested-tree-node',\n    exportAs: 'cdkNestedTreeNode',\n    host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.role]': 'role',\n        class: 'cdk-tree-node cdk-nested-tree-node'\n    },\n    providers: [{ provide: CdkTreeNode, useExisting: CdkNestedTreeNode }]\n})\nexport class CdkNestedTreeNode<T> extends CdkTreeNode<T> implements AfterContentInit, OnDestroy {\n    /** The children node placeholder. */\n    @ContentChildren(CdkTreeNodeOutlet) nodeOutlet: QueryList<CdkTreeNodeOutlet>;\n\n    /** The children data dataNodes of current node. They will be placed in `CdkTreeNodeOutlet`. */\n    protected _children: T[];\n\n    /** Differ used to find the changes in the data provided by the data source. */\n    private _dataDiffer: IterableDiffer<T>;\n\n    constructor(\n        protected _elementRef: ElementRef,\n        protected _tree: CdkTree<T>,\n        protected _differs: IterableDiffers\n    ) {\n        super(_elementRef, _tree);\n    }\n\n    ngAfterContentInit() {\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n\n        if (!this._tree.treeControl.getChildren) {\n            throw getTreeControlFunctionsMissingError();\n        }\n\n        this._tree.treeControl.getChildren(this.data)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((result) => {\n                this._children = result;\n                this.updateChildrenNodes();\n            });\n\n        this.nodeOutlet.changes\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateChildrenNodes());\n    }\n\n    ngOnDestroy() {\n        this._clear();\n        super.ngOnDestroy();\n    }\n\n    /** Add children dataNodes to the NodeOutlet */\n    protected updateChildrenNodes(): void {\n        if (this.nodeOutlet.length && this._children) {\n            this._tree.renderNodeChanges(\n                this._children, this._dataDiffer, this.nodeOutlet.first.viewContainer, this._data\n            );\n        } else {\n            // Reset the data differ if there's no children nodes displayed\n            this._dataDiffer.diff([]);\n        }\n    }\n\n    /** Clear the children dataNodes. */\n    protected _clear(): void {\n        if (this.nodeOutlet && this.nodeOutlet.first) {\n            this.nodeOutlet.first.viewContainer.clear();\n            this._dataDiffer.diff([]);\n        }\n    }\n}\n","import {\n    AfterContentChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    Input,\n    IterableChangeRecord,\n    IterableDiffer,\n    IterableDiffers,\n    OnDestroy,\n    OnInit,\n    QueryList,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation,\n    TrackByFunction, Inject, forwardRef\n} from '@angular/core';\n\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\n\nimport { BehaviorSubject, Observable, of as observableOf, Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { ITreeControl } from './control/tree-control';\nimport { CdkTreeNodeDef, CdkTreeNodeOutletContext } from './node';\nimport { CdkTreeNodeOutlet } from './outlet';\nimport {\n    getTreeControlFunctionsMissingError,\n    getTreeControlMissingError,\n    getTreeMissingMatchingNodeDefError,\n    getTreeMultipleDefaultNodeDefsError,\n    getTreeNoValidDataSourceError\n} from './tree-errors';\n\n\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\n@Directive({\n    selector: 'cdk-tree-node',\n    exportAs: 'cdkTreeNode',\n    host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        '[attr.role]': 'role',\n        class: 'cdk-tree-node'\n    }\n})\nexport class CdkTreeNode<T> implements IFocusableOption, OnDestroy {\n    /**\n     * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n     * in `CdkTree` and set the data to it.\n     */\n    static mostRecentTreeNode: CdkTreeNode<any> | null = null;\n\n    /**\n     * The role of the node should be 'group' if it's an internal node,\n     * and 'treeitem' if it's a leaf node.\n     */\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    /** Subject that emits when the component has been destroyed. */\n    protected _destroyed = new Subject<void>();\n\n    protected _data: T;\n\n    /** The tree node's data. */\n    get data(): T {\n        return this._data;\n    }\n\n    set data(value: T) {\n        this._data = value;\n        this._setRoleFromData();\n    }\n\n    get isExpanded(): boolean {\n        return this._tree.treeControl.isExpanded(this._data);\n    }\n\n    get level(): number {\n        return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n    }\n\n    constructor(\n        protected _elementRef: ElementRef,\n        @Inject(forwardRef(() => CdkTree))\n        protected _tree: CdkTree<T>\n    ) {\n        CdkTreeNode.mostRecentTreeNode = this as CdkTreeNode<T>;\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n\n    /** Focuses the menu item. Implements for IFocusableOption. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    private _setRoleFromData(): void {\n        if (this._tree.treeControl.isExpandable) {\n            this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n        } else {\n            if (!this._tree.treeControl.getChildren) {\n                throw getTreeControlFunctionsMissingError();\n            }\n\n            this._tree.treeControl.getChildren(this._data).pipe(takeUntil(this._destroyed))\n                .subscribe((children) => {\n                    this.role = children && children.length ? 'group' : 'treeitem';\n                });\n        }\n    }\n}\n\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\n@Component({\n    selector: 'cdk-tree',\n    exportAs: 'cdkTree',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        class: 'cdk-tree',\n        role: 'tree'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CdkTree<T> implements AfterContentChecked, ICollectionViewer, OnDestroy, OnInit {\n\n    /** The tree controller */\n    @Input() treeControl: ITreeControl<T>;\n\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data\n     * relative to the function to know if a node should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    @Input() trackBy: TrackByFunction<T>;\n\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(CdkTreeNodeOutlet) _nodeOutlet: CdkTreeNodeOutlet;\n\n    /** The tree node template for the tree */\n    @ContentChildren(CdkTreeNodeDef) _nodeDefs: QueryList<CdkTreeNodeDef<T>>;\n\n    // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n    //     Remove the MAX_VALUE in viewChange\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     */\n    viewChange =\n        new BehaviorSubject<{ start: number, end: number }>({ start: 0, end: Number.MAX_VALUE });\n\n    /** Differ used to find the changes in the data provided by the data source. */\n    protected _dataDiffer: IterableDiffer<T>;\n\n    /** Subject that emits when the component has been destroyed. */\n    private _onDestroy = new Subject<void>();\n\n\n    /** Stores the node definition that does not have a when predicate. */\n    private _defaultNodeDef: CdkTreeNodeDef<T> | null;\n\n    /** Data subscription */\n    private _dataSubscription: Subscription | null;\n\n    /** Level of nodes */\n    private _levels: Map<T, number> = new Map<T, number>();\n\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a dara array to render.\n     */\n    @Input()\n    get dataSource(): DataSource<T> | Observable<T[]> | T[] {\n        return this._dataSource;\n    }\n\n    set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n\n    private _dataSource: DataSource<T> | Observable<T[]> | T[];\n\n    constructor(\n        private _differs: IterableDiffers,\n        private _changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n\n        if (!this.treeControl) {\n            throw getTreeControlMissingError();\n        }\n    }\n\n    ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n\n        this._onDestroy.next();\n        this._onDestroy.complete();\n\n        if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n            (this.dataSource as DataSource<T>).disconnect(this);\n        }\n\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n    }\n\n    ngAfterContentChecked() {\n        const defaultNodeDefs = this._nodeDefs.filter((def) => !def.when);\n        if (defaultNodeDefs.length > 1) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this._defaultNodeDef = defaultNodeDefs[0];\n\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n            this._observeRenderChanges();\n        }\n    }\n\n    /** Check for changes made in the data and render each change (node added/removed/moved). */\n    renderNodeChanges(\n        data: T[],\n        dataDiffer: IterableDiffer<T> = this._dataDiffer,\n        viewContainer: ViewContainerRef = this._nodeOutlet.viewContainer,\n        parentData?: T\n    ) {\n        const changes = dataDiffer.diff(data);\n\n        if (!changes) { return; }\n\n        changes.forEachOperation((item: IterableChangeRecord<T>,\n                                  adjustedPreviousIndex: number | null,\n                                  currentIndex: number | null) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[currentIndex!], currentIndex!, viewContainer, parentData);\n            } else if (currentIndex == null) {\n                viewContainer.remove(adjustedPreviousIndex!);\n                this._levels.delete(item.item);\n            } else {\n                const view = viewContainer.get(adjustedPreviousIndex!);\n                viewContainer.move(view!, currentIndex);\n            }\n        });\n\n        this._changeDetectorRef.detectChanges();\n    }\n\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     */\n    _getNodeDef(data: T, i: number): CdkTreeNodeDef<T> {\n        if (this._nodeDefs.length === 1) { return this._nodeDefs.first; }\n\n        const nodeDef =\n            this._nodeDefs.find((def) => def.when && def.when(i, data)) || this._defaultNodeDef;\n\n        if (!nodeDef) { throw getTreeMissingMatchingNodeDefError(); }\n\n        return nodeDef;\n    }\n\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     */\n    insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T) {\n        const node = this._getNodeDef(nodeData, index);\n\n        // Node context that will be provided to created embedded view\n        const context = new CdkTreeNodeOutletContext<T>(nodeData);\n\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n            context.level = this._levels.get(parentData)! + 1;\n        } else {\n            context.level = 0;\n        }\n\n        this._levels.set(nodeData, context.level);\n\n        // Use default tree nodeOutlet, or nested node's nodeOutlet\n        const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n\n    /** Set up a subscription for the data provided by the data source. */\n    private _observeRenderChanges() {\n        let dataStream: Observable<T[]> | undefined;\n\n        // Cannot use `instanceof DataSource` since the data source could be a literal with\n        // `connect` function and may not extends DataSource.\n        if (typeof (this._dataSource as DataSource<T>).connect === 'function') {\n            dataStream = (this._dataSource as DataSource<T>).connect(this);\n        } else if (this._dataSource instanceof Observable) {\n            dataStream = this._dataSource;\n        } else if (Array.isArray(this._dataSource)) {\n            dataStream = observableOf(this._dataSource);\n        }\n\n        if (dataStream) {\n            this._dataSubscription = dataStream\n                .pipe(takeUntil(this._onDestroy))\n                .subscribe((data) => this.renderNodeChanges(data));\n        } else {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     */\n    private _switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n        if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n            (this.dataSource as DataSource<T>).disconnect(this);\n        }\n\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) { this._nodeOutlet.viewContainer.clear(); }\n\n        this._dataSource = dataSource;\n\n        if (this._nodeDefs) { this._observeRenderChanges(); }\n    }\n}\n","/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nexport function getTreeNoValidDataSourceError() {\n  return Error(`A valid data source must be provided.`);\n}\n\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nexport function getTreeMultipleDefaultNodeDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nexport function getTreeMissingMatchingNodeDefError() {\n  return Error(`Could not find a matching node definition for the provided node data.`);\n}\n\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nexport function getTreeControlMissingError() {\n  return Error(`Could not find a tree control for the tree.`);\n}\n\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nexport function getTreeControlFunctionsMissingError() {\n  return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n/** Context provided to the tree node component. */\nexport class CdkTreeNodeOutletContext<T> {\n    /** Data for the node. */\n    $implicit: T;\n\n    /** Depth of the node. */\n    level: number;\n\n    /** Index location of the node. */\n    index?: number;\n\n    /** Length of the number of total dataNodes. */\n    count?: number;\n\n    constructor(data: T) {\n        this.$implicit = data;\n    }\n}\n\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n@Directive({\n    selector: '[cdkTreeNodeDef]',\n    inputs: [\n        'when: cdkTreeNodeDefWhen'\n    ]\n})\nexport class CdkTreeNodeDef<T> {\n    /**\n     * Function that should return true if this node template should be used for the provided node\n     * data and index. If left undefined, this node will be considered the default node template to\n     * use when no other when functions return true for the data.\n     * For every node, there must be at least one when function that passes or an undefined to\n     * default.\n     */\n    when: (index: number, nodeData: T) => boolean;\n\n    /** @docs-private */\n    constructor(public template: TemplateRef<any>) {}\n}\n","import { Directive, ViewContainerRef } from '@angular/core';\n\n\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({ selector: '[cdkTreeNodeOutlet]' })\nexport class CdkTreeNodeOutlet {\n    constructor(public viewContainer: ViewContainerRef) {}\n}\n","import { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { BaseTreeControl } from './base-tree-control';\n\n\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nexport class NestedTreeControl<T> extends BaseTreeControl<T> {\n\n    /** Construct with nested tree function getChildren. */\n    constructor(public getChildren: (dataNode: T) => Observable<T[]>) {\n        super();\n    }\n\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the ITreeControl must be set to all root level\n     * data nodes of the tree.\n     */\n    expandAll(): void {\n        this.expansionModel.clear();\n        const allNodes = this.dataNodes.reduce((accumulator: T[], dataNode) =>\n            [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n        this.expansionModel.select(...allNodes);\n    }\n\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n    getDescendants(dataNode: T): T[] {\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n\n        // Remove the node itself\n        return descendants.splice(1);\n    }\n\n    /** A helper function to get descendants recursively. */\n    protected _getDescendants(descendants: T[], dataNode: T): void {\n        descendants.push(dataNode);\n        this.getChildren(dataNode).pipe(take(1)).subscribe((children) => {\n            if (children && children.length > 0) {\n                children.forEach((child: T) => this._getDescendants(descendants, child));\n            }\n        });\n    }\n}\n","import { BaseTreeControl } from './base-tree-control';\n\n\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nexport class FlatTreeControl<T> extends BaseTreeControl<T> {\n\n    /** Construct with flat tree data node functions getLevel and isExpandable. */\n    constructor(public getLevel: (dataNode: T) => number, public isExpandable: (dataNode: T) => boolean) {\n        super();\n    }\n\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the ITreeControl must be flattened tree nodes\n     * with correct levels.\n     */\n    getDescendants(dataNode: T): T[] {\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        const results: T[] = [];\n\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1;\n             i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]);\n             i++\n        ) {\n            results.push(this.dataNodes[i]);\n        }\n\n        return results;\n    }\n\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the ITreeControl must be set to all flattened\n     * data nodes of the tree.\n     */\n    expandAll(): void {\n        this.expansionModel.select(...this.dataNodes);\n    }\n}\n","import { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { Observable } from 'rxjs';\n\nimport { ITreeControl } from './tree-control';\n\n\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\nexport abstract class BaseTreeControl<T> implements ITreeControl<T> {\n\n    /** Saved data node for `expandAll` action. */\n    dataNodes: T[];\n\n    /** A selection model with multi-selection to track expansion status. */\n    expansionModel: SelectionModel<T> = new SelectionModel<T>(true);\n\n    /** Get depth of a given data node, return the level number. This is for flat tree node. */\n    getLevel: (dataNode: T) => number;\n\n    /**\n     * Whether the data node is expandable. Returns true if expandable.\n     * This is for flat tree node.\n     */\n    isExpandable: (dataNode: T) => boolean;\n\n    /** Gets a stream that emits whenever the given data node's children change. */\n    getChildren: (dataNode: T) => Observable<T[]>;\n\n    /** Gets a list of descendent data nodes of a subtree rooted at given data node recursively. */\n    abstract getDescendants(dataNode: T): T[];\n\n    /** Expands all data nodes in the tree. */\n    abstract expandAll(): void;\n\n    /** Toggles one single data node's expanded/collapsed state. */\n    toggle(dataNode: T): void {\n        this.expansionModel.toggle(dataNode);\n    }\n\n    /** Expands one single data node. */\n    expand(dataNode: T): void {\n        this.expansionModel.select(dataNode);\n    }\n\n    /** Collapses one single data node. */\n    collapse(dataNode: T): void {\n        this.expansionModel.deselect(dataNode);\n    }\n\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n    isExpanded(dataNode: T): boolean {\n        return this.expansionModel.isSelected(dataNode);\n    }\n\n    /** Toggles a subtree rooted at `node` recursively. */\n    toggleDescendants(dataNode: T): void {\n        this.expansionModel.isSelected(dataNode)\n            ? this.collapseDescendants(dataNode)\n            : this.expandDescendants(dataNode);\n    }\n\n    /** Collapse all dataNodes in the tree. */\n    collapseAll(): void {\n        this.expansionModel.clear();\n    }\n\n    /** Expands a subtree rooted at given data node recursively. */\n    expandDescendants(dataNode: T): void {\n        const toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed);\n    }\n\n    /** Collapses a subtree rooted at given data node recursively. */\n    collapseDescendants(dataNode: T): void {\n        const toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed);\n    }\n}\n"],"names":["tslib_1.__decorate","tslib_1.__metadata","tslib_1.__param","observableOf"],"mappings":";;;;;;;;;;;;;;;AWMA;AACA,AAAA,MAAsB,eAAe,CAArC;IAAA,WAAA,GAAA;;QAMI,IAAJ,CAAA,cAAkB,GAAsB,IAAI,cAAc,CAAI,IAAI,CAAC,CAAC;KAiEnE;;IA5CG,MAAM,CAAC,QAAW,EAAtB;QACQ,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;KACxC;;IAGD,MAAM,CAAC,QAAW,EAAtB;QACQ,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;KACxC;;IAGD,QAAQ,CAAC,QAAW,EAAxB;QACQ,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;KAC1C;;IAGD,UAAU,CAAC,QAAW,EAA1B;QACQ,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;KACnD;;IAGD,iBAAiB,CAAC,QAAW,EAAjC;QACQ,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,QAAQ,CAAC;cAClC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC;cAClC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;KAC1C;;IAGD,WAAW,GAAf;QACQ,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;KAC/B;;IAGD,iBAAiB,CAAC,QAAW,EAAjC;QACQ,MAAM,aAAa,GAAG,CAAC,QAAQ,CAAC,CAAC;QACjC,aAAa,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC;QACrD,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,aAAa,CAAC,CAAC;KAChD;;IAGD,mBAAmB,CAAC,QAAW,EAAnC;QACQ,MAAM,aAAa,GAAG,CAAC,QAAQ,CAAC,CAAC;QACjC,aAAa,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC;QACrD,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,GAAG,aAAa,CAAC,CAAC;KAClD;CACJ;;AD3ED;AACA,AAAA,MAAa,eAAmB,SAAQ,eAAkB,CAA1D;;IAGI,WAAJ,CAAuB,QAAiC,EAAS,YAAsC,EAAvG;QACQ,KAAK,EAAE,CAAC;QADO,IAAvB,CAAA,QAA+B,GAAR,QAAQ,CAAyB;QAAS,IAAjE,CAAA,YAA6E,GAAZ,YAAY,CAA0B;KAElG;;;;;;;IAQD,cAAc,CAAC,QAAW,EAA9B;QACQ,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpD,MAAM,OAAO,GAAQ,EAAE,CAAC;;;;;;;QAQxB,KAAK,IAAI,CAAC,GAAG,UAAU,GAAG,CAAC,EACtB,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EACvF,CAAC,EAAE,EACN;YACE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;SACnC;QAED,OAAO,OAAO,CAAC;KAClB;;;;;;;IAQD,SAAS,GAAb;QACQ,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;KACjD;CACJ;;ADxCD;AACA,AAAA,MAAa,iBAAqB,SAAQ,eAAkB,CAA5D;;IAGI,WAAJ,CAAuB,WAA6C,EAApE;QACQ,KAAK,EAAE,CAAC;QADO,IAAvB,CAAA,WAAkC,GAAX,WAAW,CAAkC;KAE/D;;;;;;;IAQD,SAAS,GAAb;QACQ,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;QAC5B,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,WAAgB,EAAE,QAAQ,KAC9D,CAAC,GAAG,WAAW,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;QACtE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC,CAAC;KAC3C;;IAGD,cAAc,CAAC,QAAW,EAA9B;QACQ,MAAM,WAAW,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;;QAG5C,OAAO,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;KAChC;;IAGS,eAAe,CAAC,WAAgB,EAAE,QAAW,EAA3D;QACQ,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3B,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,QAAQ,KAApE;YACY,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;gBACjC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAQ,KAAK,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,CAAC;aAC5E;SACJ,CAAC,CAAC;KACN;CACJ;;AD1CD;;;;AAKA,AAAA,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB,CAA9B;IACI,WAAJ,CAAuB,aAA+B,EAAtD;QAAuB,IAAvB,CAAA,aAAoC,GAAb,aAAa,CAAkB;KAAI;CACzD,CAAA;AAFY,iBAAiB,GAA9BA,UAAA,CAAA;IADC,SAAS,CAAC,EAAE,QAAQ,EAAE,qBAAqB,EAAE,CAAC;IAE/CC,UAAA,CAAA,mBAAA,EAAA,CAAsC,gBAAgB,CAAtD,CAAA;CADA,EAAa,iBAAiB,CAE7B,CAFD;;ADLA;AACA,AAAA,MAAa,wBAAwB,CAArC;IAaI,WAAJ,CAAgB,IAAO,EAAvB;QACQ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;KACzB;CACJ;;;;;AAYD,AAAA,IAAa,cAAc,GAA3B,MAAa,cAAc,CAA3B;;IAWI,WAAJ,CAAuB,QAA0B,EAAjD;QAAuB,IAAvB,CAAA,QAA+B,GAAR,QAAQ,CAAkB;KAAI;CACpD,CAAA;AAZY,cAAc,GAA3BD,UAAA,CAAA;IANC,SAAS,CAAC;QACP,QAAQ,EAAE,kBAAkB;QAC5B,MAAM,EAAE;YACJ,0BAA0B;SAC7B;KACJ,CAAC;IAYFC,UAAA,CAAA,mBAAA,EAAA,CAAiC,WAAW,CAA5C,CAAA;CAXA,EAAa,cAAc,CAY1B,CAZD;;ADhCA;;;;AAIA,AAAA,SAAgB,6BAA6B,GAA7C;IACE,OAAO,KAAK,CAAC,CAAf,qCAAA,CAAsD,CAAC,CAAC;CACvD;;;;;AAMD,AAAA,SAAgB,mCAAmC,GAAnD;IACE,OAAO,KAAK,CAAC,CAAf,oEAAA,CAAqF,CAAC,CAAC;CACtF;;;;;AAMD,AAAA,SAAgB,kCAAkC,GAAlD;IACE,OAAO,KAAK,CAAC,CAAf,qEAAA,CAAsF,CAAC,CAAC;CACvF;;;;;AAMD,AAAA,SAAgB,0BAA0B,GAA1C;IACE,OAAO,KAAK,CAAC,CAAf,2CAAA,CAA4D,CAAC,CAAC;CAC7D;;;;;AAMD,AAAA,SAAgB,mCAAmC,GAAnD;IACE,OAAO,KAAK,CAAC,CAAf,8DAAA,CAA+E,CAAC,CAAC;CAChF;;;ADtCD,AAuCA;;;AAaA,AAAA,IAAa,WAAW,GAAxB,aAAA,GAAA,MAAa,WAAW,CAAxB;IAoCI,WAAJ,CACkB,WAAuB,EAEvB,KAAiB,EAHnC;QACkB,IAAlB,CAAA,WAA6B,GAAX,WAAW,CAAY;QAEvB,IAAlB,CAAA,KAAuB,GAAL,KAAK,CAAY;;;;;QA5BtB,IAAb,CAAA,IAAiB,GAAyB,UAAU,CAAC;;QAGvC,IAAd,CAAA,UAAwB,GAAG,IAAI,OAAO,EAAQ,CAAC;QA2BvC,aAAW,CAAC,kBAAkB,GAAG,IAAsB,CAAC;KAC3D;;IAvBD,IAAI,IAAI,GAAZ;QACQ,OAAO,IAAI,CAAC,KAAK,CAAC;KACrB;IAED,IAAI,IAAI,CAAC,KAAQ,EAArB;QACQ,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,gBAAgB,EAAE,CAAC;KAC3B;IAED,IAAI,UAAU,GAAlB;QACQ,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACxD;IAED,IAAI,KAAK,GAAb;QACQ,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KAC5F;IAUD,WAAW,GAAf;QACQ,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACvB,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;KAC9B;;IAGD,KAAK,GAAT;QACQ,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;KAC1C;IAEO,gBAAgB,GAA5B;QACQ,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,YAAY,EAAE;YACrC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,OAAO,GAAG,UAAU,CAAC;SACtF;aAAM;YACH,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,EAAE;gBACrC,MAAM,mCAAmC,EAAE,CAAC;aAC/C;YAED,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;iBAC1E,SAAS,CAAC,CAAC,QAAQ,KAApC;gBACoB,IAAI,CAAC,IAAI,GAAG,QAAQ,IAAI,QAAQ,CAAC,MAAM,GAAG,OAAO,GAAG,UAAU,CAAC;aAClE,CAAC,CAAC;SACV;KACJ;CACJ,CAAA;;;;;AA/DU,WAAX,CAAA,kBAA6B,GAA4B,IAAI,CAAC;AAMjDD,UAAb,CAAA;IAAK,KAAK,EAAE;;CAAZ,EAAA,WAAA,CAAA,SAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAqD,CAArD;AAXa,WAAW,GAAxB,aAAA,GAAAA,UAAA,CAAA;IAVC,SAAS,CAAC;QACP,QAAQ,EAAE,eAAe;QACzB,QAAQ,EAAE,aAAa;QACvB,IAAI,EAAE;YACF,sBAAsB,EAAE,YAAY;YACpC,mBAAmB,EAAE,oCAAoC;YACzD,aAAa,EAAE,MAAM;YACrB,KAAK,EAAE,eAAe;SACzB;KACJ,CAAC;IAuCOE,OAAT,CAAA,CAAA,EAAS,MAAM,CAAC,UAAU,CAAC,MAAM,OAAO,CAAC,CAAC,CAAA;IAD1CD,UAAA,CAAA,mBAAA,EAAA,CAA+B,UAAU;QAEhB,OAAO,CAAhC,CAAA;CAvCA,EAAa,WAAW,CAoEvB,CApED;AAAA,AAuEA;;;;AAeA,AAAA,IAAa,OAAO,GAApB,MAAa,OAAO,CAApB;IA8DI,WAAJ,CACgB,QAAyB,EACzB,kBAAqC,EAFrD;QACgB,IAAhB,CAAA,QAAwB,GAAR,QAAQ,CAAiB;QACzB,IAAhB,CAAA,kBAAkC,GAAlB,kBAAkB,CAAmB;;;;;;;QAvCjD,IAAJ,CAAA,UAAc,GACN,IAAI,eAAe,CAAiC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;;QAMrF,IAAZ,CAAA,UAAsB,GAAG,IAAI,OAAO,EAAQ,CAAC;;QAUjC,IAAZ,CAAA,OAAmB,GAAmB,IAAI,GAAG,EAAa,CAAC;KAuBnD;;;;;;IAfJ,IAAI,UAAU,GAAlB;QACQ,OAAO,IAAI,CAAC,WAAW,CAAC;KAC3B;IAED,IAAI,UAAU,CAAC,UAAiD,EAApE;QACQ,IAAI,IAAI,CAAC,WAAW,KAAK,UAAU,EAAE;YACjC,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;SACtC;KACJ;IASD,QAAQ,GAAZ;QACQ,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAE/D,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACnB,MAAM,0BAA0B,EAAE,CAAC;SACtC;KACJ;IAED,WAAW,GAAf;QACQ,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QAEvC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACvB,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;QAE3B,IAAI,IAAI,CAAC,WAAW,IAAI,OAAQ,IAAI,CAAC,WAA6B,CAAC,UAAU,KAAK,UAAU,EAAE;YACzF,IAAI,CAAC,UAA4B,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;SACvD;QAED,IAAI,IAAI,CAAC,iBAAiB,EAAE;YACxB,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;YACrC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;SACjC;KACJ;IAED,qBAAqB,GAAzB;QACQ,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClE,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5B,MAAM,mCAAmC,EAAE,CAAC;SAC/C;QACD,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;QAE1C,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YAC9D,IAAI,CAAC,qBAAqB,EAAE,CAAC;SAChC;KACJ;;IAGD,iBAAiB,CACb,IAAS,EACT,UAFR,GAEwC,IAAI,CAAC,WAAW,EAChD,aAHR,GAG0C,IAAI,CAAC,WAAW,CAAC,aAAa,EAChE,UAAc,EAJtB;QAMQ,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEtC,IAAI,CAAC,OAAO,EAAE;YAAE,OAAO;SAAE;QAEzB,OAAO,CAAC,gBAAgB,CAAC,CAAC,IAA6B,EAC7B,qBAAoC,EACpC,YAA2B,KAF7D;YAGY,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,EAAE;gBAC5B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAa,CAAC,EAAE,YAAa,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;aAClF;iBAAM,IAAI,YAAY,IAAI,IAAI,EAAE;gBAC7B,aAAa,CAAC,MAAM,CAAC,qBAAsB,CAAC,CAAC;gBAC7C,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAClC;iBAAM;gBACH,MAAM,IAAI,GAAG,aAAa,CAAC,GAAG,CAAC,qBAAsB,CAAC,CAAC;gBACvD,aAAa,CAAC,IAAI,CAAC,IAAK,EAAE,YAAY,CAAC,CAAC;aAC3C;SACJ,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE,CAAC;KAC3C;;;;;;;IAQD,WAAW,CAAC,IAAO,EAAE,CAAS,EAAlC;QACQ,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;YAAE,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;SAAE;QAEjE,MAAM,OAAO,GACT,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC;QAExF,IAAI,CAAC,OAAO,EAAE;YAAE,MAAM,kCAAkC,EAAE,CAAC;SAAE;QAE7D,OAAO,OAAO,CAAC;KAClB;;;;;IAMD,UAAU,CAAC,QAAW,EAAE,KAAa,EAAE,aAAgC,EAAE,UAAc,EAA3F;QACQ,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;;QAG/C,MAAM,OAAO,GAAG,IAAI,wBAAwB,CAAI,QAAQ,CAAC,CAAC;;;QAI1D,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;YAC3B,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;SACvD;aAAM,IAAI,OAAO,UAAU,KAAK,WAAW,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;YAC1E,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAE,GAAG,CAAC,CAAC;SACrD;aAAM;YACH,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC;SACrB;QAED,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;;QAG1C,MAAM,SAAS,GAAG,aAAa,GAAG,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;QACjF,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;;;;QAK5D,IAAI,WAAW,CAAC,kBAAkB,EAAE;YAChC,WAAW,CAAC,kBAAkB,CAAC,IAAI,GAAG,QAAQ,CAAC;SAClD;KACJ;;IAGO,qBAAqB,GAAjC;QACQ,IAAI,UAAuC,CAAC;;;QAI5C,IAAI,OAAQ,IAAI,CAAC,WAA6B,CAAC,OAAO,KAAK,UAAU,EAAE;YACnE,UAAU,GAAI,IAAI,CAAC,WAA6B,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAClE;aAAM,IAAI,IAAI,CAAC,WAAW,YAAY,UAAU,EAAE;YAC/C,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;SACjC;aAAM,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YACxC,UAAU,GAAGE,EAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC/C;QAED,IAAI,UAAU,EAAE;YACZ,IAAI,CAAC,iBAAiB,GAAG,UAAU;iBAC9B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;iBAChC,SAAS,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;SAC1D;aAAM;YACH,MAAM,6BAA6B,EAAE,CAAC;SACzC;KACJ;;;;;;IAOO,iBAAiB,CAAC,UAAiD,EAA/E;QACQ,IAAI,IAAI,CAAC,WAAW,IAAI,OAAQ,IAAI,CAAC,WAA6B,CAAC,UAAU,KAAK,UAAU,EAAE;YACzF,IAAI,CAAC,UAA4B,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;SACvD;QAED,IAAI,IAAI,CAAC,iBAAiB,EAAE;YACxB,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;YACrC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;SACjC;;QAGD,IAAI,CAAC,UAAU,EAAE;YAAE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;SAAE;QAE5D,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAE9B,IAAI,IAAI,CAAC,SAAS,EAAE;YAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC;SAAE;KACxD;CACJ,CAAA;AAhOYH,UAAb,CAAA;IAAK,KAAK,EAAE;;CAAZ,EAAA,OAAA,CAAA,SAAA,EAAA,aAAA,EAAA,KAAA,CAAA,CAA0C,CAA1C;AAQaA,UAAb,CAAA;IAAK,KAAK,EAAE;;CAAZ,EAAA,OAAA,CAAA,SAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAyC,CAAzC;AAGkCA,UAAlC,CAAA;IAAK,SAAS,CAAC,iBAAiB,CAAC;IAAjCC,UAAA,CAAA,aAAA,EAA+C,iBAAiB,CAAhE;CAAA,EAAA,OAAA,CAAA,SAAA,EAAA,aAAA,EAAA,KAAA,CAAA,CAAiE,CAAjE;AAGqCD,UAArC,CAAA;IAAK,eAAe,CAAC,cAAc,CAAC;IAApCC,UAAA,CAAA,aAAA,EAAgD,SAAS,CAAzD;CAAA,EAAA,OAAA,CAAA,SAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAA6E,CAA7E;AAiCID,UAAJ,CAAA;IADK,KAAK,EAAE;;;CAGZ,EAAA,OAAA,CAAA,SAAA,EAAA,YAAA,EAAA,IAAA,CAAK,CAAL;AApDa,OAAO,GAApBA,UAAA,CAAA;IAXC,SAAS,CAAC;QACP,QAAQ,EAAE,UAAU;QACpB,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,CAAd,+CAAA,CAA+D;QAC3D,IAAI,EAAE;YACF,KAAK,EAAE,UAAU;YACjB,IAAI,EAAE,MAAM;SACf;QACD,aAAa,EAAE,iBAAiB,CAAC,IAAI;QACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM;KAClD,CAAC;IAgEFC,UAAA,CAAA,mBAAA,EAAA,CAA0B,eAAe;QACL,iBAAiB,CAArD,CAAA;CAhEA,EAAa,OAAO,CAmOnB,CAnOD;;;AD1IA,AAiBA;;;;;;;;;;;;;;;;;;;;;AA+BA,AAAA,IAAa,iBAAiB,GAA9B,mBAAA,GAAA,MAAa,iBAAqB,SAAQ,WAAc,CAAxD;IAUI,WAAJ,CACkB,WAAuB,EACvB,KAAiB,EACjB,QAAyB,EAH3C;QAKQ,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QAJhB,IAAlB,CAAA,WAA6B,GAAX,WAAW,CAAY;QACvB,IAAlB,CAAA,KAAuB,GAAL,KAAK,CAAY;QACjB,IAAlB,CAAA,QAA0B,GAAR,QAAQ,CAAiB;KAGtC;IAED,kBAAkB,GAAtB;QACQ,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAErE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,EAAE;YACrC,MAAM,mCAAmC,EAAE,CAAC;SAC/C;QAED,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;aACxC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aAChC,SAAS,CAAC,CAAC,MAAM,KAA9B;YACgB,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC;YACxB,IAAI,CAAC,mBAAmB,EAAE,CAAC;SAC9B,CAAC,CAAC;QAEP,IAAI,CAAC,UAAU,CAAC,OAAO;aAClB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aAChC,SAAS,CAAC,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;KACpD;IAED,WAAW,GAAf;QACQ,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,KAAK,CAAC,WAAW,EAAE,CAAC;KACvB;;IAGS,mBAAmB,GAAjC;QACQ,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS,EAAE;YAC1C,IAAI,CAAC,KAAK,CAAC,iBAAiB,CACxB,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,KAAK,CACpF,CAAC;SACL;aAAM;;YAEH,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAC7B;KACJ;;IAGS,MAAM,GAApB;QACQ,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE;YAC1C,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;YAC5C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAC7B;KACJ;CACJ,CAAA;AA3DuCD,UAAxC,CAAA;IAAK,eAAe,CAAC,iBAAiB,CAAC;IAAvCC,UAAA,CAAA,aAAA,EAAoD,SAAS,CAA7D;CAAA,EAAA,iBAAA,CAAA,SAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAiF,CAAjF;AAFa,iBAAiB,GAA9B,mBAAA,GAAAD,UAAA,CAAA;IAVC,SAAS,CAAC;QACP,QAAQ,EAAE,sBAAsB;QAChC,QAAQ,EAAE,mBAAmB;QAC7B,IAAI,EAAE;YACF,sBAAsB,EAAE,YAAY;YACpC,aAAa,EAAE,MAAM;YACrB,KAAK,EAAE,oCAAoC;SAC9C;QACD,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,mBAAiB,EAAE,CAAC;KACxE,CAAC;IAYFC,UAAA,CAAA,mBAAA,EAAA,CAA+B,UAAU;QAChB,OAAO;QACJ,eAAe,CAA3C,CAAA;CAbA,EAAa,iBAAiB,CA6D7B,CA7DD;;ADrCA;;;;AAOA,AAAA,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB,CAA/B;IAiCI,WAAJ,CACkB,SAAyB,EACzB,KAAiB,EACnB,SAAoB,EACpB,QAAiC,EACrB,IAAoB,EALhD;QACkB,IAAlB,CAAA,SAA2B,GAAT,SAAS,CAAgB;QACzB,IAAlB,CAAA,KAAuB,GAAL,KAAK,CAAY;QACnB,IAAhB,CAAA,SAAyB,GAAT,SAAS,CAAW;QACpB,IAAhB,CAAA,QAAwB,GAAR,QAAQ,CAAyB;QACrB,IAA5B,CAAA,IAAgC,GAAJ,IAAI,CAAgB;QAhCpC,IAAZ,CAAA,UAAsB,GAAG,IAAI,OAAO,EAAQ,CAAC;QAmCrC,IAAI,IAAI,CAAC,IAAI,EAAE;YACX,IAAI,CAAC,IAAI,CAAC,MAAM;iBACX,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;iBAChC,SAAS,CAAC,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;SAC5C;KACJ;;IApCD,IAAI,KAAK,GAAb;QACQ,OAAO,IAAI,CAAC,MAAM,CAAC;KACtB;IAED,IAAI,KAAK,CAAC,KAAa,EAA3B;;QAEQ,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,WAAW,EAAE,CAAC;KACtB;IAID,IAAI,MAAM,GAAd;QACQ,OAAO,IAAI,CAAC,OAAO,CAAC;KACvB;IAED,IAAI,MAAM,CAAC,KAAa,EAA5B;;QAEQ,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,WAAW,EAAE,CAAC;KACtB;IAkBD,WAAW,GAAf;QACQ,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACvB,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;KAC9B;;IAGD,cAAc,GAAlB;QACQ,MAAM,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ;cACnE,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;cACpD,IAAI,CAAC;QAEX,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,IAAI,SAAS,CAAC;QAEvC,OAAO,KAAK,GAAG,CAAvB,EAA0B,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,IAAI,EAAE,CAArD,EAAA,CAAyD,GAAG,MAAM,CAAC;KAC9D;IAED,WAAW,GAAf;QACQ,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QACtC,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,GAAG,cAAc,GAAG,aAAa,CAAC;QAE5F,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;KAC9E;CACJ,CAAA;AA5DGD,UAAJ,CAAA;IADK,KAAK,CAAC,oBAAoB,CAAC;;;CAGhC,EAAA,kBAAA,CAAA,SAAA,EAAA,OAAA,EAAA,IAAA,CAAK,CAAL;AAUIA,UAAJ,CAAA;IADK,KAAK,CAAC,0BAA0B,CAAC;;;CAGtC,EAAA,kBAAA,CAAA,SAAA,EAAA,QAAA,EAAA,IAAA,CAAK,CAAL;AAxBa,kBAAkB,GAA/BA,UAAA,CAAA;IAHC,SAAS,CAAC;QACP,QAAQ,EAAE,sBAAsB;KACnC,CAAC;IAuCOE,OAAT,CAAA,CAAA,EAAS,QAAQ,EAAE,CAAA;IAJnBD,UAAA,CAAA,mBAAA,EAAA,CAA6B,WAAW;QACf,OAAO;QACL,SAAS;QACV,UAAU;QACF,cAAc,CAAhD,CAAA;CAtCA,EAAa,kBAAkB,CAsE9B,CAtED;;ADVA;;;AASA,AAAA,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB,CAA9B;IAcI,WAAJ,CAA0B,KAAiB,EAAY,SAAyB,EAAhF;QAA0B,IAA1B,CAAA,KAA+B,GAAL,KAAK,CAAY;QAAY,IAAvD,CAAA,SAAgE,GAAT,SAAS,CAAgB;;QAFlE,IAAd,CAAA,UAAwB,GAAG,KAAK,CAAC;KAEmD;;IAXhF,IAAI,SAAS,GAAjB;QACQ,OAAO,IAAI,CAAC,UAAU,CAAC;KAC1B;IAED,IAAI,SAAS,CAAC,KAAc,EAAhC;QACQ,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;KAC3B;IAOD,OAAO,CAAC,KAAY,EAAxB;QACQ,IAAI,CAAC,SAAS;cACR,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;cAC7D,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAEzD,KAAK,CAAC,eAAe,EAAE,CAAC;KAC3B;CACJ,CAAA;AApBGD,UAAJ,CAAA;IADK,KAAK,CAAC,4BAA4B,CAAC;;;CAGxC,EAAA,iBAAA,CAAA,SAAA,EAAA,WAAA,EAAA,IAAA,CAAK,CAAL;AALa,iBAAiB,GAA9BA,UAAA,CAAA;IANC,SAAS,CAAC;QACP,QAAQ,EAAE,qBAAqB;QAC/B,IAAI,EAAE;YACF,SAAS,EAAE,iBAAiB;SAC/B;KACJ,CAAC;IAeFC,UAAA,CAAA,mBAAA,EAAA,CAAiC,OAAO,EAA0B,WAAW,CAA7E,CAAA;CAdA,EAAa,iBAAiB,CAuB7B,CAvBD;;ADLA,MAAM,qBAAqB,GAAG;IAC1B,iBAAiB;IACjB,cAAc;IACd,kBAAkB;IAClB,iBAAiB;IACjB,OAAO;IACP,WAAW;IACX,iBAAiB;CACpB,CAAC;AAQF,AAAA,IAAa,aAAa,GAA1B,MAAa,aAAa,CAA1B;CAA6B,CAAA;AAAhB,aAAa,GAA1BD,UAAA,CAAA;IANC,QAAQ,CAAC;QACN,OAAO,EAAE,CAAC,YAAY,CAAC;QACvB,OAAO,EAAE,qBAAqB;QAC9B,YAAY,EAAE,qBAAqB;QACnC,SAAS,EAAE,CAAC,YAAY,EAAE,cAAc,CAAC;KAC5C,CAAC;CACF,EAAa,aAAa,CAAG,CAA7B;;AD5BA;;GAEG;;;;"}