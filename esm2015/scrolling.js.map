{"version":3,"file":"scrolling.js","sources":["../../../src/cdk/scrolling/index.ts","../../../src/cdk/scrolling/viewport-ruler.ts","../../../src/cdk/scrolling/scrolling-module.ts","../../../src/cdk/scrolling/virtual-for-of.ts","../../../src/cdk/scrolling/virtual-scroll-viewport.ts","../../../src/cdk/scrolling/scrollable.ts","../../../src/cdk/scrolling/scroll-dispatcher.ts","../../../src/cdk/scrolling/fixed-size-virtual-scroll.ts","../../../src/cdk/scrolling/virtual-scroll-strategy.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","import { Injectable, NgZone, OnDestroy, Optional, SkipSelf } from '@angular/core';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { merge, of as observableOf, fromEvent, Observable, Subscription } from 'rxjs';\nimport { auditTime } from 'rxjs/operators';\n\n\n/** Time in ms to throttle the resize events by default. */\nexport const DEFAULT_RESIZE_TIME = 20;\n\nexport interface ViewportScrollPosition {\n    top: number;\n    left: number;\n}\n\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class ViewportRuler implements OnDestroy {\n    /** Cached viewport dimensions. */\n    private _viewportSize: {width: number; height: number};\n\n    /** Stream of viewport change events. */\n    private _change: Observable<Event>;\n\n    /** Subscription to streams that invalidate the cached viewport dimensions. */\n    private _invalidateCache: Subscription;\n\n    constructor(private _platform: Platform, ngZone: NgZone) {\n        ngZone.runOutsideAngular(() => {\n            this._change = _platform.isBrowser ?\n                merge<Event>(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) :\n                observableOf();\n\n            // Note that we need to do the subscription inside `runOutsideAngular`\n            // since subscribing is what causes the event listener to be added.\n            this._invalidateCache = this.change().subscribe(() => this._updateViewportSize());\n        });\n    }\n\n    ngOnDestroy() {\n        this._invalidateCache.unsubscribe();\n    }\n\n    /** Returns the viewport's width and height. */\n    getViewportSize(): Readonly<{width: number, height: number}> {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n\n        const output = {width: this._viewportSize.width, height: this._viewportSize.height};\n\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null!; //tslint:disable-line\n        }\n\n        return output;\n    }\n\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect(): ClientRect {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const {width, height} = this.getViewportSize();\n\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width\n        };\n    }\n\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition(): ViewportScrollPosition {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return {top: 0, left: 0};\n        }\n\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const documentElement = document.documentElement!;\n        const documentRect = documentElement.getBoundingClientRect();\n\n        const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            document.documentElement!.scrollTop || 0;\n\n        const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            document.documentElement!.scrollLeft || 0;\n\n        return { top, left };\n    }\n\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime: number = DEFAULT_RESIZE_TIME): Observable<Event> {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n\n    /** Updates the cached viewport size. */\n    private _updateViewportSize() {\n        this._viewportSize = this._platform.isBrowser ?\n            {width: window.innerWidth, height: window.innerHeight} :\n            {width: 0, height: 0};\n    }\n}\n\n\n/** @docs-private\n * @deprecated\n */\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\n                                                platform: Platform,\n                                                ngZone: NgZone) {\n    return parentRuler || new ViewportRuler(platform, ngZone);\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const VIEWPORT_RULER_PROVIDER = {\n    // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n    provide: ViewportRuler,\n    deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\n    useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n","import { NgModule } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { CdkFixedSizeVirtualScroll } from './fixed-size-virtual-scroll';\nimport { CdkScrollable } from './scrollable';\nimport { CdkVirtualForOf } from './virtual-for-of';\nimport { CdkVirtualScrollViewport } from './virtual-scroll-viewport';\n\n\n@NgModule({\n    imports: [BidiModule, PlatformModule],\n    exports: [\n        BidiModule,\n        CdkFixedSizeVirtualScroll,\n        CdkScrollable,\n        CdkVirtualForOf,\n        CdkVirtualScrollViewport\n    ],\n    declarations: [\n        CdkFixedSizeVirtualScroll,\n        CdkScrollable,\n        CdkVirtualForOf,\n        CdkVirtualScrollViewport\n    ]\n})\nexport class ScrollingModule {}\n\n\n/**\n * @deprecated\n * @breaking-change\n */\n@NgModule({\n    imports: [ScrollingModule],\n    exports: [ScrollingModule]\n})\nexport class ScrollDispatchModule {}\n","import {\n    Directive,\n    DoCheck,\n    EmbeddedViewRef,\n    Input,\n    IterableChangeRecord,\n    IterableChanges,\n    IterableDiffer,\n    IterableDiffers,\n    NgIterable,\n    NgZone,\n    OnDestroy,\n    SkipSelf,\n    TemplateRef,\n    TrackByFunction,\n    ViewContainerRef\n} from '@angular/core';\nimport { ArrayDataSource, ICollectionViewer, DataSource, ListRange } from '@ptsecurity/cdk/collections';\nimport { Observable, Subject } from 'rxjs';\nimport { pairwise, shareReplay, startWith, switchMap, takeUntil } from 'rxjs/operators';\n\nimport { CdkVirtualScrollViewport } from './virtual-scroll-viewport';\n\n\n/** The context for an item rendered by `CdkVirtualForOf` */\nexport interface CdkVirtualForOfContext<T> {\n    /** The item value. */\n    $implicit: T;\n    /** The DataSource, Observable, or NgIterable that was passed to *cdkVirtualFor. */\n    cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\n    /** The index of the item in the DataSource. */\n    index: number;\n    /** The number of items in the DataSource. */\n    count: number;\n    /** Whether this is the first item in the DataSource. */\n    first: boolean;\n    /** Whether this is the last item in the DataSource. */\n    last: boolean;\n    /** Whether the index is even. */\n    even: boolean;\n    /** Whether the index is odd. */\n    odd: boolean;\n}\n\n\n/** Helper to extract size from a DOM Node. */\nfunction getSize(orientation: 'horizontal' | 'vertical', node: Node): number {\n    const el = node as Element;\n\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n\n    return orientation == 'horizontal' ? rect.width : rect.height;\n}\n\n\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\n@Directive({\n    selector: '[cdkVirtualFor][cdkVirtualForOf]'\n})\nexport class CdkVirtualForOf<T> implements ICollectionViewer, DoCheck, OnDestroy {\n\n    /** The DataSource to display. */\n    @Input()\n    get cdkVirtualForOf(): DataSource<T> | Observable<T[]> | NgIterable<T> {\n        return this._cdkVirtualForOf;\n    }\n\n    set cdkVirtualForOf(value: DataSource<T> | Observable<T[]> | NgIterable<T>) {\n        this._cdkVirtualForOf = value;\n        const ds = value instanceof DataSource ? value :\n            // Slice the value if its an NgIterable to ensure we're working with an array.\n            new ArrayDataSource<T>(\n                value instanceof Observable ? value : Array.prototype.slice.call(value || []));\n        this._dataSourceChanges.next(ds);\n    }\n\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    @Input()\n    get cdkVirtualForTrackBy(): TrackByFunction<T> | undefined {\n        return this._cdkVirtualForTrackBy;\n    }\n\n    set cdkVirtualForTrackBy(fn: TrackByFunction<T> | undefined) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn ?\n            (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\n            undefined;\n    }\n\n    /** The template used to stamp out new elements. */\n    @Input()\n    set cdkVirtualForTemplate(value: TemplateRef<CdkVirtualForOfContext<T>>) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n\n    /** Emits when the rendered view of the data changes. */\n    viewChange = new Subject<ListRange>();\n    _cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\n\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    @Input() cdkVirtualForTemplateCacheSize: number = 20;\n\n    /** Subject that emits when a new DataSource instance is given. */\n    private _dataSourceChanges = new Subject<DataSource<T>>();\n\n    /** Emits whenever the data in the current DataSource changes. */\n    dataStream: Observable<T[] | ReadonlyArray<T>> = this._dataSourceChanges\n        .pipe(\n            // Start off with null `DataSource`.\n            startWith<DataSource<T>>(null!),\n            // Bundle up the previous and current data sources so we can work with both.\n            pairwise(),\n            // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n            // new one, passing back a stream of data changes which we run through `switchMap` to give\n            // us a data stream that emits the latest data from whatever the current `DataSource` is.\n            switchMap(([prev, cur]) => this._changeDataSource(prev, cur)),\n            // Replay the last emitted data when someone subscribes.\n            shareReplay(1));\n\n    private _cdkVirtualForTrackBy: TrackByFunction<T> | undefined;\n\n    /** The differ used to calculate changes to the data. */\n    private _differ: IterableDiffer<T> | null = null;\n\n    /** The most recent data emitted from the DataSource. */\n    private _data: T[] | ReadonlyArray<T>;\n\n    /** The currently rendered items. */\n    private _renderedItems: T[];\n\n    /** The currently rendered range of indices. */\n    private _renderedRange: ListRange;\n\n    /**\n     * The template cache used to hold on ot template instancess that have been stamped out, but don't\n     * currently need to be rendered. These instances will be reused in the future rather than\n     * stamping out brand new ones.\n     */\n    private _templateCache: EmbeddedViewRef<CdkVirtualForOfContext<T>>[] = [];\n\n    /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n    private _needsUpdate = false;\n\n    private _destroyed = new Subject<void>();\n\n    constructor(\n        /** The view container to add items to. */\n        private _viewContainerRef: ViewContainerRef,\n        /** The template to use when stamping out new items. */\n        private _template: TemplateRef<CdkVirtualForOfContext<T>>,\n        /** The set of available differs. */\n        private _differs: IterableDiffers,\n        /** The virtual scrolling viewport that these items are being rendered in. */\n        @SkipSelf() private _viewport: CdkVirtualScrollViewport,\n        ngZone: NgZone) {\n        this.dataStream.subscribe((data) => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe((range) => {\n            this._renderedRange = range;\n            ngZone.run(() => this.viewChange.next(this._renderedRange));\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range: ListRange, orientation: 'horizontal' | 'vertical'): number {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n\n        // Loop over all root nodes for all items in the range and sum up their size.\n        let totalSize = 0;\n        let i = rangeLen;\n        while (i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex) as\n                EmbeddedViewRef<CdkVirtualForOfContext<T>> | null;\n            let j = view ? view.rootNodes.length : 0;\n            while (j--) {\n                totalSize += getSize(orientation, view!.rootNodes[j]);\n            }\n        }\n\n        return totalSize;\n    }\n\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO: We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            } else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n\n    ngOnDestroy() {\n        this._viewport.detach();\n\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n\n        this._destroyed.next();\n        this._destroyed.complete();\n\n        for (const view of this._templateCache) {\n            view.destroy();\n        }\n    }\n\n    /** React to scroll state changes in the viewport. */\n    private _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n        }\n        this._needsUpdate = true;\n    }\n\n    /** Swap out one `DataSource` for another. */\n    private _changeDataSource(oldDs: DataSource<T> | null, newDs: DataSource<T>):\n        Observable<T[] | ReadonlyArray<T>> {\n\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n\n        this._needsUpdate = true;\n\n        return newDs.connect(this);\n    }\n\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    private _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n\n    /** Apply changes to the DOM. */\n    private _applyChanges(changes: IterableChanges<T>) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record: IterableChangeRecord<T>,\n                                  adjustedPreviousIndex: number | null,\n                                  currentIndex: number | null) => {\n            if (record.previousIndex == null) {  // Item added.\n                const view = this._getViewForNewItem();\n                this._viewContainerRef.insert(view, currentIndex!);\n                view.context.$implicit = record.item;\n            } else if (currentIndex == null) {  // Item removed.\n                this._cacheView(this._viewContainerRef.detach(adjustedPreviousIndex!) as\n                    EmbeddedViewRef<CdkVirtualForOfContext<T>>);\n            } else {  // Item moved.\n                const view = this._viewContainerRef.get(adjustedPreviousIndex!) as\n                    EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n                this._viewContainerRef.move(view, currentIndex);\n                view.context.$implicit = record.item;\n            }\n        });\n\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record: IterableChangeRecord<T>) => {\n            const view = this._viewContainerRef.get(record.currentIndex!) as\n                EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n            view.context.$implicit = record.item;\n        });\n\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n\n    /** Cache the given detached view. */\n    private _cacheView(view: EmbeddedViewRef<CdkVirtualForOfContext<T>>) {\n        if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n            this._templateCache.push(view);\n        } else {\n            const index = this._viewContainerRef.indexOf(view);\n\n            // It's very unlikely that the index will ever be -1, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            } else {\n                this._viewContainerRef.remove(index);\n            }\n        }\n    }\n\n    /** Get a view for a new item, either from the cache or by creating a new one. */\n    private _getViewForNewItem(): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\n        return this._templateCache.pop() || this._viewContainerRef.createEmbeddedView(this._template, {\n            $implicit: null!,\n            cdkVirtualForOf: this._cdkVirtualForOf,\n            index: -1,\n            count: -1,\n            first: false,\n            last: false,\n            odd: false,\n            even: false\n        });\n    }\n\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    private _updateComputedContextProperties(context: CdkVirtualForOfContext<any>) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    Inject,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { ListRange } from '@ptsecurity/cdk/collections';\nimport { animationFrameScheduler, Observable, Subject, Observer } from 'rxjs';\nimport { auditTime, startWith, takeUntil } from 'rxjs/operators';\n\nimport { ScrollDispatcher } from './scroll-dispatcher';\nimport { CdkScrollable, ExtendedScrollToOptions } from './scrollable';\nimport { CdkVirtualForOf } from './virtual-for-of';\nimport { VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy } from './virtual-scroll-strategy';\n\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1: ListRange, r2: ListRange): boolean {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n\n\n/** A viewport that virtualizes it's scrolling with the help of `CdkVirtualForOf`. */\n@Component({\n    selector: 'cdk-virtual-scroll-viewport',\n    templateUrl: 'virtual-scroll-viewport.html',\n    styleUrls: ['virtual-scroll-viewport.css'],\n    host: {\n        class: 'cdk-virtual-scroll-viewport',\n        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{\n        provide: CdkScrollable,\n        useExisting: CdkVirtualScrollViewport\n    }]\n})\nexport class CdkVirtualScrollViewport extends CdkScrollable implements OnInit, OnDestroy {\n\n    /** The direction the viewport scrolls. */\n    @Input() orientation: 'horizontal' | 'vertical' = 'vertical';\n\n    // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n    // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n    // depending on how the strategy calculates the scrolled index, it may come at a cost to\n    // performance.\n    /** Emits when the index of the first element visible in the viewport changes. */\n    @Output() scrolledIndexChange: Observable<number> =\n        Observable.create((observer: Observer<number>) =>\n            this._scrollStrategy.scrolledIndexChange.subscribe((index) =>\n                Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n\n    /** The element that wraps the rendered content. */\n    @ViewChild('contentWrapper') _contentWrapper: ElementRef<HTMLElement>;\n\n    /** Emits when the viewport is detached from a CdkVirtualForOf. */\n    private _detachedSubject = new Subject<void>();\n\n    /** Emits when the rendered range changes. */\n    private _renderedRangeSubject = new Subject<ListRange>();\n\n    /** A stream that emits whenever the rendered range changes. */\n    renderedRangeStream: Observable<ListRange> = this._renderedRangeSubject.asObservable();\n\n    /**\n     * The transform used to scale the spacer to the same size as all content, including content that\n     * is not currently rendered.\n     */\n    _totalContentSizeTransform = '';\n\n    /**\n     * The total size of all content (in pixels), including content that is not currently rendered.\n     */\n    private _totalContentSize = 0;\n\n    /**\n     * The CSS transform applied to the rendered subset of items so that they appear within the bounds\n     * of the visible viewport.\n     */\n    private _renderedContentTransform: string;\n\n    /** The currently rendered range of indices. */\n    private _renderedRange: ListRange = {start: 0, end: 0};\n\n    /** The length of the data bound to this viewport (in number of items). */\n    private _dataLength = 0;\n\n    /** The size of the viewport (in pixels). */\n    private _viewportSize = 0;\n\n    /** the currently attached CdkVirtualForOf. */\n    private _forOf: CdkVirtualForOf<any> | null;\n\n    /** The last rendered content offset that was set. */\n    private _renderedContentOffset = 0;\n\n    /**\n     * Whether the last rendered content offset was to the end of the content (and therefore needs to\n     * be rewritten as an offset to the start of the content).\n     */\n    private _renderedContentOffsetNeedsRewrite = false;\n\n    /** Whether there is a pending change detection cycle. */\n    private _isChangeDetectionPending = false;\n\n    /** A list of functions to run after the next change detection cycle. */\n    private _runAfterChangeDetection: Function[] = [];\n\n    constructor(public elementRef: ElementRef<HTMLElement>,\n                private _changeDetectorRef: ChangeDetectorRef,\n                ngZone: NgZone,\n                @Optional() @Inject(VIRTUAL_SCROLL_STRATEGY)\n                private _scrollStrategy: VirtualScrollStrategy,\n                @Optional() dir: Directionality,\n                scrollDispatcher: ScrollDispatcher) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n\n        if (!_scrollStrategy) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n\n            this.elementScrolled()\n                .pipe(\n                    // Start off with a fake scroll event so we properly detect our initial position.\n                    startWith<Event | null>(null!),\n                    // Collect multiple events into one until the next animation frame. This way if\n                    // there are multiple scroll events in the same frame we only need to recheck\n                    // our layout once.\n                    auditTime(0, animationFrameScheduler))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n\n            this._markChangeDetectionNeeded();\n        }));\n    }\n\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n\n        super.ngOnDestroy();\n    }\n\n    /** Attaches a `CdkVirtualForOf` to this viewport. */\n    attach(forOf: CdkVirtualForOf<any>) {\n        if (this._forOf) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe((data) => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength(): number {\n        return this._dataLength;\n    }\n\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize(): number {\n        return this._viewportSize;\n    }\n\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n\n    /** Get the current rendered range of items. */\n    getRenderedRange(): ListRange {\n        return this._renderedRange;\n    }\n\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size: number) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            const axis = this.orientation == 'horizontal' ? 'X' : 'Y';\n            this._totalContentSizeTransform = `scale${axis}(${this._totalContentSize})`;\n            this._markChangeDetectionNeeded();\n        }\n    }\n\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range: ListRange) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            this._renderedRangeSubject.next(this._renderedRange = range);\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart(): number | null {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset: number, to: 'to-start' | 'to-end' = 'to-start') {\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                } else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset: number, behavior: ScrollBehavior = 'auto') {\n        const options: ExtendedScrollToOptions = {behavior};\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        } else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    }\n\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index: number, behavior: ScrollBehavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from?: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\n        return super.measureScrollOffset(\n            from ? from : this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize(): number {\n        const contentEl = this._contentWrapper.nativeElement;\n\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range: ListRange): number {\n        if (!this._forOf) {\n            return 0;\n        }\n\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n\n    /** Measure the viewport size. */\n    private _measureViewportSize() {\n        const viewportEl = this.elementRef.nativeElement;\n        this._viewportSize = this.orientation === 'horizontal' ?\n            viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n\n    /** Queue up change detection to run. */\n    private _markChangeDetectionNeeded(runAfter?: Function) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n\n    /** Run change detection. */\n    private _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n}\n","import { Directive, ElementRef, OnInit, OnDestroy, NgZone, Optional } from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior } from '@ptsecurity/cdk/platform';\nimport { fromEvent, Observable, Observer, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { ScrollDispatcher } from './scroll-dispatcher';\n\n\nexport type _Without<T> = {[P in keyof T]?: never};\nexport type _XOR<T, U> = (_Without<T> & U) | (_Without<U> & T);\n\nexport interface _Top    { top?: number; }\nexport interface _Bottom { bottom?: number; }\nexport interface _Left   { left?: number; }\nexport interface _Right  { right?: number; }\nexport interface _Start  { start?: number; }\nexport interface _End    { end?: number; }\n\nexport type _XAxis = _XOR<_XOR<_Left, _Right>, _XOR<_Start, _End>>;\nexport type _YAxis = _XOR<_Top, _Bottom>;\n\n/**\n * An extended version of ScrollToOptions that allows expressing scroll offsets relative to the\n * top, bottom, left, right, start, or end of the viewport rather than just the top and left.\n * Please note: the top and bottom properties are mutually exclusive, as are the left, right,\n * start, and end properties.\n */\nexport type ExtendedScrollToOptions = _XAxis & _YAxis & ScrollOptions;\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n@Directive({\n    selector: '[cdk-scrollable], [cdkScrollable]'\n})\nexport class CdkScrollable implements OnInit, OnDestroy {\n\n    private destroyed = new Subject();\n\n    private _elementScrolled: Observable<Event> = Observable.create((observer: Observer<Event>) =>\n        this.ngZone.runOutsideAngular(() =>\n            fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this.destroyed))\n                .subscribe(observer)));\n\n    constructor(protected elementRef: ElementRef<HTMLElement>,\n                protected scrollDispatcher: ScrollDispatcher,\n                protected ngZone: NgZone,\n                @Optional() protected dir?: Directionality\n    ) {}\n\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled(): Observable<Event> {\n        return this._elementScrolled;\n    }\n\n    /** Gets the ElementRef for the viewport. */\n    getElementRef(): ElementRef<HTMLElement> {\n        return this.elementRef;\n    }\n\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options: ExtendedScrollToOptions): void {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n\n        // Rewrite start & end offsets as right or left offsets.\n        options.left = options.left == null ? (isRtl ? options.end : options.start) : options.left;\n        options.right = options.right == null ? (isRtl ? options.start : options.end) : options.right;\n\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top = el.scrollHeight - el.clientHeight - options.bottom;\n        }\n\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n            if (options.left != null) {\n                options.right = el.scrollWidth - el.clientWidth - options.left;\n            }\n\n            if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n                options.left = options.right;\n            } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        } else {\n            if (options.right != null) {\n                options.left = el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n\n        this.applyScrollToOptions(options);\n    }\n\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        } else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n\n        if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            } else {\n                return el.scrollLeft;\n            }\n        } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            } else {\n                return -el.scrollLeft;\n            }\n        } else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            } else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n\n    private applyScrollToOptions(options: ScrollToOptions): void {\n        const el = this.elementRef.nativeElement;\n\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        } else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n\n\n}\n","import {\n    ElementRef,\n    Injectable,\n    NgZone,\n    OnDestroy\n} from '@angular/core';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { fromEvent, of as observableOf, Subject, Subscription, Observable, Observer } from 'rxjs';\nimport { auditTime, filter } from 'rxjs/operators';\n\nimport { CdkScrollable } from './scrollable';\n\n\n/** Time in ms to throttle the scrolling events by default. */\nexport const DEFAULT_SCROLL_TIME = 20;\n\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollDispatcher implements OnDestroy {\n\n    /**\n     * Map of all the scrollable references that are registered with the service and their\n     * scroll event subscriptions.\n     */\n    scrollContainers: Map<CdkScrollable, Subscription> = new Map();\n\n    /** Keeps track of the global `scroll` and `resize` subscriptions. */\n    _globalSubscription: Subscription | null = null;\n\n    /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n    private _scrolled = new Subject<CdkScrollable | void>();\n\n    /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n    private scrolledCount = 0;\n\n    constructor(private ngZone: NgZone, private platform: Platform) { }\n\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable: CdkScrollable): void {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                .subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable: CdkScrollable): void {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME): Observable<CdkScrollable | void> {\n\n        if (!this.platform.isBrowser) {\n            return observableOf<void>();\n        }\n\n        return Observable.create((observer: Observer<CdkScrollable | void>) => {\n            if (!this._globalSubscription) {\n                this.addGlobalListener();\n            }\n\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0 ?\n                this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                this._scrolled.subscribe(observer);\n\n            this.scrolledCount++;\n\n            return () => {\n                subscription.unsubscribe();\n                this.scrolledCount--;\n\n                if (!this.scrolledCount) {\n                    this.removeGlobalListener();\n                }\n            };\n        });\n    }\n\n    ngOnDestroy() {\n        this.removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementRef: ElementRef, auditTimeInMs?: number): Observable<CdkScrollable | void> {\n        const ancestors = this.getAncestorScrollContainers(elementRef);\n\n        return this.scrolled(auditTimeInMs).pipe(filter((target) => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementRef: ElementRef): CdkScrollable[] {\n        const scrollingContainers: CdkScrollable[] = [];\n\n        this.scrollContainers.forEach((_subscription: Subscription, scrollable: CdkScrollable) => {\n            if (this.scrollableContainsElement(scrollable, elementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n\n        return scrollingContainers;\n    }\n\n    /** Returns true if the element is contained within the provided Scrollable. */\n    private scrollableContainsElement(scrollable: CdkScrollable, elementRef: ElementRef): boolean {\n        let element: HTMLElement | null = elementRef.nativeElement;\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) { return true; }\n        } while (element = element!.parentElement);\n\n        return false;\n    }\n\n    /** Sets up the global scroll listeners. */\n    private addGlobalListener() {\n        this._globalSubscription = this.ngZone.runOutsideAngular(() => {\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n\n    /** Cleans up the global scroll listener. */\n    private removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\n","import { Directive, forwardRef, Input, OnChanges } from '@angular/core';\nimport { coerceNumberProperty } from '@ptsecurity/cdk/coercion';\nimport { Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\nimport { VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy } from './virtual-scroll-strategy';\nimport { CdkVirtualScrollViewport } from './virtual-scroll-viewport';\n\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nexport class FixedSizeVirtualScrollStrategy implements VirtualScrollStrategy {\n\n    private _scrolledIndexChange = new Subject<number>();\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    scrolledIndexChange: Observable<number> = this._scrolledIndexChange.pipe(distinctUntilChanged());\n\n    /** The attached viewport. */\n    private _viewport: CdkVirtualScrollViewport | null = null;\n\n    /** The size of the items in the virtually scrolling list. */\n    private _itemSize: number;\n\n    /** The minimum amount of buffer rendered beyond the viewport (in pixels). */\n    private _minBufferPx: number;\n\n    /** The number of buffer items to render beyond the edge of the viewport (in pixels). */\n    private _maxBufferPx: number;\n\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport: CdkVirtualScrollViewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n        if (maxBufferPx < minBufferPx) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() { /* no-op */\n    }\n\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() { /* no-op */\n    }\n\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index: number, behavior: ScrollBehavior): void {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n\n    /** Update the viewport's total content size. */\n    private _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n\n    /** Update the viewport's rendered range. */\n    private _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n\n        const scrollOffset = this._viewport.measureScrollOffset();\n        const firstVisibleIndex = scrollOffset / this._itemSize;\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = {start: renderedRange.start, end: renderedRange.end};\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength,\n                Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        } else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0,\n                        Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n\n\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nexport function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir: CdkFixedSizeVirtualScroll) {\n    return fixedSizeDir._scrollStrategy;\n}\n\n\n/** A virtual scroll strategy that supports fixed-size items. */\n@Directive({\n    selector: 'cdk-virtual-scroll-viewport[itemSize]',\n    providers: [{\n        provide: VIRTUAL_SCROLL_STRATEGY,\n        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n        deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n    }]\n})\nexport class CdkFixedSizeVirtualScroll implements OnChanges {\n    /** The size of the items in the list (in pixels). */\n    @Input()\n    get itemSize(): number {\n        return this._itemSize;\n    }\n\n    set itemSize(value: number) {\n        this._itemSize = coerceNumberProperty(value);\n    }\n\n    _itemSize = 20;\n\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    @Input()\n    get minBufferPx(): number {\n        return this._minBufferPx;\n    }\n\n    set minBufferPx(value: number) {\n        this._minBufferPx = coerceNumberProperty(value);\n    }\n\n    _minBufferPx = 100;\n\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    @Input()\n    get maxBufferPx(): number {\n        return this._maxBufferPx;\n    }\n\n    set maxBufferPx(value: number) {\n        this._maxBufferPx = coerceNumberProperty(value);\n    }\n\n    _maxBufferPx = 200;\n\n    /** The scroll strategy used by this directive. */\n    _scrollStrategy =\n        new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CdkVirtualScrollViewport } from './virtual-scroll-viewport';\n\n\n/** The injection token used to specify the virtual scrolling strategy. */\nexport const VIRTUAL_SCROLL_STRATEGY =\n    new InjectionToken<VirtualScrollStrategy>('VIRTUAL_SCROLL_STRATEGY');\n\n\n/** A strategy that dictates which items should be rendered in the viewport. */\nexport interface VirtualScrollStrategy {\n    /** Emits when the index of the first element visible in the viewport changes. */\n    scrolledIndexChange: Observable<number>;\n\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport: CdkVirtualScrollViewport): void;\n\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach(): void;\n\n    /** Called when the viewport is scrolled (debounced using requestAnimationFrame). */\n    onContentScrolled(): void;\n\n    /** Called when the length of the data changes. */\n    onDataLengthChanged(): void;\n\n    /** Called when the range of items rendered in the DOM has changed. */\n    onContentRendered(): void;\n\n    /** Called when the offset of the rendered items changed. */\n    onRenderedOffsetChanged(): void;\n\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index: number, behavior: ScrollBehavior): void;\n}\n"],"names":["tslib_1.__metadata","tslib_1.__decorate","observableOf","tslib_1.__param"],"mappings":";;;;;;;;;;;;;;;AQMA;AACA,AAAA,MAAa,uBAAuB,GAChC,IAAI,cAAc,CAAwB,yBAAyB,CAAC;;;ADRxE,AASA;AACA,AAAA,MAAa,8BAA8B,CAA3C;;;;;;IAuBI,WAAJ,CAAgB,QAAgB,EAAE,WAAmB,EAAE,WAAmB,EAA1E;QArBY,IAAZ,CAAA,oBAAgC,GAAG,IAAI,OAAO,EAAU,CAAC;;QAErD,IAAJ,CAAA,mBAAuB,GAAuB,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;;QAGzF,IAAZ,CAAA,SAAqB,GAAoC,IAAI,CAAC;QAiBtD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;KACnC;;;;;IAMD,MAAM,CAAC,QAAkC,EAA7C;QACQ,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC/B,IAAI,CAAC,oBAAoB,EAAE,CAAC;KAC/B;;IAGD,MAAM,GAAV;QACQ,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,CAAC;QACrC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;KACzB;;;;;;;IAQD,uBAAuB,CAAC,QAAgB,EAAE,WAAmB,EAAE,WAAmB,EAAtF;QACQ,IAAI,WAAW,GAAG,WAAW,EAAE;YAC3B,MAAM,KAAK,CAAC,8EAA8E,CAAC,CAAC;SAC/F;QACD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC/B,IAAI,CAAC,oBAAoB,EAAE,CAAC;KAC/B;;IAGD,iBAAiB,GAArB;QACQ,IAAI,CAAC,oBAAoB,EAAE,CAAC;KAC/B;;IAGD,mBAAmB,GAAvB;QACQ,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC/B,IAAI,CAAC,oBAAoB,EAAE,CAAC;KAC/B;;IAGD,iBAAiB,GAArB;KACK;;IAGD,uBAAuB,GAA3B;KACK;;;;;;IAOD,aAAa,CAAC,KAAa,EAAE,QAAwB,EAAzD;QACQ,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;SACnE;KACJ;;IAGO,uBAAuB,GAAnC;QACQ,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACjB,OAAO;SACV;QAED,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;KACvF;;IAGO,oBAAoB,GAAhC;QACQ,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACjB,OAAO;SACV;QAED,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,mBAAmB,EAAE,CAAC;QAC1D,MAAM,iBAAiB,GAAG,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC;QACxD,MAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC;QACxD,MAAM,QAAQ,GAAG,EAAC,KAAK,EAAE,aAAa,CAAC,KAAK,EAAE,GAAG,EAAE,aAAa,CAAC,GAAG,EAAC,CAAC;QACtE,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC;QACtD,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC;QAElD,MAAM,WAAW,GAAG,YAAY,GAAG,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;QACnE,IAAI,WAAW,GAAG,IAAI,CAAC,YAAY,IAAI,QAAQ,CAAC,KAAK,IAAI,CAAC,EAAE;YACxD,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,GAAG,WAAW,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC;YAClF,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,KAAK,GAAG,WAAW,CAAC,CAAC;YAC3D,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,EAC9B,IAAI,CAAC,IAAI,CAAC,iBAAiB,GAAG,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;SAC3F;aAAM;YACH,MAAM,SAAS,GAAG,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,SAAS,IAAI,YAAY,GAAG,YAAY,CAAC,CAAC;YAChF,IAAI,SAAS,GAAG,IAAI,CAAC,YAAY,IAAI,QAAQ,CAAC,GAAG,IAAI,UAAU,EAAE;gBAC7D,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,GAAG,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC9E,IAAI,SAAS,GAAG,CAAC,EAAE;oBACf,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,GAAG,GAAG,SAAS,CAAC,CAAC;oBAC9D,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EACvB,IAAI,CAAC,KAAK,CAAC,iBAAiB,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;iBAC3E;aACJ;SACJ;QAED,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;QAC1C,IAAI,CAAC,SAAS,CAAC,wBAAwB,CAAC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;QACzE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;KACjE;CACJ;;;;;;;AASD,AAAA,SAAgB,sCAAsC,CAAC,YAAuC,EAA9F;IACI,OAAO,YAAY,CAAC,eAAe,CAAC;CACvC;;AAYD,AAAA,IAAa,yBAAyB,GAAtC,2BAAA,GAAA,MAAa,yBAAyB,CAAtC;;IARA,WAAA,GAAA;QAmBI,IAAJ,CAAA,SAAa,GAAG,EAAE,CAAC;QAef,IAAJ,CAAA,YAAgB,GAAG,GAAG,CAAC;QAcnB,IAAJ,CAAA,YAAgB,GAAG,GAAG,CAAC;;QAGnB,IAAJ,CAAA,eAAmB,GACX,IAAI,8BAA8B,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;KAK7F;;IA9CG,IAAI,QAAQ,GAAhB;QACQ,OAAO,IAAI,CAAC,SAAS,CAAC;KACzB;IAED,IAAI,QAAQ,CAAC,KAAa,EAA9B;QACQ,IAAI,CAAC,SAAS,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;KAChD;;;;;IASD,IAAI,WAAW,GAAnB;QACQ,OAAO,IAAI,CAAC,YAAY,CAAC;KAC5B;IAED,IAAI,WAAW,CAAC,KAAa,EAAjC;QACQ,IAAI,CAAC,YAAY,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;KACnD;;;;IAQD,IAAI,WAAW,GAAnB;QACQ,OAAO,IAAI,CAAC,YAAY,CAAC;KAC5B;IAED,IAAI,WAAW,CAAC,KAAa,EAAjC;QACQ,IAAI,CAAC,YAAY,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;KACnD;IAQD,WAAW,GAAf;QACQ,IAAI,CAAC,eAAe,CAAC,uBAAuB,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;KACnG;CACJ,CAAA;AA9CGC,UAAJ,CAAA;IADK,KAAK,EAAE;;;CAGZ,EAAA,yBAAA,CAAA,SAAA,EAAA,UAAA,EAAA,IAAA,CAAK,CAAL;AAaIA,UAAJ,CAAA;IADK,KAAK,EAAE;;;CAGZ,EAAA,yBAAA,CAAA,SAAA,EAAA,aAAA,EAAA,IAAA,CAAK,CAAL;AAYIA,UAAJ,CAAA;IADK,KAAK,EAAE;;;CAGZ,EAAA,yBAAA,CAAA,SAAA,EAAA,aAAA,EAAA,IAAA,CAAK,CAAL;AAlCa,yBAAyB,GAAtC,2BAAA,GAAAA,UAAA,CAAA;IARC,SAAS,CAAC;QACP,QAAQ,EAAE,uCAAuC;QACjD,SAAS,EAAE,CAAC;gBACR,OAAO,EAAE,uBAAuB;gBAChC,UAAU,EAAE,sCAAsC;gBAClD,IAAI,EAAE,CAAC,UAAU,CAAC,MAAM,2BAAyB,CAAC,CAAC;aACtD,CAAC;KACL,CAAC;CACF,EAAa,yBAAyB,CAiDrC,CAjDD;;AD5JA;AACA,AAAA,MAAa,mBAAmB,GAAG,EAAE,CAAC;;;;;AAOtC,AAAA,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB,CAA7B;IAiBI,WAAJ,CAAwB,MAAc,EAAU,QAAkB,EAAlE;QAAwB,IAAxB,CAAA,MAA8B,GAAN,MAAM,CAAQ;QAAU,IAAhD,CAAA,QAAwD,GAAR,QAAQ,CAAU;;;;;QAX9D,IAAJ,CAAA,gBAAoB,GAAqC,IAAI,GAAG,EAAE,CAAC;;QAG/D,IAAJ,CAAA,mBAAuB,GAAwB,IAAI,CAAC;;QAGxC,IAAZ,CAAA,SAAqB,GAAG,IAAI,OAAO,EAAwB,CAAC;;QAGhD,IAAZ,CAAA,aAAyB,GAAG,CAAC,CAAC;KAEyC;;;;;;IAOnE,QAAQ,CAAC,UAAyB,EAAtC;QACQ,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;YACxC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,UAAU,EAAE,UAAU,CAAC,eAAe,EAAE;iBAC7D,SAAS,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;SAC1D;KACJ;;;;;IAMD,UAAU,CAAC,UAAyB,EAAxC;QACQ,MAAM,mBAAmB,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAElE,IAAI,mBAAmB,EAAE;YACrB,mBAAmB,CAAC,WAAW,EAAE,CAAC;YAClC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;SAC5C;KACJ;;;;;;;;;;;IAYD,QAAQ,CAAC,aAAb,GAAqC,mBAAmB,EAAxD;QAEQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;YAC1B,OAAOC,EAAY,EAAQ,CAAC;SAC/B;QAED,OAAO,UAAU,CAAC,MAAM,CAAC,CAAC,QAAwC,KAA1E;YACY,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAC3B,IAAI,CAAC,iBAAiB,EAAE,CAAC;aAC5B;;;YAID,MAAM,YAAY,GAAG,aAAa,GAAG,CAAC;gBAClC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC;gBACjE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAEvC,IAAI,CAAC,aAAa,EAAE,CAAC;YAErB,OAAO,MAAnB;gBACgB,YAAY,CAAC,WAAW,EAAE,CAAC;gBAC3B,IAAI,CAAC,aAAa,EAAE,CAAC;gBAErB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;oBACrB,IAAI,CAAC,oBAAoB,EAAE,CAAC;iBAC/B;aACJ,CAAC;SACL,CAAC,CAAC;KACN;IAED,WAAW,GAAf;QACQ,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,SAAS,KAAK,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;QAC5E,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;KAC7B;;;;;;;IAQD,gBAAgB,CAAC,UAAsB,EAAE,aAAsB,EAAnE;QACQ,MAAM,SAAS,GAAG,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,CAAC;QAE/D,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,KAA/D;YACY,OAAO,CAAC,MAAM,IAAI,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;SACpD,CAAC,CAAC,CAAC;KACP;;IAGD,2BAA2B,CAAC,UAAsB,EAAtD;QACQ,MAAM,mBAAmB,GAAoB,EAAE,CAAC;QAEhD,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,aAA2B,EAAE,UAAyB,KAA7F;YACY,IAAI,IAAI,CAAC,yBAAyB,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE;gBACxD,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aACxC;SACJ,CAAC,CAAC;QAEH,OAAO,mBAAmB,CAAC;KAC9B;;IAGO,yBAAyB,CAAC,UAAyB,EAAE,UAAsB,EAAvF;QACQ,IAAI,OAAO,GAAuB,UAAU,CAAC,aAAa,CAAC;QAC3D,IAAI,iBAAiB,GAAG,UAAU,CAAC,aAAa,EAAE,CAAC,aAAa,CAAC;;;QAIjE,GAAG;YACC,IAAI,OAAO,IAAI,iBAAiB,EAAE;gBAAE,OAAO,IAAI,CAAC;aAAE;SACrD,QAAQ,OAAO,GAAG,OAAQ,CAAC,aAAa,EAAE;QAE3C,OAAO,KAAK,CAAC;KAChB;;IAGO,iBAAiB,GAA7B;QACQ,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAjE;YACY,OAAO,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;SACtF,CAAC,CAAC;KACN;;IAGO,oBAAoB,GAAhC;QACQ,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC1B,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;YACvC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;SACnC;KACJ;CACJ,CAAA;;AAjJY,gBAAgB,GAA7BD,UAAA,CAAA;IADC,UAAU,CAAC,EAAC,UAAU,EAAE,MAAM,EAAC,CAAC;IAkBjCD,UAAA,CAAA,mBAAA,EAAA,CAAgC,MAAM,EAAoB,QAAQ,CAAlE,CAAA;CAjBA,EAAa,gBAAgB,CAiJ5B,CAjJD;;ADSA;;;;;AAQA,AAAA,IAAa,aAAa,GAA1B,MAAa,aAAa,CAA1B;IASI,WAAJ,CAA0B,UAAmC,EACnC,gBAAkC,EAClC,MAAc,EACF,GAAoB,EAH1D;QAA0B,IAA1B,CAAA,UAAoC,GAAV,UAAU,CAAyB;QACnC,IAA1B,CAAA,gBAA0C,GAAhB,gBAAgB,CAAkB;QAClC,IAA1B,CAAA,MAAgC,GAAN,MAAM,CAAQ;QACF,IAAtC,CAAA,GAAyC,GAAH,GAAG,CAAiB;QAV9C,IAAZ,CAAA,SAAqB,GAAG,IAAI,OAAO,EAAE,CAAC;QAE1B,IAAZ,CAAA,gBAA4B,GAAsB,UAAU,CAAC,MAAM,CAAC,CAAC,QAAyB,KACtF,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAC1B,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC7E,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;KAM/B;IAEJ,QAAQ,GAAZ;QACQ,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KACxC;IAED,WAAW,GAAf;QACQ,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;KAC7B;;IAGD,eAAe,GAAnB;QACQ,OAAO,IAAI,CAAC,gBAAgB,CAAC;KAChC;;IAGD,aAAa,GAAjB;QACQ,OAAO,IAAI,CAAC,UAAU,CAAC;KAC1B;;;;;;;;;IAUD,QAAQ,CAAC,OAAgC,EAA7C;QACQ,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;QACzC,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC;;QAGlD,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,IAAI,IAAI,KAAK,GAAG,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,IAAI,CAAC;QAC3F,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,IAAI,IAAI,KAAK,GAAG,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,KAAK,CAAC;;QAG9F,IAAI,OAAO,CAAC,MAAM,IAAI,IAAI,EAAE;YACxB,OAAO,CAAC,GAAG,GAAG,EAAE,CAAC,YAAY,GAAG,EAAE,CAAC,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC;SACpE;;QAGD,IAAI,KAAK,IAAI,oBAAoB,EAAE,IAAI,iBAAiB,CAAC,MAAM,EAAE;YAC7D,IAAI,OAAO,CAAC,IAAI,IAAI,IAAI,EAAE;gBACtB,OAAO,CAAC,KAAK,GAAG,EAAE,CAAC,WAAW,GAAG,EAAE,CAAC,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC;aAClE;YAED,IAAI,oBAAoB,EAAE,IAAI,iBAAiB,CAAC,QAAQ,EAAE;gBACtD,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC;aAChC;iBAAM,IAAI,oBAAoB,EAAE,IAAI,iBAAiB,CAAC,OAAO,EAAE;gBAC5D,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,KAAK,GAAG,CAAC,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;aACjE;SACJ;aAAM;YACH,IAAI,OAAO,CAAC,KAAK,IAAI,IAAI,EAAE;gBACvB,OAAO,CAAC,IAAI,GAAG,EAAE,CAAC,WAAW,GAAG,EAAE,CAAC,WAAW,GAAG,OAAO,CAAC,KAAK,CAAC;aAClE;SACJ;QAED,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;KACtC;;;;;;;;;;IAWD,mBAAmB,CAAC,IAA2D,EAAnF;QACQ,MAAM,IAAI,GAAG,MAAM,CAAC;QACpB,MAAM,KAAK,GAAG,OAAO,CAAC;QACtB,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;QACzC,IAAI,IAAI,IAAI,KAAK,EAAE;YACf,OAAO,EAAE,CAAC,SAAS,CAAC;SACvB;QACD,IAAI,IAAI,IAAI,QAAQ,EAAE;YAClB,OAAO,EAAE,CAAC,YAAY,GAAG,EAAE,CAAC,YAAY,GAAG,EAAE,CAAC,SAAS,CAAC;SAC3D;;QAGD,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC;QAClD,IAAI,IAAI,IAAI,OAAO,EAAE;YACjB,IAAI,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC;SAC/B;aAAM,IAAI,IAAI,IAAI,KAAK,EAAE;YACtB,IAAI,GAAG,KAAK,GAAG,IAAI,GAAG,KAAK,CAAC;SAC/B;QAED,IAAI,KAAK,IAAI,oBAAoB,EAAE,IAAI,iBAAiB,CAAC,QAAQ,EAAE;;;YAG/D,IAAI,IAAI,IAAI,IAAI,EAAE;gBACd,OAAO,EAAE,CAAC,WAAW,GAAG,EAAE,CAAC,WAAW,GAAG,EAAE,CAAC,UAAU,CAAC;aAC1D;iBAAM;gBACH,OAAO,EAAE,CAAC,UAAU,CAAC;aACxB;SACJ;aAAM,IAAI,KAAK,IAAI,oBAAoB,EAAE,IAAI,iBAAiB,CAAC,OAAO,EAAE;;;YAGrE,IAAI,IAAI,IAAI,IAAI,EAAE;gBACd,OAAO,EAAE,CAAC,UAAU,GAAG,EAAE,CAAC,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC;aAC1D;iBAAM;gBACH,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC;aACzB;SACJ;aAAM;;;YAGH,IAAI,IAAI,IAAI,IAAI,EAAE;gBACd,OAAO,EAAE,CAAC,UAAU,CAAC;aACxB;iBAAM;gBACH,OAAO,EAAE,CAAC,WAAW,GAAG,EAAE,CAAC,WAAW,GAAG,EAAE,CAAC,UAAU,CAAC;aAC1D;SACJ;KACJ;IAEO,oBAAoB,CAAC,OAAwB,EAAzD;QACQ,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;QAEzC,IAAI,sBAAsB,EAAE,EAAE;YAC1B,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;SACxB;aAAM;YACH,IAAI,OAAO,CAAC,GAAG,IAAI,IAAI,EAAE;gBACrB,EAAE,CAAC,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC;aAC9B;YACD,IAAI,OAAO,CAAC,IAAI,IAAI,IAAI,EAAE;gBACtB,EAAE,CAAC,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC;aAChC;SACJ;KACJ;CAGJ,CAAA;AAnJY,aAAa,GAA1BC,UAAA,CAAA;IAHC,SAAS,CAAC;QACP,QAAQ,EAAE,mCAAmC;KAChD,CAAC;IAaeE,OAAjB,CAAA,CAAA,EAAiB,QAAQ,EAAE,CAAA;IAH3BH,UAAA,CAAA,mBAAA,EAAA,CAAsC,UAAU;QACJ,gBAAgB;QAC1B,MAAM;QACI,cAAc,CAA1D,CAAA;CAZA,EAAa,aAAa,CAmJzB,CAnJD;;;ADtCA,AA0BA;AACA,SAAS,WAAW,CAAC,EAAa,EAAE,EAAa,EAAjD;IACI,OAAO,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,GAAG,CAAC;CACnD;;AAoBD,AAAA,IAAa,wBAAwB,GAArC,0BAAA,GAAA,MAAa,wBAAyB,SAAQ,aAAa,CAA3D;IAuEI,WAAJ,CAAuB,UAAmC,EAClC,kBAAqC,EAC7C,MAAc,EAEN,eAAsC,EAClC,GAAmB,EAC/B,gBAAkC,EANlD;QAOQ,KAAK,CAAC,UAAU,EAAE,gBAAgB,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;QAPlC,IAAvB,CAAA,UAAiC,GAAV,UAAU,CAAyB;QAClC,IAAxB,CAAA,kBAA0C,GAAlB,kBAAkB,CAAmB;QAGrC,IAAxB,CAAA,eAAuC,GAAf,eAAe,CAAuB;;QAxEjD,IAAb,CAAA,WAAwB,GAA8B,UAAU,CAAC;;;;;;QAOnD,IAAd,CAAA,mBAAiC,GACzB,UAAU,CAAC,MAAM,CAAC,CAAC,QAA0B,KACzC,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC,KAAK,KACrD,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;QAMhF,IAAZ,CAAA,gBAA4B,GAAG,IAAI,OAAO,EAAQ,CAAC;;QAGvC,IAAZ,CAAA,qBAAiC,GAAG,IAAI,OAAO,EAAa,CAAC;;QAGzD,IAAJ,CAAA,mBAAuB,GAA0B,IAAI,CAAC,qBAAqB,CAAC,YAAY,EAAE,CAAC;;;;;QAMvF,IAAJ,CAAA,0BAA8B,GAAG,EAAE,CAAC;;;;QAKxB,IAAZ,CAAA,iBAA6B,GAAG,CAAC,CAAC;;QAStB,IAAZ,CAAA,cAA0B,GAAc,EAAC,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAC,CAAC;;QAG/C,IAAZ,CAAA,WAAuB,GAAG,CAAC,CAAC;;QAGhB,IAAZ,CAAA,aAAyB,GAAG,CAAC,CAAC;;QAMlB,IAAZ,CAAA,sBAAkC,GAAG,CAAC,CAAC;;;;;QAM3B,IAAZ,CAAA,kCAA8C,GAAG,KAAK,CAAC;;QAG3C,IAAZ,CAAA,yBAAqC,GAAG,KAAK,CAAC;;QAGlC,IAAZ,CAAA,wBAAoC,GAAe,EAAE,CAAC;QAW9C,IAAI,CAAC,eAAe,EAAE;YAClB,MAAM,KAAK,CAAC,gFAAgF,CAAC,CAAC;SACjG;KACJ;IAED,QAAQ,GAAZ;QACQ,KAAK,CAAC,QAAQ,EAAE,CAAC;;;;;QAMjB,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,MAAnE;YACY,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC5B,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAElC,IAAI,CAAC,eAAe,EAAE;iBACjB,IAAI;;YAED,SAAS,CAAe,IAAK,CAAC;;;;YAI9B,SAAS,CAAC,CAAC,EAAE,uBAAuB,CAAC,CAAC;iBACzC,SAAS,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,CAAC,CAAC;YAE/D,IAAI,CAAC,0BAA0B,EAAE,CAAC;SACrC,CAAC,CAAC,CAAC;KACP;IAED,WAAW,GAAf;QACQ,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;;QAG9B,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,CAAC;QACtC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;QAEjC,KAAK,CAAC,WAAW,EAAE,CAAC;KACvB;;IAGD,MAAM,CAAC,KAA2B,EAAtC;QACQ,IAAI,IAAI,CAAC,MAAM,EAAE;YACb,MAAM,KAAK,CAAC,+CAA+C,CAAC,CAAC;SAChE;;;;QAKD,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAtC;YACY,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,KAAzF;gBACgB,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC9B,IAAI,SAAS,KAAK,IAAI,CAAC,WAAW,EAAE;oBAChC,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;oBAC7B,IAAI,CAAC,eAAe,CAAC,mBAAmB,EAAE,CAAC;iBAC9C;gBACD,IAAI,CAAC,kBAAkB,EAAE,CAAC;aAC7B,CAAC,CAAC;SACN,CAAC,CAAC;KACN;;IAGD,MAAM,GAAV;QACQ,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;KAChC;;IAGD,aAAa,GAAjB;QACQ,OAAO,IAAI,CAAC,WAAW,CAAC;KAC3B;;IAGD,eAAe,GAAnB;QACQ,OAAO,IAAI,CAAC,aAAa,CAAC;KAC7B;;;;;;IAQD,gBAAgB,GAApB;QACQ,OAAO,IAAI,CAAC,cAAc,CAAC;KAC9B;;;;;IAMD,mBAAmB,CAAC,IAAY,EAApC;QACQ,IAAI,IAAI,CAAC,iBAAiB,KAAK,IAAI,EAAE;YACjC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;YAC9B,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,IAAI,YAAY,GAAG,GAAG,GAAG,GAAG,CAAC;YAC1D,IAAI,CAAC,0BAA0B,GAAG,CAA9C,KAAA,EAAsD,IAAI,CAA1D,CAAA,EAA8D,IAAI,CAAC,iBAAiB,CAApF,CAAA,CAAuF,CAAC;YAC5E,IAAI,CAAC,0BAA0B,EAAE,CAAC;SACrC;KACJ;;IAGD,gBAAgB,CAAC,KAAgB,EAArC;QACQ,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,CAAC,EAAE;YAC1C,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC,CAAC;YAC7D,IAAI,CAAC,0BAA0B,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,CAAC,CAAC;SACnF;KACJ;;;;IAKD,+BAA+B,GAAnC;QACQ,OAAO,IAAI,CAAC,kCAAkC,GAAG,IAAI,GAAG,IAAI,CAAC,sBAAsB,CAAC;KACvF;;;;;IAMD,wBAAwB,CAAC,MAAc,EAAE,EAA7C,GAAyE,UAAU,EAAnF;;;QAGQ,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC;QAClD,MAAM,YAAY,GAAG,IAAI,CAAC,WAAW,IAAI,YAAY,CAAC;QACtD,MAAM,IAAI,GAAG,YAAY,GAAG,GAAG,GAAG,GAAG,CAAC;QACtC,MAAM,aAAa,GAAG,YAAY,IAAI,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QACrD,IAAI,SAAS,GAAG,CAAxB,SAAA,EAAoC,IAAI,CAAxC,CAAA,EAA4C,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,CAA1E,GAAA,CAA+E,CAAC;QACxE,IAAI,CAAC,sBAAsB,GAAG,MAAM,CAAC;QACrC,IAAI,EAAE,KAAK,QAAQ,EAAE;YACjB,SAAS,IAAI,CAAzB,UAAA,EAAsC,IAAI,CAA1C,OAAA,CAAmD,CAAC;;;;YAIxC,IAAI,CAAC,kCAAkC,GAAG,IAAI,CAAC;SAClD;QACD,IAAI,IAAI,CAAC,yBAAyB,IAAI,SAAS,EAAE;;;YAG7C,IAAI,CAAC,yBAAyB,GAAG,SAAS,CAAC;YAC3C,IAAI,CAAC,0BAA0B,CAAC,MAA5C;gBACgB,IAAI,IAAI,CAAC,kCAAkC,EAAE;oBACzC,IAAI,CAAC,sBAAsB,IAAI,IAAI,CAAC,0BAA0B,EAAE,CAAC;oBACjE,IAAI,CAAC,kCAAkC,GAAG,KAAK,CAAC;oBAChD,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;iBAC9D;qBAAM;oBACH,IAAI,CAAC,eAAe,CAAC,uBAAuB,EAAE,CAAC;iBAClD;aACJ,CAAC,CAAC;SACN;KACJ;;;;;;;;IASD,cAAc,CAAC,MAAc,EAAE,QAAnC,GAA8D,MAAM,EAApE;QACQ,MAAM,OAAO,GAA4B,EAAC,QAAQ,EAAC,CAAC;QACpD,IAAI,IAAI,CAAC,WAAW,KAAK,YAAY,EAAE;YACnC,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC;SAC1B;aAAM;YACH,OAAO,CAAC,GAAG,GAAG,MAAM,CAAC;SACxB;QACD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;KAC1B;;;;;;IAOD,aAAa,CAAC,KAAa,EAAE,QAAjC,GAA4D,MAAM,EAAlE;QACQ,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;KACvD;;;;;;IAOD,mBAAmB,CAAC,IAA4D,EAApF;QACQ,OAAO,KAAK,CAAC,mBAAmB,CAC5B,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,WAAW,KAAK,YAAY,GAAG,OAAO,GAAG,KAAK,CAAC,CAAC;KAC1E;;IAGD,0BAA0B,GAA9B;QACQ,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC;QAErD,OAAO,IAAI,CAAC,WAAW,KAAK,YAAY,GAAG,SAAS,CAAC,WAAW,GAAG,SAAS,CAAC,YAAY,CAAC;KAC7F;;;;;IAMD,gBAAgB,CAAC,KAAgB,EAArC;QACQ,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACd,OAAO,CAAC,CAAC;SACZ;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;KAChE;;IAGD,iBAAiB,GAArB;;QAEQ,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,IAAI,CAAC,eAAe,CAAC,mBAAmB,EAAE,CAAC;KAC9C;;IAGO,oBAAoB,GAAhC;QACQ,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;QACjD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW,KAAK,YAAY;YAClD,UAAU,CAAC,WAAW,GAAG,UAAU,CAAC,YAAY,CAAC;KACxD;;IAGO,0BAA0B,CAAC,QAAmB,EAA1D;QACQ,IAAI,QAAQ,EAAE;YACV,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAChD;;;QAID,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE;YACjC,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;YACtC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,MAAvE;gBACgB,IAAI,CAAC,kBAAkB,EAAE,CAAC;aAC7B,CAAC,CAAC,CAAC;SACP;KACJ;;IAGO,kBAAkB,GAA9B;QACQ,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;;;;QAKvC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC,CAAC;;;;;QAK9D,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,yBAAyB,CAAC;QAEpF,MAAM,uBAAuB,GAAG,IAAI,CAAC,wBAAwB,CAAC;QAC9D,IAAI,CAAC,wBAAwB,GAAG,EAAE,CAAC;QACnC,KAAK,MAAM,EAAE,IAAI,uBAAuB,EAAE;YACtC,EAAE,EAAE,CAAC;SACR;KACJ;CACJ,CAAA;AA/UYC,UAAb,CAAA;IAAK,KAAK,EAAE;;CAAZ,EAAA,wBAAA,CAAA,SAAA,EAAA,aAAA,EAAA,KAAA,CAAA,CAAiE,CAAjE;AAOcA,UAAd,CAAA;IAAK,MAAM,EAAE;IAAbD,UAAA,CAAA,aAAA,EAAmC,UAAU,CAA7C;CAGA,EAAA,wBAAA,CAAA,SAAA,EAAA,qBAAA,EAAA,KAAA,CAAA,CAA4F,CAA5F;AAGiCC,UAAjC,CAAA;IAAK,SAAS,CAAC,gBAAgB,CAAC;IAAhCD,UAAA,CAAA,aAAA,EAAkD,UAAU,CAA5D;CAAA,EAAA,wBAAA,CAAA,SAAA,EAAA,iBAAA,EAAA,KAAA,CAAA,CAA0E,CAA1E;AAhBa,wBAAwB,GAArC,0BAAA,GAAAC,UAAA,CAAA;IAhBC,SAAS,CAAC;QACP,QAAQ,EAAE,6BAA6B;QACvC,QAAJ,EAAA,mMAAA;QACI,MAAJ,EAAA,CAAa,qsDAAb,CAAA;QACI,IAAI,EAAE;YACF,KAAK,EAAE,6BAA6B;YACpC,mDAAmD,EAAE,8BAA8B;YACnF,iDAAiD,EAAE,8BAA8B;SACpF;QACD,aAAa,EAAE,iBAAiB,CAAC,IAAI;QACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM;QAC/C,SAAS,EAAE,CAAC;gBACR,OAAO,EAAE,aAAa;gBACtB,WAAW,EAAE,0BAAwB;aACxC,CAAC;KACL,CAAC;IA2EeE,OAAjB,CAAA,CAAA,EAAiB,QAAQ,EAAE,CAAA,EAAEA,OAA7B,CAAA,CAAA,EAA6B,MAAM,CAAC,uBAAuB,CAAC,CAAA;IAE3CA,OAAjB,CAAA,CAAA,EAAiB,QAAQ,EAAE,CAAA;IAL3BH,UAAA,CAAA,mBAAA,EAAA,CAAmC,UAAU;QACD,iBAAiB;QACrC,MAAM,EAA9B,MAAA,EAGiC,cAAc;QACb,gBAAgB,CAAlD,CAAA;CA7EA,EAAa,wBAAwB,CAkVpC,CAlVD;;ADJA;AACA,SAAS,OAAO,CAAC,WAAsC,EAAE,IAAU,EAAnE;IACI,MAAM,EAAE,GAAG,IAAe,CAAC;IAE3B,IAAI,CAAC,EAAE,CAAC,qBAAqB,EAAE;QAC3B,OAAO,CAAC,CAAC;KACZ;IACD,MAAM,IAAI,GAAG,EAAE,CAAC,qBAAqB,EAAE,CAAC;IAExC,OAAO,WAAW,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;CACjE;;;;;AAUD,AAAA,IAAa,eAAe,GAA5B,MAAa,eAAe,CAA5B;IA+FI,WAAJ;;IAEgB,iBAAmC;;IAEnC,SAAiD;;IAEjD,QAAyB;;IAEb,SAAmC,EACvD,MAAc,EADtB;QANgB,IAAhB,CAAA,iBAAiC,GAAjB,iBAAiB,CAAkB;QAEnC,IAAhB,CAAA,SAAyB,GAAT,SAAS,CAAwC;QAEjD,IAAhB,CAAA,QAAwB,GAAR,QAAQ,CAAiB;QAEb,IAA5B,CAAA,SAAqC,GAAT,SAAS,CAA0B;;QA5D3D,IAAJ,CAAA,UAAc,GAAG,IAAI,OAAO,EAAa,CAAC;;;;;QAO7B,IAAb,CAAA,8BAA2C,GAAW,EAAE,CAAC;;QAG7C,IAAZ,CAAA,kBAA8B,GAAG,IAAI,OAAO,EAAiB,CAAC;;QAG1D,IAAJ,CAAA,UAAc,GAAuC,IAAI,CAAC,kBAAkB;aACnE,IAAI;;QAED,SAAS,CAAgB,IAAK,CAAC;;QAE/B,QAAQ,EAAE;;;;QAIV,SAAS,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,KAAK,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;;QAE7D,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;;QAKhB,IAAZ,CAAA,OAAmB,GAA6B,IAAI,CAAC;;;;;;QAgBzC,IAAZ,CAAA,cAA0B,GAAiD,EAAE,CAAC;;QAGlE,IAAZ,CAAA,YAAwB,GAAG,KAAK,CAAC;QAErB,IAAZ,CAAA,UAAsB,GAAG,IAAI,OAAO,EAAQ,CAAC;QAYrC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,IAAI,KAAvC;YACY,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,IAAI,CAAC,qBAAqB,EAAE,CAAC;SAChC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,KAAK,KAA5F;YACY,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;YAC5B,MAAM,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YAC5D,IAAI,CAAC,qBAAqB,EAAE,CAAC;SAChC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KAC/B;;IA/GD,IAAI,eAAe,GAAvB;QACQ,OAAO,IAAI,CAAC,gBAAgB,CAAC;KAChC;IAED,IAAI,eAAe,CAAC,KAAsD,EAA9E;QACQ,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,MAAM,EAAE,GAAG,KAAK,YAAY,UAAU,GAAG,KAAK;;YAE1C,IAAI,eAAe,CACf,KAAK,YAAY,UAAU,GAAG,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,CAAC;QACvF,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KACpC;;;;;IAOD,IAAI,oBAAoB,GAA5B;QACQ,OAAO,IAAI,CAAC,qBAAqB,CAAC;KACrC;IAED,IAAI,oBAAoB,CAAC,EAAkC,EAA/D;QACQ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,qBAAqB,GAAG,EAAE;YAC3B,CAAC,KAAK,EAAE,IAAI,KAAK,EAAE,CAAC,KAAK,IAAI,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC;YACxF,SAAS,CAAC;KACjB;;IAID,IAAI,qBAAqB,CAAC,KAA6C,EAA3E;QACQ,IAAI,KAAK,EAAE;YACP,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;SAC1B;KACJ;;;;;;IAkFD,gBAAgB,CAAC,KAAgB,EAAE,WAAsC,EAA7E;QACQ,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,GAAG,EAAE;YAC1B,OAAO,CAAC,CAAC;SACZ;QACD,IAAI,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,IAAI,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE;YAChF,MAAM,KAAK,CAAC,CAAxB,wDAAA,CAAkF,CAAC,CAAC;SAC3E;;QAGD,MAAM,kBAAkB,GAAG,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;;QAEnE,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC;;QAGzC,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,CAAC,GAAG,QAAQ,CAAC;QACjB,OAAO,CAAC,EAAE,EAAE;YACR,MAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,GAAG,kBAAkB,CACT,CAAC;YACtD,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;YACzC,OAAO,CAAC,EAAE,EAAE;gBACR,SAAS,IAAI,OAAO,CAAC,WAAW,EAAE,IAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;aACzD;SACJ;QAED,OAAO,SAAS,CAAC;KACpB;IAED,SAAS,GAAb;QACQ,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,YAAY,EAAE;;;;YAInC,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACvD,IAAI,CAAC,OAAO,EAAE;gBACV,IAAI,CAAC,cAAc,EAAE,CAAC;aACzB;iBAAM;gBACH,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;aAC/B;YACD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;SAC7B;KACJ;IAED,WAAW,GAAf;QACQ,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;QAExB,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC;QACnC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;QAE3B,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACvB,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;QAE3B,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,cAAc,EAAE;YACpC,IAAI,CAAC,OAAO,EAAE,CAAC;SAClB;KACJ;;IAGO,qBAAqB,GAAjC;QACQ,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACtB,OAAO;SACV;QACD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC3F,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACf,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;SAC5F;QACD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;KAC5B;;IAGO,iBAAiB,CAAC,KAA2B,EAAE,KAAoB,EAA/E;QAGQ,IAAI,KAAK,EAAE;YACP,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;SAC1B;QAED,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QAEzB,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KAC9B;;IAGO,cAAc,GAA1B;QACQ,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAChC,IAAI,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC;QACtC,OAAO,CAAC,EAAE,EAAE;YACR,MAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAA+C,CAAC;YACzF,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,GAAG,CAAC,CAAC;YACnD,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;YAC3B,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACpD,IAAI,CAAC,aAAa,EAAE,CAAC;SACxB;KACJ;;IAGO,aAAa,CAAC,OAA2B,EAArD;;QAEQ,OAAO,CAAC,gBAAgB,CAAC,CAAC,MAA+B,EAC/B,qBAAoC,EACpC,YAA2B,KAF7D;YAGY,IAAI,MAAM,CAAC,aAAa,IAAI,IAAI,EAAE;gBAC9B,MAAM,IAAI,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBACvC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,EAAE,YAAa,CAAC,CAAC;gBACnD,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC;aACxC;iBAAM,IAAI,YAAY,IAAI,IAAI,EAAE;gBAC7B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,qBAAsB,CACtB,CAAC,CAAC;aACnD;iBAAM;gBACH,MAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,qBAAsB,CAChB,CAAC;gBAC/C,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;gBAChD,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC;aACxC;SACJ,CAAC,CAAC;;QAGH,OAAO,CAAC,qBAAqB,CAAC,CAAC,MAA+B,KAAtE;YACY,MAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,YAAa,CACd,CAAC;YAC/C,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC;SACxC,CAAC,CAAC;;QAGH,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAChC,IAAI,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC;QACtC,OAAO,CAAC,EAAE,EAAE;YACR,MAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAA+C,CAAC;YACzF,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,GAAG,CAAC,CAAC;YACnD,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;YAC3B,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACvD;KACJ;;IAGO,UAAU,CAAC,IAAgD,EAAvE;QACQ,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,IAAI,CAAC,8BAA8B,EAAE;YAClE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAClC;aAAM;YACH,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;;;YAKnD,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;gBACd,IAAI,CAAC,OAAO,EAAE,CAAC;aAClB;iBAAM;gBACH,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aACxC;SACJ;KACJ;;IAGO,kBAAkB,GAA9B;QACQ,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE;YAC1F,SAAS,EAAE,IAAK;YAChB,eAAe,EAAE,IAAI,CAAC,gBAAgB;YACtC,KAAK,EAAE,CAAC,CAAC;YACT,KAAK,EAAE,CAAC,CAAC;YACT,KAAK,EAAE,KAAK;YACZ,IAAI,EAAE,KAAK;YACX,GAAG,EAAE,KAAK;YACV,IAAI,EAAE,KAAK;SACd,CAAC,CAAC;KACN;;IAGO,gCAAgC,CAAC,OAAoC,EAAjF;QACQ,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,KAAK,CAAC,CAAC;QACpC,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,KAAK,KAAK,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC;QACnD,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC;QACvC,OAAO,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC;KAC/B;CACJ,CAAA;AAnSGC,UAAJ,CAAA;IADK,KAAK,EAAE;;;CAGZ,EAAA,eAAA,CAAA,SAAA,EAAA,iBAAA,EAAA,IAAA,CAAK,CAAL;AAgBIA,UAAJ,CAAA;IADK,KAAK,EAAE;;;CAGZ,EAAA,eAAA,CAAA,SAAA,EAAA,sBAAA,EAAA,IAAA,CAAK,CAAL;AAWIA,UAAJ,CAAA;IADK,KAAK,EAAE;IACZD,UAAA,CAAA,aAAA,EAAqC,WAAW,CAAhD;IAAAA,UAAA,CAAA,mBAAA,EAAA,CAAqC,WAAW,CAAhD,CAAA;CAKA,EAAA,eAAA,CAAA,SAAA,EAAA,uBAAA,EAAA,IAAA,CAAK,CAAL;AAUaC,UAAb,CAAA;IAAK,KAAK,EAAE;;CAAZ,EAAA,eAAA,CAAA,SAAA,EAAA,gCAAA,EAAA,KAAA,CAAA,CAAyD,CAAzD;AAlDa,eAAe,GAA5BA,UAAA,CAAA;IAHC,SAAS,CAAC;QACP,QAAQ,EAAE,kCAAkC;KAC/C,CAAC;IAwGOE,OAAT,CAAA,CAAA,EAAS,QAAQ,EAAE,CAAA;IANnBH,UAAA,CAAA,mBAAA,EAAA,CAAmC,gBAAgB;QAExB,WAAW;QAEZ,eAAe;QAEF,wBAAwB;QAC/C,MAAM,CAAtB,CAAA;CAxGA,EAAa,eAAe,CAuS3B,CAvSD;;ADvCA,IAAa,eAAe,GAA5B,MAAa,eAAe,CAA5B;CAA+B,CAAA;AAAlB,eAAe,GAA5BC,UAAA,CAAA;IAhBC,QAAQ,CAAC;QACN,OAAO,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC;QACrC,OAAO,EAAE;YACL,UAAU;YACV,yBAAyB;YACzB,aAAa;YACb,eAAe;YACf,wBAAwB;SAC3B;QACD,YAAY,EAAE;YACV,yBAAyB;YACzB,aAAa;YACb,eAAe;YACf,wBAAwB;SAC3B;KACJ,CAAC;CACF,EAAa,eAAe,CAAG,CAA/B;AAAA,AAGA;;;;AAQA,AAAA,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB,CAAjC;CAAoC,CAAA;AAAvB,oBAAoB,GAAjCA,UAAA,CAAA;IAJC,QAAQ,CAAC;QACN,OAAO,EAAE,CAAC,eAAe,CAAC;QAC1B,OAAO,EAAE,CAAC,eAAe,CAAC;KAC7B,CAAC;CACF,EAAa,oBAAoB,CAAG,CAApC;;AD/BA;AACA,AAAA,MAAa,mBAAmB,GAAG,EAAE,CAAC;;;;;AAYtC,AAAA,IAAa,aAAa,GAA1B,MAAa,aAAa,CAA1B;IAUI,WAAJ,CAAwB,SAAmB,EAAE,MAAc,EAA3D;QAAwB,IAAxB,CAAA,SAAiC,GAAT,SAAS,CAAU;QACnC,MAAM,CAAC,iBAAiB,CAAC,MAAjC;YACY,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,SAAS;gBAC9B,KAAK,CAAQ,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAE,SAAS,CAAC,MAAM,EAAE,mBAAmB,CAAC,CAAC;gBACjFC,EAAY,EAAE,CAAC;;;YAInB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;SACrF,CAAC,CAAC;KACN;IAED,WAAW,GAAf;QACQ,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC;KACvC;;IAGD,eAAe,GAAnB;QACQ,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACrB,IAAI,CAAC,mBAAmB,EAAE,CAAC;SAC9B;QAED,MAAM,MAAM,GAAG,EAAC,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,MAAM,EAAC,CAAC;;QAGpF,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE;YAC3B,IAAI,CAAC,aAAa,GAAG,IAAK,CAAC;SAC9B;QAED,OAAO,MAAM,CAAC;KACjB;;IAGD,eAAe,GAAnB;;;;;;;;;;QAUQ,MAAM,cAAc,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;QACxD,MAAM,EAAC,KAAK,EAAE,MAAM,EAAC,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAE/C,OAAO;YACH,GAAG,EAAE,cAAc,CAAC,GAAG;YACvB,IAAI,EAAE,cAAc,CAAC,IAAI;YACzB,MAAM,EAAE,cAAc,CAAC,GAAG,GAAG,MAAM;YACnC,KAAK,EAAE,cAAc,CAAC,IAAI,GAAG,KAAK;YAClC,MAAM;YACN,KAAK;SACR,CAAC;KACL;;IAGD,yBAAyB,GAA7B;;;QAGQ,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE;YAC3B,OAAO,EAAC,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAC,CAAC;SAC5B;;;;;;;QAQD,MAAM,eAAe,GAAG,QAAQ,CAAC,eAAgB,CAAC;QAClD,MAAM,YAAY,GAAG,eAAe,CAAC,qBAAqB,EAAE,CAAC;QAE7D,MAAM,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,SAAS,IAAI,MAAM,CAAC,OAAO;YACtE,QAAQ,CAAC,eAAgB,CAAC,SAAS,IAAI,CAAC,CAAC;QAE7C,MAAM,IAAI,GAAG,CAAC,YAAY,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,UAAU,IAAI,MAAM,CAAC,OAAO;YACzE,QAAQ,CAAC,eAAgB,CAAC,UAAU,IAAI,CAAC,CAAC;QAE9C,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;KACxB;;;;;IAMD,MAAM,CAAC,YAAX,GAAkC,mBAAmB,EAArD;QACQ,OAAO,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;KACvF;;IAGO,mBAAmB,GAA/B;QACQ,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS;YACzC,EAAC,KAAK,EAAE,MAAM,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,WAAW,EAAC;YACtD,EAAC,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAC,CAAC;KAC7B;CACJ,CAAA;;AA1GY,aAAa,GAA1BD,UAAA,CAAA;IADC,UAAU,CAAC,EAAC,UAAU,EAAE,MAAM,EAAC,CAAC;IAWjCD,UAAA,CAAA,mBAAA,EAAA,CAAmC,QAAQ,EAAU,MAAM,CAA3D,CAAA;CAVA,EAAa,aAAa,CA0GzB,CA1GD;AAAA,AA6GA;;;AAGA,AAAA,SAAgB,+BAA+B,CAAC,WAA0B,EAC1B,QAAkB,EAClB,MAAc,EAF9D;IAGI,OAAO,WAAW,IAAI,IAAI,aAAa,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;CAC7D;;AAGD,AAAA,MAAa,uBAAuB,GAAG;;IAEnC,OAAO,EAAE,aAAa;IACtB,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,aAAa,CAAC,EAAE,QAAQ,EAAE,MAAM,CAAC;IACzE,UAAU,EAAE,+BAA+B;CAC9C;;AD/ID;;GAEG;;;;"}