{"version":3,"file":"collections.js","sources":["../../../src/cdk/collections/selection.ts"],"sourcesContent":["\nimport { Subject } from 'rxjs/Subject';\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nexport class SelectionModel<T> {\n    /** Currently-selected values. */\n    private _selection: Set<T> = new Set();\n\n    /** Keeps track of the deselected options that haven't been emitted by the change event. */\n    private _deselectedToEmit: T[] = [];\n\n    /** Keeps track of the selected options that haven't been emitted by the change event. */\n    private _selectedToEmit: T[] = [];\n\n    /** Cache for the array value of the selected items. */\n    private _selected: T[] | null;\n\n    /** Selected values. */\n    get selected(): T[] {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n\n        return this._selected;\n    }\n\n    /** Event emitted when the value has changed. */\n    onChange: Subject<SelectionChange<T>> | null = this._emitChanges ? new Subject() : null;\n\n    constructor(private _multiple = false,\n                initiallySelectedValues?: T[],\n                private _emitChanges = true) {\n\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(value => this._markSelected(value));\n            } else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n\n    /**\n     * Selects a value or an array of values.\n     */\n    select(...values: T[]): void {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._markSelected(value));\n        this._emitChangeEvent();\n    }\n\n    /**\n     * Deselects a value or an array of values.\n     */\n    deselect(...values: T[]): void {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._unmarkSelected(value));\n        this._emitChangeEvent();\n    }\n\n    /**\n     * Toggles a value between selected and deselected.\n     */\n    toggle(value: T): void {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n\n    /**\n     * Clears all of the selected values.\n     */\n    clear(): void {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    }\n\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value: T): boolean {\n        return this._selection.has(value);\n    }\n\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty(): boolean {\n        return this._selection.size === 0;\n    }\n\n    /**\n     * Determines whether the model has a value.\n     */\n    hasValue(): boolean {\n        return !this.isEmpty();\n    }\n\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate?: (a: T, b: T) => number): void {\n        if (this._multiple && this._selected) {\n            this._selected.sort(predicate);\n        }\n    }\n\n    /** Emits a change event and clears the records of selected and deselected values. */\n    private _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            const eventData = new SelectionChange<T>(this, this._selectedToEmit, this._deselectedToEmit);\n\n            if (this.onChange) {\n                this.onChange.next(eventData);\n            }\n\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n\n    /** Selects a value. */\n    private _markSelected(value: T) {\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n\n            this._selection.add(value);\n\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n\n    /** Deselects a value. */\n    private _unmarkSelected(value: T) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n\n    /** Clears out the selected values. */\n    private _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach(value => this._unmarkSelected(value));\n        }\n    }\n\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    private _verifyValueAssignment(values: T[]) {\n        if (values.length > 1 && !this._multiple) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n}\n\n/**\n * Event emitted when the value of a MatSelectionModel has changed.\n * @docs-private\n */\nexport class SelectionChange<T> {\n    constructor(/** Model that dispatched the event. */\n                public source: SelectionModel<T>,\n                /** Options that were added to the model. */\n                public added?: T[],\n                /** Options that were removed from the model. */\n                public removed?: T[]) {\n    }\n}\n\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n */\nexport function getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n"],"names":[],"mappings":"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"}