{"version":3,"file":"collections.js","sources":["../../../src/cdk/collections/index.ts","../../../src/cdk/collections/unique-selection-dispatcher.ts","../../../src/cdk/collections/selection.ts","../../../src/cdk/collections/array-data-source.ts","../../../src/cdk/collections/data-source.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","import { Injectable, OnDestroy } from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable({providedIn: 'root'})\nexport class UniqueSelectionDispatcher implements OnDestroy {\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\n\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n  notify(id: string, name: string) {\n    for (const listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /**\n   * Listen for future changes to item selection.\n   * @return Function used to deregister listener\n   */\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\n\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n}\n","import { Subject } from 'rxjs';\n\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nexport class SelectionModel<T> {\n\n    /** Selected values. */\n    get selected(): T[] {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n\n        return this._selected;\n    }\n\n    /** Event emitted when the value has changed. */\n    changed: Subject<SelectionChange<T>> = new Subject();\n\n    /**\n     * Event emitted when the value has changed.\n     * @deprecated Use `changed` instead.\n     * @breaking-change 8.0.0 To be changed to `changed`\n     */\n    onChange: Subject<SelectionChange<T>> = this.changed;\n    /** Currently-selected values. */\n    private _selection = new Set<T>();\n\n    /** Keeps track of the deselected options that haven't been emitted by the change event. */\n    private _deselectedToEmit: T[] = [];\n\n    /** Keeps track of the selected options that haven't been emitted by the change event. */\n    private _selectedToEmit: T[] = [];\n\n    /** Cache for the array value of the selected items. */\n    private _selected: T[] | null;\n\n    constructor(\n        private _multiple = false,\n        initiallySelectedValues?: T[],\n        private _emitChanges = true) {\n\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach((value) => this._markSelected(value));\n            } else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n\n    /**\n     * Selects a value or an array of values.\n     */\n    select(...values: T[]): void {\n        this._verifyValueAssignment(values);\n        values.forEach((value) => this._markSelected(value));\n        this._emitChangeEvent();\n    }\n\n    /**\n     * Deselects a value or an array of values.\n     */\n    deselect(...values: T[]): void {\n        this._verifyValueAssignment(values);\n        values.forEach((value) => this._unmarkSelected(value));\n        this._emitChangeEvent();\n    }\n\n    /**\n     * Toggles a value between selected and deselected.\n     */\n    toggle(value: T): void {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n\n    /**\n     * Clears all of the selected values.\n     */\n    clear(): void {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    }\n\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value: T): boolean {\n        return this._selection.has(value);\n    }\n\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty(): boolean {\n        return this._selection.size === 0;\n    }\n\n    /**\n     * Determines whether the model has a value.\n     */\n    hasValue(): boolean {\n        return !this.isEmpty();\n    }\n\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate?: (a: T, b: T) => number): void {\n        if (this._multiple && this.selected) {\n            this._selected!.sort(predicate);\n        }\n    }\n\n    /**\n     * Gets whether multiple values can be selected.\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n\n    /** Emits a change event and clears the records of selected and deselected values. */\n    private _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit\n            });\n\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n\n    /** Selects a value. */\n    private _markSelected(value: T) {\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n\n            this._selection.add(value);\n\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n\n    /** Deselects a value. */\n    private _unmarkSelected(value: T) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n\n    /** Clears out the selected values. */\n    private _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach((value) => this._unmarkSelected(value));\n        }\n    }\n\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    private _verifyValueAssignment(values: T[]) {\n        if (values.length > 1 && !this._multiple) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n}\n\n/**\n * Event emitted when the value of a MatSelectionModel has changed.\n * @docs-private\n */\nexport interface SelectionChange<T> {\n    /** Model that dispatched the event. */\n    source: SelectionModel<T>;\n    /** Options that were added to the model. */\n    added: T[];\n    /** Options that were removed from the model. */\n    removed: T[];\n}\n\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nexport function getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n","import { Observable, of as observableOf } from 'rxjs';\n\nimport { DataSource } from './data-source';\n\n\n/** DataSource wrapper for a native array. */\nexport class ArrayDataSource<T> extends DataSource<T> {\n    constructor(private _data: T[] | Observable<T[]>) {\n        super();\n    }\n\n    connect(): Observable<T[]> {\n        return this._data instanceof Observable ? this._data : observableOf(this._data);\n    }\n\n    // tslint:disable-next-line\n    disconnect() {}\n}\n","import { Observable } from 'rxjs';\n\nimport { ICollectionViewer } from './collection-viewer';\n\n\nexport abstract class DataSource<T> {\n    /**\n     * Connects a collection viewer (such as a data-table) to this data source. Note that\n     * the stream provided will be accessed during change detection and should not directly change\n     * values that are bound in template views.\n     * @param collectionViewer The component that exposes a view over the data provided by this\n     *     data source.\n     * @returns Observable that emits a new value when the data changes.\n     */\n    abstract connect(collectionViewer: ICollectionViewer): Observable<T[]>;\n\n    /**\n     * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\n     * to perform any clean-up or tear-down operations when a view is being destroyed.\n     *\n     * @param collectionViewer The component that exposes a view over the data provided by this\n     *     data source.\n     */\n    abstract disconnect(collectionViewer: ICollectionViewer): void;\n}\n"],"names":["tslib_1.__decorate","observableOf"],"mappings":"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"}