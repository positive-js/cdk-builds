{"version":3,"file":"collections.js","sources":["../../../packages/cdk/collections/unique-selection-dispatcher.ts","../../../packages/cdk/collections/selection.ts","../../../packages/cdk/collections/array-data-source.ts","../../../packages/cdk/collections/data-source.ts"],"sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable({providedIn: 'root'})\nexport class UniqueSelectionDispatcher implements OnDestroy {\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\n\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n  notify(id: string, name: string) {\n    for (const listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /**\n   * Listen for future changes to item selection.\n   * @return Function used to deregister listener\n   */\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\n\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n}\n","import { Subject } from 'rxjs';\n\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nexport class SelectionModel<T> {\n\n    /** Event emitted when the value has changed. */\n    changed: Subject<SelectionChange<T>> = new Subject();\n\n    /**\n     * Event emitted when the value has changed.\n     * @deprecated Use `changed` instead.\n     * @breaking-change 8.0.0 To be changed to `changed`\n     */\n    onChange: Subject<SelectionChange<T>> = this.changed;\n    /** Currently-selected values. */\n    selection = new Set<T>();\n\n    /** Keeps track of the deselected options that haven't been emitted by the change event. */\n    private deselectedToEmit: T[] = [];\n\n    /** Keeps track of the selected options that haven't been emitted by the change event. */\n    private selectedToEmit: T[] = [];\n\n    get selected(): T[] {\n        if (!this._selected) {\n            this._selected = Array.from(this.selection.values());\n        }\n\n        return this._selected;\n    }\n\n    private _selected: T[] | null;\n\n    constructor(\n        private _multiple = false,\n        initiallySelectedValues?: T[],\n        private _emitChanges: boolean = true\n    ) {\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach((value) => this.markSelected(value));\n            } else {\n                this.markSelected(initiallySelectedValues[0]);\n            }\n\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this.selectedToEmit.length = 0;\n        }\n    }\n\n    /**\n     * Selects a value or an array of values.\n     */\n    select(...values: T[]): void {\n        this.verifyValueAssignment(values);\n\n        values.forEach((value) => this.markSelected(value));\n\n        this.emitChangeEvent();\n    }\n\n    /**\n     * Deselects a value or an array of values.\n     */\n    deselect(...values: T[]): void {\n        this.verifyValueAssignment(values);\n\n        values.forEach((value) => this.unmarkSelected(value));\n\n        this.emitChangeEvent();\n    }\n\n    /**\n     * Toggles a value between selected and deselected.\n     */\n    toggle(value: T): void {\n        if (this.isSelected(value)) {\n            this.deselect(value);\n        } else {\n            this.select(value);\n        }\n    }\n\n    /**\n     * Clears all of the selected values.\n     */\n    clear(): void {\n        this.unmarkAll();\n        this.emitChangeEvent();\n    }\n\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value: T): boolean {\n        return this.selection.has(value);\n    }\n\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty(): boolean {\n        return this.selection.size === 0;\n    }\n\n    /**\n     * Determines whether the model has a value.\n     */\n    hasValue(): boolean {\n        return !this.isEmpty();\n    }\n\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate?: (a: T, b: T) => number): void {\n        if (this._multiple && this.selected) {\n            this._selected!.sort(predicate);\n        }\n    }\n\n    /**\n     * Gets whether multiple values can be selected.\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n\n    /** Emits a change event and clears the records of selected and deselected values. */\n    private emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n\n        if (this.selectedToEmit.length || this.deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this.selectedToEmit,\n                removed: this.deselectedToEmit\n            });\n\n            this.deselectedToEmit = [];\n            this.selectedToEmit = [];\n        }\n    }\n\n    /** Selects a value. */\n    private markSelected(value: T) {\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this.unmarkAll();\n            }\n\n            this.selection.add(value);\n\n            if (this._emitChanges) {\n                this.selectedToEmit.push(value);\n            }\n        }\n    }\n\n    /** Deselects a value. */\n    private unmarkSelected(value: T) {\n        if (this.isSelected(value)) {\n            this.selection.delete(value);\n\n            if (this._emitChanges) {\n                this.deselectedToEmit.push(value);\n            }\n        }\n    }\n\n    /** Clears out the selected values. */\n    private unmarkAll() {\n        if (!this.isEmpty()) {\n            this.selection.forEach((value) => this.unmarkSelected(value));\n        }\n    }\n\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    private verifyValueAssignment(values: T[]) {\n        if (values.length > 1 && !this._multiple) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n}\n\n/**\n * Event emitted when the value of a MatSelectionModel has changed.\n * @docs-private\n */\nexport interface SelectionChange<T> {\n    /** Model that dispatched the event. */\n    source: SelectionModel<T>;\n    /** Options that were added to the model. */\n    added: T[];\n    /** Options that were removed from the model. */\n    removed: T[];\n}\n\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nexport function getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n","import { Observable, of as observableOf } from 'rxjs';\n\nimport { DataSource } from './data-source';\n\n\n/** DataSource wrapper for a native array. */\nexport class ArrayDataSource<T> extends DataSource<T> {\n    constructor(private _data: T[] | Observable<T[]>) {\n        super();\n    }\n\n    connect(): Observable<T[]> {\n        return this._data instanceof Observable ? this._data : observableOf(this._data);\n    }\n\n    // tslint:disable-next-line\n    disconnect() {}\n}\n","import { Observable } from 'rxjs';\n\nimport { ICollectionViewer } from './collection-viewer';\n\n\nexport abstract class DataSource<T> {\n    /**\n     * Connects a collection viewer (such as a data-table) to this data source. Note that\n     * the stream provided will be accessed during change detection and should not directly change\n     * values that are bound in template views.\n     * @param collectionViewer The component that exposes a view over the data provided by this\n     *     data source.\n     * @returns Observable that emits a new value when the data changes.\n     */\n    abstract connect(collectionViewer: ICollectionViewer): Observable<T[]>;\n\n    /**\n     * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\n     * to perform any clean-up or tear-down operations when a view is being destroyed.\n     *\n     * @param collectionViewer The component that exposes a view over the data provided by this\n     *     data source.\n     */\n    abstract disconnect(collectionViewer: ICollectionViewer): void;\n}\n\n/** Checks whether an object is a data source. */\nexport function isDataSource(value: any): value is DataSource<any> {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource.\n    return value && typeof value.connect === 'function';\n}\n"],"names":["observableOf"],"mappings":"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"}