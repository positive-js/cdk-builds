{"version":3,"file":"a11y.js","sources":["../../../src/cdk/a11y/a11y-module.ts","../../../src/cdk/a11y/focus-monitor/focus-monitor.ts","../../../src/cdk/a11y/key-manager/focus-key-manager.ts","../../../src/cdk/a11y/key-manager/activedescendant-key-manager.ts","../../../src/cdk/a11y/key-manager/list-key-manager.ts"],"sourcesContent":["\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {CdkMonitorFocus, FOCUS_MONITOR_PROVIDER} from './focus-monitor/focus-monitor';\nimport {PlatformModule} from '@ptsecurity/cdk/platform';\n\n\n@NgModule({\n  imports: [CommonModule, PlatformModule],\n  declarations: [CdkMonitorFocus],\n  exports: [CdkMonitorFocus],\n  providers: [\n    FOCUS_MONITOR_PROVIDER,\n  ]\n})\nexport class A11yModule {}\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Injectable,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    SkipSelf\n} from '@angular/core';\n\nimport { Observable, Subject, Subscription, of as observableOf } from 'rxjs';\n\nimport { Platform, supportsPassiveEventListeners } from '@ptsecurity/cdk/platform';\n\n\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n\ntype MonitoredElementInfo = {\n    unlisten: Function,\n    checkChildren: boolean,\n    subject: Subject<FocusOrigin>\n};\n\n\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\n@Injectable({providedIn: 'root'})\nexport class FocusMonitor implements OnDestroy {\n    /** The focus origin that the next focus event is a result of. */\n    private _origin: FocusOrigin = null;\n\n    /** The FocusOrigin of the last focus event tracked by the FocusMonitor. */\n    private _lastFocusOrigin: FocusOrigin;\n\n    /** Whether the window has just been focused. */\n    private _windowFocused = false;\n\n    /** The target of the last touch event. */\n    private _lastTouchTarget: EventTarget | null;\n\n    /** The timeout id of the touch timeout, used to cancel timeout later. */\n    private _touchTimeoutId: number;\n\n    /** The timeout id of the window focus timeout. */\n    private _windowFocusTimeoutId: number;\n\n    /** The timeout id of the origin clearing timeout. */\n    private _originTimeoutId: number;\n\n    /** Map of elements being monitored to their info. */\n    private _elementInfo = new Map<HTMLElement, MonitoredElementInfo>();\n\n    /** A map of global objects to lists of current listeners. */\n    private _unregisterGlobalListeners = () => {};\n\n    /** The number of elements currently being monitored. */\n    private _monitoredElementCount = 0;\n\n    constructor(private _ngZone: NgZone, private _platform: Platform) {}\n\n    /**\n     * Monitors focus on an element and applies appropriate CSS classes.\n     * @param element The element to monitor\n     * @param checkChildren Whether to count the element as focused when its children are focused.\n     * @returns An observable that emits when the focus state of the element changes.\n     *     When the element is blurred, null will be emitted.\n     */\n    monitor(element: HTMLElement, checkChildren: boolean = false): Observable<FocusOrigin> {\n        if (!this._platform.isBrowser) {\n            return observableOf(null);\n        }\n        // Check if we're already monitoring this element.\n        if (this._elementInfo.has(element)) {\n            const cachedInfo = this._elementInfo.get(element);\n            cachedInfo!.checkChildren = checkChildren;\n\n            return cachedInfo!.subject.asObservable();\n        }\n\n        // Create monitored element info.\n        const info: MonitoredElementInfo = {\n            unlisten: () => {},\n            checkChildren: checkChildren,\n            subject: new Subject<FocusOrigin>()\n        };\n        this._elementInfo.set(element, info);\n        this._incrementMonitoredElementCount();\n\n        // Start listening. We need to listen in capture phase since focus events don't bubble.\n        const focusListener = (event: FocusEvent) => this._onFocus(event, element);\n        const blurListener = (event: FocusEvent) => this._onBlur(event, element);\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('focus', focusListener, true);\n            element.addEventListener('blur', blurListener, true);\n        });\n\n        // Create an unlisten function for later.\n        info.unlisten = () => {\n            element.removeEventListener('focus', focusListener, true);\n            element.removeEventListener('blur', blurListener, true);\n        };\n\n        return info.subject.asObservable();\n    }\n\n    /**\n     * Stops monitoring an element and removes all focus classes.\n     * @param element The element to stop monitoring.\n     */\n    stopMonitoring(element: HTMLElement): void {\n        const elementInfo = this._elementInfo.get(element);\n\n        if (elementInfo) {\n            elementInfo.unlisten();\n            elementInfo.subject.complete();\n\n            this._setClasses(element);\n            this._elementInfo.delete(element);\n            this._decrementMonitoredElementCount();\n        }\n    }\n\n    /**\n     * Focuses the element via the specified focus origin.\n     * @param element The element to focus.\n     * @param origin The focus origin.\n     */\n    focusVia(element: HTMLElement, origin: FocusOrigin): void {\n        this._setOriginForCurrentEventQueue(origin);\n\n        // `focus` isn't available on the server\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    ngOnDestroy() {\n        this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n    }\n\n    /** Register necessary event listeners on the document and window. */\n    private _registerGlobalListeners() {\n        // Do nothing if we're not on the browser platform.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n\n        // On keydown record the origin and clear any touch event that may be in progress.\n        const documentKeydownListener = () => {\n            this._lastTouchTarget = null;\n            this._setOriginForCurrentEventQueue('keyboard');\n        };\n\n        // On mousedown record the origin only if there is not touch target, since a mousedown can\n        // happen as a result of a touch event.\n        const documentMousedownListener = () => {\n            if (!this._lastTouchTarget) {\n                this._setOriginForCurrentEventQueue('mouse');\n            }\n        };\n\n        // When the touchstart event fires the focus event is not yet in the event queue. This means\n        // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\n        // see if a focus happens.\n        const documentTouchstartListener = (event: TouchEvent) => {\n            if (this._touchTimeoutId != null) { clearTimeout(this._touchTimeoutId); }\n\n            this._lastTouchTarget = event.target;\n\n            this._touchTimeoutId = window.setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n        };\n\n        // Make a note of when the window regains focus, so we can restore the origin info for the\n        // focused element.\n        const windowFocusListener = () => {\n            this._windowFocused = true;\n\n            this._windowFocusTimeoutId = window.setTimeout(() => this._windowFocused = false, 0);\n        };\n\n        // Note: we listen to events in the capture phase so we can detect them even if the user stops\n        // propagation.\n        this._ngZone.runOutsideAngular(() => {\n            document.addEventListener('keydown', documentKeydownListener, true);\n            document.addEventListener('mousedown', documentMousedownListener, true);\n            document.addEventListener('touchstart', documentTouchstartListener,\n                supportsPassiveEventListeners() ? ({ passive: true, capture: true } as any) : true);\n            window.addEventListener('focus', windowFocusListener);\n        });\n\n        this._unregisterGlobalListeners = () => {\n            document.removeEventListener('keydown', documentKeydownListener, true);\n            document.removeEventListener('mousedown', documentMousedownListener, true);\n            document.removeEventListener('touchstart', documentTouchstartListener,\n                supportsPassiveEventListeners() ? ({ passive: true, capture: true } as any) : true);\n            window.removeEventListener('focus', windowFocusListener);\n\n            // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n            clearTimeout(this._windowFocusTimeoutId);\n            clearTimeout(this._touchTimeoutId);\n            clearTimeout(this._originTimeoutId);\n        };\n    }\n\n    private _toggleClass(element: Element, className: string, shouldSet: boolean) {\n        if (shouldSet) {\n            element.classList.add(className);\n        } else {\n            element.classList.remove(className);\n        }\n    }\n\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param element The element to update the classes on.\n     * @param origin The focus origin.\n     */\n    private _setClasses(element: HTMLElement, origin?: FocusOrigin): void {\n        const elementInfo = this._elementInfo.get(element);\n\n        if (elementInfo) {\n            this._toggleClass(element, 'cdk-focused', !!origin);\n            this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n            this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n            this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n            this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n        }\n    }\n\n    /**\n     * Sets the origin and schedules an async function to clear it at the end of the event queue.\n     * @param origin The origin to set.\n     */\n    private _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n        this._ngZone.runOutsideAngular(() => {\n            this._origin = origin;\n\n            this._originTimeoutId = window.setTimeout(() => this._origin = null);\n        });\n    }\n\n    /**\n     * Checks whether the given focus event was caused by a touchstart event.\n     * @param event The focus event to check.\n     * @returns Whether the event was caused by a touch.\n     */\n    private _wasCausedByTouch(event: FocusEvent): boolean {\n        // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n        // Consider the following dom structure:\n        //\n        // <div #parent tabindex=\"0\" cdkFocusClasses>\n        //   <div #child (click)=\"#parent.focus()\"></div>\n        // </div>\n        //\n        // If the user touches the #child element and the #parent is programmatically focused as a\n        // result, this code will still consider it to have been caused by the touch event and will\n        // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n        // relatively small edge-case that can be worked around by using\n        // focusVia(parentEl, 'program') to focus the parent element.\n        //\n        // If we decide that we absolutely must handle this case correctly, we can do so by listening\n        // for the first focus event after the touchstart, and then the first blur event after that\n        // focus event. When that blur event fires we know that whatever follows is not a result of the\n        // touchstart.\n        const focusTarget = event.target;\n\n        return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n            (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n    }\n\n    /**\n     * Handles focus events on a registered element.\n     * @param event The focus event.\n     * @param element The monitored element.\n     */\n    private _onFocus(event: FocusEvent, element: HTMLElement) {\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n        // focus event affecting the monitored element. If we want to use the origin of the first event\n        // instead we should check for the cdk-focused class here and return if the element already has\n        // it. (This only matters for elements that have includesChildren = true).\n\n        // If we are not counting child-element-focus as focused, make sure that the event target is the\n        // monitored element itself.\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {\n            return;\n        }\n\n        // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n        // 1) The window has just regained focus, in which case we want to restore the focused state of\n        //    the element from before the window blurred.\n        // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n        // 3) The element was programmatically focused, in which case we should mark the origin as\n        //    'program'.\n        let origin = this._origin;\n        if (!origin) {\n            if (this._windowFocused && this._lastFocusOrigin) {\n                origin = this._lastFocusOrigin;\n            } else if (this._wasCausedByTouch(event)) {\n                origin = 'touch';\n            } else {\n                origin = 'program';\n            }\n        }\n\n        this._setClasses(element, origin);\n        this._emitOrigin(elementInfo.subject, origin);\n        this._lastFocusOrigin = origin;\n    }\n\n    /**\n     * Handles blur events on a registered element.\n     * @param event The blur event.\n     * @param element The monitored element.\n     */\n    _onBlur(event: FocusEvent, element: HTMLElement) {\n        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n        // order to focus another child of the monitored element.\n        const elementInfo = this._elementInfo.get(element);\n\n        if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n                element.contains(event.relatedTarget))) {\n            return;\n        }\n\n        this._setClasses(element);\n        elementInfo.subject.next(null);\n    }\n\n    private _emitOrigin(subject: Subject<FocusOrigin>, origin: FocusOrigin) {\n        this._ngZone.run(() => subject.next(origin));\n    }\n\n    private _incrementMonitoredElementCount() {\n        // Register global listeners when first element is monitored.\n        if (++this._monitoredElementCount === 1) {\n            this._registerGlobalListeners();\n        }\n    }\n\n    private _decrementMonitoredElementCount() {\n        // Unregister global listeners when last element is unmonitored.\n        if (!--this._monitoredElementCount) {\n            this._unregisterGlobalListeners();\n            this._unregisterGlobalListeners = () => {};\n        }\n    }\n}\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n@Directive({\n    selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n})\nexport class CdkMonitorFocus implements OnDestroy {\n\n    @Output() cdkFocusChange = new EventEmitter<FocusOrigin>();\n\n    private _monitorSubscription: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        this._monitorSubscription = this._focusMonitor.monitor(\n            this._elementRef.nativeElement,\n            this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n            .subscribe((origin) => this.cdkFocusChange.emit(origin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n        this._monitorSubscription.unsubscribe();\n    }\n}\n\n/** @docs-private @deprecated*/\nexport function FOCUS_MONITOR_PROVIDER_FACTORY(parentDispatcher: FocusMonitor, ngZone: NgZone, platform: Platform) {\n    return parentDispatcher || new FocusMonitor(ngZone, platform);\n}\n\n/** @docs-private */\nexport const FOCUS_MONITOR_PROVIDER = {\n    // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.\n    provide: FocusMonitor,\n    deps: [[new Optional(), new SkipSelf(), FocusMonitor], NgZone, Platform],\n    useFactory: FOCUS_MONITOR_PROVIDER_FACTORY\n};\n","import { FocusOrigin } from '../focus-monitor/focus-monitor';\n\nimport { ListKeyManager, IListKeyManagerOption } from './list-key-manager';\n\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply it's label.\n */\nexport interface IFocusableOption extends IListKeyManagerOption {\n    // Focuses the `FocusableOption`. */\n    focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<IFocusableOption & T> {\n    private _origin: FocusOrigin = 'program';\n\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin: FocusOrigin): this {\n        this._origin = origin;\n\n        return this;\n    }\n\n    /**\n     * Sets the active item or index to the item that is specified and focuses it.\n     * @param item Item to be set as active.\n     */\n    setActiveItem(item: number | T): void;\n\n    setActiveItem(item: any): void {\n        super.setActiveItem(item);\n\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n","\nimport { ListKeyManager, IListKeyManagerOption } from './list-key-manager';\n\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface IHighlightable extends IListKeyManagerOption {\n    // Applies the styles for an active item to this item.\n    setActiveStyles(): void;\n\n    // Applies the styles for an inactive item to this item.\n    setInactiveStyles(): void;\n}\n\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<IHighlightable & T> {\n\n    /**\n     * Sets the active item to the item at the specified index and adds the\n     * active styles to the newly active item. Also removes active styles\n     * from the previously active item.\n     * @param index Index of the item to be set as active.\n     */\n    setActiveItem(index: number): void;\n\n    /**\n     * Sets the active item to the item to the specified one and adds the\n     * active styles to the it. Also removes active styles from the\n     * previously active item.\n     * @param item Item to be set as active.\n     */\n    setActiveItem(item: T): void;\n\n    /**\n     * This method sets the active item to the item at the specified index.\n     * It also adds active styles to the newly active item and removes active\n     * styles from the previously active item.\n     */\n    setActiveItem(index: any): void {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n        super.setActiveItem(index);\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n\n}\n","import { QueryList } from '@angular/core';\n\nimport { Subject, Subscription } from 'rxjs';\nimport { debounceTime, filter, map, tap } from 'rxjs/operators';\n\nimport {\n    UP_ARROW,\n    DOWN_ARROW,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    TAB,\n    A,\n    Z,\n    ZERO,\n    NINE\n} from '@ptsecurity/cdk/keycodes';\n\n\n// This interface is for items that can be passed to a ListKeyManager.\nexport interface IListKeyManagerOption {\n    // Whether the option is disabled.\n    disabled?: boolean;\n\n    // Gets the label for this option.\n    getLabel?(): string;\n}\n\n/* tslint:disable:member-ordering */\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends IListKeyManagerOption> {\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n    tabOut: Subject<void> = new Subject<void>();\n\n    /** Stream that emits whenever the active item of the list manager changes. */\n    change = new Subject<number>();\n\n    previousActiveItemIndex = -1;\n    private _activeItemIndex = -1;\n    private _activeItem: T;\n    private _wrap: boolean = false;\n    private _letterKeyStream = new Subject<string>();\n    private _typeaheadSubscription = Subscription.EMPTY;\n    private _vertical = true;\n    private _horizontal: 'ltr' | 'rtl' | null;\n\n    private _scrollSize: number = 0;\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n    private _skipPredicateFn = (item: T) => item.disabled;\n\n    // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n    private _pressedLetters: string[] = [];\n\n    constructor(private _items: QueryList<T>) {\n        if (_items instanceof QueryList) {\n            _items.changes.subscribe((newItems: QueryList<T>) => {\n                if (this._activeItem) {\n                    const itemArray = newItems.toArray();\n                    const newIndex = itemArray.indexOf(this._activeItem);\n\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n\n    withScrollSize(scrollSize: number): this {\n        this._scrollSize = scrollSize;\n\n        return this;\n    }\n\n    /**\n     * Turns on wrapping mode, which ensures that the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     */\n\n    withWrap(): this {\n        this._wrap = true;\n\n        return this;\n    }\n\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled: boolean = true): this {\n        this._vertical = enabled;\n\n        return this;\n    }\n\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n        this._horizontal = direction;\n\n        return this;\n    }\n\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval: number = 200): this {\n        if (this._items.length && this._items.some((item) => typeof item.getLabel !== 'function')) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n\n        this._typeaheadSubscription.unsubscribe();\n\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters and convert those\n        // letters back into a string. Afterwards find the first item that starts with that string and select it.\n        this._typeaheadSubscription = this._letterKeyStream.pipe(\n            tap((keyCode) => this._pressedLetters.push(keyCode)),\n            debounceTime(debounceInterval),\n            filter(() => this._pressedLetters.length > 0),\n            map(() => this._pressedLetters.join(''))\n        ).subscribe((inputString) => {\n            const items = this._items.toArray();\n\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                const index = (this._activeItemIndex + i) % items.length;\n                const item = items[index];\n\n                if (!item.disabled && item.getLabel!().toUpperCase().trim().indexOf(inputString) === 0) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n\n            this._pressedLetters = [];\n        });\n\n        return this;\n    }\n\n    /**\n     * Sets the active item to the item at the index specified.\n     * @param index The index of the item to be set as active or item The item to be set as active.\n     */\n    setActiveItem(index: number | T): void;\n\n    /**\n     * Sets the active item to the item at the index specified.\n     * @param index The index of the item to be set as active.\n     */\n    setActiveItem(index: any): void {\n        this.previousActiveItemIndex = this._activeItemIndex;\n\n        this._activeItemIndex = index;\n        this._activeItem = this._items.toArray()[index];\n\n        if (this._activeItemIndex !== this.previousActiveItemIndex) {\n            this.change.next(index);\n        }\n    }\n\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    onKeydown(event: KeyboardEvent): void {\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n\n                return;\n\n            case DOWN_ARROW:\n                if (this._vertical) {\n                    this.setNextItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case UP_ARROW:\n                if (this._vertical) {\n                    this.setPreviousItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case RIGHT_ARROW:\n                if (this._horizontal === 'ltr') {\n                    this.setNextItemActive();\n                    break;\n                } else if (this._horizontal === 'rtl') {\n                    this.setPreviousItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case LEFT_ARROW:\n                if (this._horizontal === 'ltr') {\n                    this.setPreviousItemActive();\n                    break;\n                } else if (this._horizontal === 'rtl') {\n                    this.setNextItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            default:\n                // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                if (event.key && event.key.length === 1) {\n                    this._letterKeyStream.next(event.key.toLocaleUpperCase());\n                } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                    this._letterKeyStream.next(String.fromCharCode(keyCode));\n                }\n\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n\n        this._pressedLetters = [];\n        event.preventDefault();\n    }\n\n    // Index of the currently active item.\n    get activeItemIndex(): number {\n        return this._activeItemIndex;\n    }\n\n    // The active item.\n    get activeItem(): T | null {\n        return this._activeItem;\n    }\n\n    // Sets the active item to the first enabled item in the list.\n    setFirstItemActive(): void {\n        this._setActiveItemByIndex(0, 1);\n    }\n\n    // Sets the active item to the last enabled item in the list.\n    setLastItemActive(): void {\n        this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n\n    // Sets the active item to the next enabled item in the list.\n    setNextItemActive(): void {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n\n    // Sets the active item to a previous enabled item in the list.\n    setPreviousItemActive(): void {\n        this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\n            : this._setActiveItemByDelta(-1);\n    }\n\n    setNextPageItemActive(delta: number = this._scrollSize): void {\n        const nextItemIndex = this._activeItemIndex + delta;\n\n        if (nextItemIndex >= this._items.length) {\n            this.setLastItemActive();\n        } else {\n            this._setActiveItemByDelta(1);\n        }\n    }\n\n    setPreviousPageItemActive(delta: number = this._scrollSize): void {\n        const nextItemIndex = this._activeItemIndex - delta;\n\n        if (nextItemIndex <= 0) {\n            this.setFirstItemActive();\n        } else {\n            this._setActiveItemByDelta(-1);\n        }\n    }\n\n    /**\n     * Allows setting the active item without any other effects.\n     * @param item Item to be set as active or index Index of the item to be set as active..\n     */\n    updateActiveItem(item: number | T): void;\n\n    updateActiveItem(item: any): void {\n        const itemArray = this._getItemsArray();\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n\n        this.previousActiveItemIndex = this._activeItemIndex;\n\n        this._activeItemIndex = index;\n        this._activeItem = itemArray[index];\n    }\n\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    private _setActiveItemByDelta(delta: number): void {\n        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    private _setActiveInWrapMode(delta: number): void {\n        const items = this._getItemsArray();\n\n        for (let i = 1; i <= items.length; i++) {\n            const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n            const item = items[index];\n\n            if (!this._skipPredicateFn(item)) {\n                this.setActiveItem(index);\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    private _setActiveInDefaultMode(delta: number): void {\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    private _setActiveItemByIndex(index: number, fallbackDelta: number): void {\n        const items = this._getItemsArray();\n\n        if (!items[index]) { return; }\n\n        while (this._skipPredicateFn(items[index])) {\n            index += fallbackDelta;\n\n            if (!items[index]) { return; }\n        }\n\n        this.setActiveItem(index);\n    }\n\n    /** Returns the items as an array. */\n    private _getItemsArray(): T[] {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n\n/* tslint:enable:member-ordering */\n"],"names":["observableOf"],"mappings":"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"}