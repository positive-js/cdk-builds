{"version":3,"file":"portal.js","sources":["../../../packages/cdk/portal/portal-injector.ts","../../../packages/cdk/portal/portal-directives.ts","../../../packages/cdk/portal/dom-portal-outlet.ts","../../../packages/cdk/portal/portal.ts","../../../packages/cdk/portal/portal-errors.ts"],"sourcesContent":["import { Injector } from '@angular/core';\n\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n */\nexport class PortalInjector implements Injector {\n    constructor(\n        private _parentInjector: Injector,\n        private _customTokens: WeakMap<any, any>) {\n    }\n\n    get(token: any, notFoundValue?: any): any { // tslint:disable-line\n        const value = this._customTokens.get(token);\n\n        if (value !== undefined) {\n            return value;\n        }\n\n        return this._parentInjector.get<any>(token, notFoundValue);\n    }\n}\n","\nimport {\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    EmbeddedViewRef,\n    EventEmitter,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output,\n    TemplateRef,\n    ViewContainerRef\n} from '@angular/core';\n\nimport { BasePortalOutlet, ComponentPortal, Portal, TemplatePortal } from './portal';\n\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\n@Directive({\n    selector: '[cdk-portal], [cdkPortal], [portal]',\n    exportAs: 'cdkPortal'\n})\nexport class CdkPortal extends TemplatePortal {\n    constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\n\n/**\n * Possible attached references to the CdkPortalOutlet.\n */\nexport type CdkPortalOutletAttachedRef = ComponentRef<any> | EmbeddedViewRef<any> | null;\n\n\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\n@Directive({\n    selector: '[cdkPortalOutlet], [cdkPortalHost], [portalHost]',\n    exportAs: 'cdkPortalOutlet, cdkPortalHost',\n    inputs: ['portal: cdkPortalOutlet']\n})\nexport class CdkPortalOutlet extends BasePortalOutlet implements OnInit, OnDestroy {\n\n    @Output() attached: EventEmitter<CdkPortalOutletAttachedRef> =\n        new EventEmitter<CdkPortalOutletAttachedRef>();\n\n    /** Whether the portal component is initialized. */\n    private _isInitialized = false;\n\n    /** Reference to the currently-attached component/view ref. */\n    private _attachedRef: CdkPortalOutletAttachedRef;\n\n    constructor(\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _viewContainerRef: ViewContainerRef) {\n        super();\n    }\n\n    /** Portal associated with the Portal outlet. */\n    get portal(): Portal<any> | null {\n        return this._attachedPortal;\n    }\n\n    set portal(portal: Portal<any> | null) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n\n        if (this.hasAttached()) {\n            super.detach();\n        }\n\n        if (portal) {\n            super.attach(portal);\n        }\n\n        this._attachedPortal = portal;\n    }\n\n    /** Component or view reference that is attached to the portal. */\n    get attachedRef(): CdkPortalOutletAttachedRef {\n        return this._attachedRef;\n    }\n\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n        portal.setAttachedHost(this);\n\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        const viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        const ref = viewContainerRef.createComponent(\n            componentFactory, viewContainerRef.length,\n            portal.injector || viewContainerRef.injector);\n\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n\n        return ref;\n    }\n\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n        portal.setAttachedHost(this);\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n\n        return viewRef;\n    }\n}\n\n\n@NgModule({\n    exports: [CdkPortal, CdkPortalOutlet],\n    declarations: [CdkPortal, CdkPortalOutlet]\n})\nexport class PortalModule {}\n","import {\n    ComponentFactoryResolver,\n    ComponentRef,\n    EmbeddedViewRef,\n    ApplicationRef,\n    Injector\n} from '@angular/core';\n\nimport { BasePortalOutlet, ComponentPortal, TemplatePortal } from './portal';\n\n\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nexport class DomPortalOutlet extends BasePortalOutlet {\n    constructor(\n        /** Element into which the content is projected. */\n        public outletElement: Element,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _defaultInjector: Injector) {\n        super();\n    }\n\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        let componentRef: ComponentRef<T>;\n\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(\n                componentFactory,\n                portal.viewContainerRef.length,\n                portal.injector || portal.viewContainerRef.injector);\n\n            this.setDisposeFn(() => componentRef.destroy());\n        } else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this.getComponentRootNode(componentRef));\n\n        return componentRef;\n    }\n\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n        let viewContainer = portal.viewContainerRef; //tslint:disable-line\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context); //tslint:disable-line\n        viewRef.detectChanges();\n\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach((rootNode) => this.outletElement.appendChild(rootNode));\n\n        this.setDisposeFn((() => {\n            let index = viewContainer.indexOf(viewRef); //tslint:disable-line\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        }));\n\n        return viewRef;\n    }\n\n    /**\n     * Clears out a portal from the DOM.\n     */\n    dispose(): void {\n        super.dispose();\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    }\n\n    /** Gets the root HTMLElement for an instantiated component. */\n    private getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n        return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n    }\n}\n","\nimport {\n    TemplateRef,\n    ViewContainerRef,\n    ElementRef,\n    ComponentRef,\n    EmbeddedViewRef,\n    Injector, ComponentFactoryResolver\n} from '@angular/core';\n\nimport {\n    throwNullPortalOutletError,\n    throwPortalAlreadyAttachedError,\n    throwNoPortalAttachedError,\n    throwNullPortalError,\n    throwPortalOutletAlreadyDisposedError,\n    throwUnknownPortalTypeError\n} from './portal-errors';\n\n\n/** Interface that can be used to generically type a class. */\nexport interface IComponentType<T> {\n  new (...args: any[]): T;\n}\n\n/** A `PortalOutlet` is an space that can contain a single `Portal`. */\nexport interface IPortalOutlet {\n    /** Attaches a portal to this outlet. */\n    attach(portal: Portal<any>): any;\n\n    /** Detaches the currently attached portal from this outlet. */\n    detach(): any;\n\n    /** Performs cleanup before the outlet is destroyed. */\n    dispose(): void;\n\n    /** Whether there is currently a portal attached to this outlet. */\n    hasAttached(): boolean;\n}\n\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nexport abstract class Portal<T> {\n    private _attachedHost: IPortalOutlet | null;\n\n    /** Attach this portal to a host. */\n    attach(host: IPortalOutlet): T {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n\n        this._attachedHost = host;\n\n        return <T> host.attach(this);\n    }\n\n    /** Detach this portal from its host */\n    detach(): void {\n        let host = this._attachedHost; //tslint:disable-line\n\n        if (host == null) {\n            throwNoPortalAttachedError();\n        } else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    }\n\n    /** Whether this portal is attached to a host. */\n    get isAttached(): boolean {\n        return this._attachedHost != null;\n    }\n\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host: IPortalOutlet | null) {\n        this._attachedHost = host;\n    }\n}\n\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n    /** The type of the component that will be instantiated for attachment. */\n    component: IComponentType<T>;\n\n    /**\n     * [Optional] Where the attached component should live in Angular's *logical* component tree.\n     * This is different from where the component *renders*, which is determined by the PortalOutlet.\n     * The origin is necessary when the host is outside of the Angular application context.\n     */\n    viewContainerRef?: ViewContainerRef | null;\n\n    /** [Optional] Injector used for the instantiation of the component. */\n    injector?: Injector | null;\n\n    /**\n     * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n     * Defaults to using the resolver from the outlet that the portal is attached to.\n     */\n    componentFactoryResolver?: ComponentFactoryResolver | null;\n\n    constructor(\n        component: IComponentType<T>,\n        viewContainerRef?: ViewContainerRef | null,\n        injector?: Injector | null,\n        componentFactoryResolver?: ComponentFactoryResolver | null) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal<C = any> extends Portal<C> {\n    /** The embedded template that will be used to instantiate an embedded View in the host. */\n    templateRef: TemplateRef<C>;\n\n    /** Reference to the ViewContainer into which the template will be stamped out. */\n    viewContainerRef: ViewContainerRef;\n\n    /** Contextual data to be passed in to the embedded view. */\n    context: C | undefined;\n\n    constructor(template: TemplateRef<C>, viewContainerRef: ViewContainerRef, context?: C) {\n        super();\n        this.templateRef = template;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n    }\n\n    get origin(): ElementRef {\n        return this.templateRef.elementRef;\n    }\n\n    /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    attach(host: IPortalOutlet, context: C | undefined = this.context): C {\n        this.context = context;\n\n        return super.attach(host);\n    }\n\n    detach(): void {\n        this.context = undefined;\n\n        return super.detach(); //tslint:disable-line\n    }\n}\n\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nexport abstract class BasePortalOutlet implements IPortalOutlet {\n    /** The portal currently attached to the host. */\n    protected _attachedPortal: Portal<any> | null;\n\n    /** A function that will permanently dispose this host. */\n    private _disposeFn: (() => void) | null;\n\n    /** Whether this host has already been permanently disposed. */\n    private _isDisposed: boolean = false;\n\n    /** Whether this host has an attached portal. */\n    hasAttached(): boolean {\n        return !!this._attachedPortal;\n    }\n\n    attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n\n    attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n\n    attach(portal: any): any;\n\n    /** Attaches a portal. */\n    attach(portal: Portal<any>): any {\n        if (!portal) {\n            throwNullPortalError();\n        }\n\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n\n            return this.attachComponentPortal(portal);\n        } else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n\n            return this.attachTemplatePortal(portal);\n        }\n\n        throwUnknownPortalTypeError();\n    }\n\n    abstract attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n\n    abstract attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n\n    /** Detaches a previously attached portal. */\n    detach(): void {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n\n        this._invokeDisposeFn();\n    }\n\n    /** Permanently dispose of this portal host. */\n    dispose(): void {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n\n    /** @docs-private */\n    setDisposeFn(fn: () => void) {\n        this._disposeFn = fn;\n    }\n\n    private _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n","/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nexport function throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nexport function throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nexport function throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nexport function throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nexport function throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nexport function throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n"],"names":[],"mappings":"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"}