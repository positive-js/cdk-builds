{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@ptsecurity/cdk/a11y/key-manager/list-key-manager.ts","ng://@ptsecurity/cdk/a11y/key-manager/activedescendant-key-manager.ts","ng://@ptsecurity/cdk/a11y/key-manager/focus-key-manager.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","ListKeyManager","_items","_this","tabOut","Subject","change","previousActiveItemIndex","_activeItemIndex","wrap","letterKeyStream","typeaheadSubscription","Subscription","EMPTY","vertical","scrollSize","pressedLetters","skipPredicateFn","item","disabled","QueryList","changes","subscribe","newItems","_activeItem","newIndex","toArray","indexOf","defineProperty","withScrollSize","withWrap","withVerticalOrientation","enabled","withHorizontalOrientation","direction","horizontal","withTypeAhead","debounceInterval","searchLetterIndex","length","some","getLabel","Error","unsubscribe","pipe","tap","keyCode","push","debounceTime","filter","map","join","inputString","items","i","index","toUpperCase","trim","setActiveItem","updateActiveItem","next","onKeydown","event","TAB","DOWN_ARROW","setNextItemActive","UP_ARROW","setPreviousItemActive","RIGHT_ARROW","LEFT_ARROW","key","toLocaleUpperCase","A","Z","ZERO","NINE","String","fromCharCode","preventDefault","setFirstItemActive","setActiveItemByIndex","setLastItemActive","setActiveItemByDelta","setNextPageItemActive","delta","setPreviousPageItemActive","itemArray","setActiveInWrapMode","setActiveInDefaultMode","getItemsArray","fallbackDelta","curIndex","ActiveDescendantKeyManager","_super","activeItem","setInactiveStyles","call","setActiveStyles","FocusKeyManager","apply","arguments","origin","setFocusOrigin","focus"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { QueryList } from '@angular/core';\nimport {\n    UP_ARROW,\n    DOWN_ARROW,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    TAB,\n    A,\n    Z,\n    ZERO,\n    NINE\n} from '@ptsecurity/cdk/keycodes';\nimport { Subject, Subscription } from 'rxjs';\nimport { debounceTime, filter, map, tap } from 'rxjs/operators';\n\n\n// This interface is for items that can be passed to a ListKeyManager.\n// tslint:disable-next-line naming-convention\nexport interface ListKeyManagerOption {\n    // Whether the option is disabled.\n    disabled?: boolean;\n\n    // Gets the label for this option.\n    getLabel?(): string;\n}\n\n/* tslint:disable:member-ordering */\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n    tabOut: Subject<void> = new Subject<void>();\n\n    /** Stream that emits whenever the active item of the list manager changes. */\n    change = new Subject<number>();\n\n    previousActiveItemIndex = -1;\n\n    // Index of the currently active item.\n    get activeItemIndex(): number {\n        return this._activeItemIndex;\n    }\n\n    private _activeItemIndex = -1;\n\n    // The active item.\n    get activeItem(): T | null {\n        return this._activeItem;\n    }\n\n    private _activeItem: T;\n\n    private wrap: boolean = false;\n    private letterKeyStream = new Subject<string>();\n    private typeaheadSubscription = Subscription.EMPTY;\n    private vertical = true;\n    private horizontal: 'ltr' | 'rtl' | null;\n\n    private scrollSize: number = 0;\n\n    // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n    private pressedLetters: string[] = [];\n\n    constructor(private _items: QueryList<T>) {\n        if (_items instanceof QueryList) {\n\n            _items.changes.subscribe((newItems: QueryList<T>) => {\n\n                if (this._activeItem) {\n                    const itemArray = newItems.toArray();\n                    const newIndex = itemArray.indexOf(this._activeItem);\n\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n\n    withScrollSize(scrollSize: number): this {\n        this.scrollSize = scrollSize;\n\n        return this;\n    }\n\n    /**\n     * Turns on wrapping mode, which ensures that the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     */\n\n    withWrap(): this {\n        this.wrap = true;\n\n        return this;\n    }\n\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled: boolean = true): this {\n        this.vertical = enabled;\n\n        return this;\n    }\n\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n        this.horizontal = direction;\n\n        return this;\n    }\n\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param searchLetterIndex letter index for incremental search, if is -1 search is disabled\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval: number = 200, searchLetterIndex: number = 0): this {\n        if (this._items.length && this._items.some((item) => typeof item.getLabel !== 'function')) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n\n        this.typeaheadSubscription.unsubscribe();\n\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters and convert those\n        // letters back into a string. Afterwards find the first item that starts with that string and select it.\n        this.typeaheadSubscription = this.letterKeyStream.pipe(\n            tap((keyCode) => this.pressedLetters.push(keyCode)),\n            debounceTime(debounceInterval),\n            filter(() => this.pressedLetters.length > 0),\n            map(() => this.pressedLetters.join(''))\n        ).subscribe((inputString) => {\n            if (searchLetterIndex === -1) {\n                this.pressedLetters = [];\n\n                return;\n            }\n\n            const items = this._items.toArray();\n\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                const index = (this._activeItemIndex + i) % items.length;\n                const item = items[index];\n\n                if (\n                    !item.disabled &&\n                    item.getLabel!().toUpperCase().trim().indexOf(inputString) === searchLetterIndex\n                ) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n\n            this.pressedLetters = [];\n        });\n\n        return this;\n    }\n\n    /**\n     * Sets the active item to the item at the index specified.\n     * @param index The index of the item to be set as active or item The item to be set as active.\n     */\n    setActiveItem(index: number | T): void;\n\n    /**\n     * Sets the active item to the item at the index specified.\n     * @param item The index of the item to be set as active.\n     */\n    setActiveItem(item: any): void {\n        this.previousActiveItemIndex = this._activeItemIndex;\n\n        this.updateActiveItem(item);\n\n        if (this._activeItemIndex !== this.previousActiveItemIndex) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    onKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n\n                return;\n\n            case DOWN_ARROW:\n                if (this.vertical) {\n                    this.setNextItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case UP_ARROW:\n                if (this.vertical) {\n                    this.setPreviousItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case RIGHT_ARROW:\n                if (this.horizontal === 'ltr') {\n                    this.setNextItemActive();\n                    break;\n                } else if (this.horizontal === 'rtl') {\n                    this.setPreviousItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case LEFT_ARROW:\n                if (this.horizontal === 'ltr') {\n                    this.setPreviousItemActive();\n                    break;\n                } else if (this.horizontal === 'rtl') {\n                    this.setNextItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            default:\n                // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                if (event.key && event.key.length === 1) {\n                    this.letterKeyStream.next(event.key.toLocaleUpperCase());\n                } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                    this.letterKeyStream.next(String.fromCharCode(keyCode));\n                }\n\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n\n        this.pressedLetters = [];\n        event.preventDefault();\n    }\n\n    // Sets the active item to the first enabled item in the list.\n    setFirstItemActive(): void {\n        this.setActiveItemByIndex(0, 1);\n    }\n\n    // Sets the active item to the last enabled item in the list.\n    setLastItemActive(): void {\n        this.setActiveItemByIndex(this._items.length - 1, -1);\n    }\n\n    // Sets the active item to the next enabled item in the list.\n    setNextItemActive(): void {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this.setActiveItemByDelta(1);\n    }\n\n    // Sets the active item to a previous enabled item in the list.\n    setPreviousItemActive(): void {\n        this._activeItemIndex < 0 && this.wrap ? this.setLastItemActive()\n            : this.setActiveItemByDelta(-1);\n    }\n\n    setNextPageItemActive(delta: number = this.scrollSize): void {\n        const nextItemIndex = this._activeItemIndex + delta;\n\n        if (nextItemIndex >= this._items.length) {\n            this.setLastItemActive();\n        } else {\n            this.setActiveItemByDelta(delta);\n        }\n    }\n\n    setPreviousPageItemActive(delta: number = this.scrollSize): void {\n        const nextItemIndex = this._activeItemIndex - delta;\n\n        if (nextItemIndex <= 0) {\n            this.setFirstItemActive();\n        } else {\n            this.setActiveItemByDelta(-delta);\n        }\n    }\n\n    /**\n     * Allows setting the active without any other effects.\n     * @param index Index of the item to be set as active.\n     */\n    updateActiveItem(index: number): void;\n\n    /**\n     * Allows setting the active item without any other effects.\n     * @param item Item to be set as active or index Index of the item to be set as active..\n     */\n    // tslint:disable-next-line:unified-signatures\n    updateActiveItem(item: number | T): void;\n\n    updateActiveItem(item: any): void {\n        const itemArray = this._items.toArray();\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n\n        this._activeItemIndex = index;\n        this._activeItem = itemArray[index];\n    }\n\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n    private skipPredicateFn = (item: T) => item.disabled;\n\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    private setActiveItemByDelta(delta: number): void {\n        this.wrap ? this.setActiveInWrapMode(delta) : this.setActiveInDefaultMode(delta);\n    }\n\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    private setActiveInWrapMode(delta: number): void {\n        const items = this.getItemsArray();\n\n        for (let i = 1; i <= items.length; i++) {\n            const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n            const item = items[index];\n\n            if (!this.skipPredicateFn(item)) {\n                this.setActiveItem(index);\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    private setActiveInDefaultMode(delta: number): void {\n        this.setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    private setActiveItemByIndex(index: number, fallbackDelta: number): void {\n        const items = this.getItemsArray();\n\n        if (!items[index]) { return; }\n\n        let curIndex = index;\n        while (this.skipPredicateFn(items[curIndex])) {\n            curIndex += fallbackDelta;\n\n            if (!items[curIndex]) { return; }\n        }\n\n        this.setActiveItem(curIndex);\n    }\n\n    /** Returns the items as an array. */\n    private getItemsArray(): T[] {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n\n/* tslint:enable:member-ordering */\n","\nimport { ListKeyManager, ListKeyManagerOption } from './list-key-manager';\n\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\n// tslint:disable-next-line naming-convention\nexport interface Highlightable extends ListKeyManagerOption {\n    // Applies the styles for an active item to this item.\n    setActiveStyles(): void;\n\n    // Applies the styles for an inactive item to this item.\n    setInactiveStyles(): void;\n}\n\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<Highlightable & T> {\n\n    /**\n     * Sets the active item to the item at the specified index and adds the\n     * active styles to the newly active item. Also removes active styles\n     * from the previously active item.\n     * @param index Index of the item to be set as active.\n     */\n    setActiveItem(index: number): void;\n\n    /**\n     * Sets the active item to the item to the specified one and adds the\n     * active styles to the it. Also removes active styles from the\n     * previously active item.\n     * @param item Item to be set as active.\n     */\n    setActiveItem(item: T): void;\n\n    /**\n     * This method sets the active item to the item at the specified index.\n     * It also adds active styles to the newly active item and removes active\n     * styles from the previously active item.\n     */\n    setActiveItem(index: any): void {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n\n        super.setActiveItem(index);\n\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n","import { FocusOrigin } from '@angular/cdk/a11y';\n\nimport { ListKeyManager, ListKeyManagerOption } from './list-key-manager';\n\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply it's label.\n */\nexport interface IFocusableOption extends ListKeyManagerOption {\n    // Focuses the `FocusableOption`. */\n    focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<IFocusableOption & T> {\n    private origin: FocusOrigin = 'program';\n\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin: FocusOrigin): this {\n        this.origin = origin;\n\n        return this;\n    }\n\n    /**\n     * Sets the active item or index to the item that is specified and focuses it.\n     * @param item Item to be set as active.\n     */\n    setActiveItem(item: number | T): void;\n\n    setActiveItem(item: any): void {\n        super.setActiveItem(item);\n\n        if (this.activeItem) {\n            this.activeItem.focus(this.origin);\n        }\n    }\n}\n"]}