{"version":3,"file":"cdk-bidi.umd.min.js","sources":["../../src/cdk/bidi/dir-document-token.ts","../../src/cdk/bidi/directionality.ts","../../src/cdk/bidi/dir.ts","../../src/cdk/bidi/bidi-module.ts"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport { inject, InjectionToken } from '@angular/core';\n\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nexport const DIR_DOCUMENT = new InjectionToken<Document>('cdk-dir-doc', {\n    providedIn: 'root',\n    factory: DIR_DOCUMENT_FACTORY\n});\n\n/** @docs-private */\nexport function DIR_DOCUMENT_FACTORY(): Document {\n    return inject(DOCUMENT);\n}\n","import { EventEmitter, Inject, Injectable, Optional, OnDestroy } from '@angular/core';\n\nimport {DIR_DOCUMENT} from './dir-document-token';\n\n\nexport type Direction = 'ltr' | 'rtl';\n\n\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\n@Injectable({providedIn: 'root'})\nexport class Directionality implements OnDestroy {\n  /** The current 'ltr' or 'rtl' value. */\n  readonly value: Direction = 'ltr';\n\n  /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n  readonly change = new EventEmitter<Direction>();\n\n  constructor(@Optional() @Inject(DIR_DOCUMENT) _document?: any) {\n    if (_document) {\n      // TODO: handle 'auto' value -\n      // We still need to account for dir=\"auto\".\n      // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\n      // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\n      const bodyDir = _document.body ? _document.body.dir : null;\n      const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n      this.value = (bodyDir || htmlDir || 'ltr') as Direction;\n    }\n  }\n\n  ngOnDestroy() {\n    this.change.complete();\n  }\n}\n","import {\n    Directive,\n    Output,\n    Input,\n    EventEmitter,\n    AfterContentInit,\n    OnDestroy\n} from '@angular/core';\n\nimport { Direction, Directionality } from './directionality';\n\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\n@Directive({\n    selector: '[dir]',\n    providers: [{provide: Directionality, useExisting: Dir}],\n    host: {'[dir]': 'dir'},\n    exportAs: 'dir'\n})\nexport class Dir implements Directionality, AfterContentInit, OnDestroy {\n    _dir: Direction = 'ltr';\n\n    /** Event emitted when the direction changes. */\n    @Output('dirChange') change = new EventEmitter<Direction>();\n\n    /** @docs-private */\n    @Input()\n    get dir(): Direction {\n        return this._dir;\n    }\n\n    set dir(v: Direction) {\n        const old = this._dir;\n        this._dir = v;\n\n        if (old !== this._dir && this._isInitialized) {\n            this.change.emit(this._dir);\n        }\n    }\n\n    /** Current layout direction of the element. */\n    get value(): Direction {\n        return this.dir;\n    }\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Initialize once default value has been set. */\n    ngAfterContentInit() {\n        this._isInitialized = true;\n    }\n\n    ngOnDestroy() {\n        this.change.complete();\n    }\n}\n\n","import { NgModule } from '@angular/core';\n\nimport { Dir } from './dir';\n\n\n@NgModule({\n    exports: [Dir],\n    declarations: [Dir]\n})\nexport class BidiModule {\n}\n"],"names":["DIR_DOCUMENT_FACTORY","inject","DOCUMENT","DIR_DOCUMENT","InjectionToken","providedIn","factory","Directionality","_document","this","value","change","EventEmitter","bodyDir","body","dir","htmlDir","documentElement","prototype","ngOnDestroy","complete","type","Injectable","args","undefined","decorators","Optional","Inject","_dir","_isInitialized","Object","defineProperty","Dir","set","v","old","emit","ngAfterContentInit","Directive","selector","providers","provide","useExisting","host","[dir]","exportAs","Output","Input","NgModule","exports","declarations","BidiModule"],"mappings":";;;;;;0WAyBA,SAAAA,KACI,MAAOC,GAAAA,OAAOC,EAAAA,UAPlB,GAAaC,GAAe,GAAIC,GAAAA,eAAyB,eACrDC,WAAY,OACZC,QAASN,iBCDX,QAAFO,GAAgDC,GAC5C,GANJC,KAAAC,MAA8B,MAG9BD,KAAAE,OAAoB,GAAIC,GAAAA,aAGhBJ,EAAW,CAKb,GAAMK,GAAUL,EAAUM,KAAON,EAAUM,KAAKC,IAAM,KAChDC,EAAUR,EAAUS,gBAAkBT,EAAUS,gBAAgBF,IAAM,IAC5EN,MAAKC,MAASG,GAAWG,GAAW,OA5B1C,MAgCET,GAAFW,UAAAC,YAAE,WACEV,KAAKE,OAAOS,2BArBhBC,KAACC,EAAAA,WAADC,OAAalB,WAAY,+CAQzBgB,SAAAG,GAAAC,aAAAJ,KAAeK,EAAAA,WAAfL,KAA2BM,EAAAA,OAA3BJ,MAAkCpB,0HApBlCI,+BCyBAE,KAAAmB,KAAsB,MAGtBnB,KAAAE,OAAkC,GAAIC,GAAAA,aAuBtCH,KAAAoB,gBAAsC,EAnDtC,MAgCAC,QAAAC,eAAQC,EAARd,UAAA,sBACQ,MAAOT,MAAKmB,MAGpBK,IAAI,SAAQC,GACJ,GAAMC,GAAM1B,KAAKmB,IACjBnB,MAAKmB,KAAOM,EAERC,IAAQ1B,KAAKmB,MAAQnB,KAAKoB,gBAC1BpB,KAAKE,OAAOyB,KAAK3B,KAAKmB,uCAK9BE,OAAJC,eAAQC,EAARd,UAAA,aAAI,WACI,MAAOT,MAAKM,qCAOhBiB,EAAJd,UAAAmB,mBAAI,WACI5B,KAAKoB,gBAAiB,GAG1BG,EAAJd,UAAAC,YAAI,WACIV,KAAKE,OAAOS,2BAzCpBC,KAACiB,EAAAA,UAADf,OACIgB,SAAU,QACVC,YAAaC,QAASlC,EAAgBmC,YAAaV,IACnDW,MAAOC,QAAS,OAChBC,SAAU,4BAMdlC,SAAAU,KAAKyB,EAAAA,OAALvB,MAAY,eAGZR,MAAAM,KAAK0B,EAAAA,SA/BLf,gCCAA,sBAKAX,KAAC2B,EAAAA,SAADzB,OACI0B,SAAUjB,GACVkB,cAAelB,OAPnBmB"}