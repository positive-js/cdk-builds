{"version":3,"file":"cdk-bidi.umd.min.js","sources":["../../packages/cdk/bidi/dir-document-token.ts","../../packages/cdk/bidi/directionality.ts","../../packages/cdk/bidi/dir.ts","../../packages/cdk/bidi/bidi-module.ts"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport { inject, InjectionToken } from '@angular/core';\n\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nexport const DIR_DOCUMENT = new InjectionToken<Document>('cdk-dir-doc', {\n    providedIn: 'root',\n    factory: DIR_DOCUMENT_FACTORY\n});\n\n/** @docs-private */\nexport function DIR_DOCUMENT_FACTORY(): Document {\n    return inject(DOCUMENT);\n}\n","import { EventEmitter, Inject, Injectable, Optional, OnDestroy } from '@angular/core';\n\nimport { DIR_DOCUMENT } from './dir-document-token';\n\n\nexport type Direction = 'ltr' | 'rtl';\n\n\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\n@Injectable({providedIn: 'root'})\nexport class Directionality implements OnDestroy {\n    /** The current 'ltr' or 'rtl' value. */\n    readonly value: Direction = 'ltr';\n\n    /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n    readonly change = new EventEmitter<Direction>();\n\n    constructor(@Optional() @Inject(DIR_DOCUMENT) _document?: any) {\n        if (_document) {\n            const bodyDir = _document.body ? _document.body.dir : null;\n            const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n            const value = bodyDir || htmlDir;\n            this.value = (value === 'ltr' || value === 'rtl') ? value : 'ltr';\n        }\n    }\n\n    ngOnDestroy() {\n        this.change.complete();\n    }\n}\n","import {\n    Directive,\n    Output,\n    Input,\n    EventEmitter,\n    AfterContentInit,\n    OnDestroy\n} from '@angular/core';\n\nimport { Direction, Directionality } from './directionality';\n\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\n@Directive({\n    selector: '[dir]',\n    providers: [{provide: Directionality, useExisting: Dir}],\n    host: {'[dir]': 'dir'},\n    exportAs: 'dir'\n})\nexport class Dir implements Directionality, AfterContentInit, OnDestroy {\n    _dir: Direction = 'ltr';\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Event emitted when the direction changes. */\n    @Output('dirChange')\n    change = new EventEmitter<Direction>();\n\n    /** @docs-private */\n    @Input()\n    get dir(): Direction {\n        return this._dir;\n    }\n\n    set dir(value: Direction) {\n        const old = this._dir;\n        this._dir = (value === 'ltr' || value === 'rtl') ? value : 'ltr';\n\n        if (old !== this._dir && this._isInitialized) {\n            this.change.emit(this._dir);\n        }\n    }\n\n    /** Current layout direction of the element. */\n    get value(): Direction { return this.dir; }\n\n    /** Initialize once default value has been set. */\n    ngAfterContentInit() {\n        this._isInitialized = true;\n    }\n\n    ngOnDestroy() {\n        this.change.complete();\n    }\n}\n\n","import { NgModule } from '@angular/core';\n\nimport { Dir } from './dir';\n\n\n@NgModule({\n    exports: [Dir],\n    declarations: [Dir]\n})\nexport class BidiModule {\n}\n"],"names":["DIR_DOCUMENT_FACTORY","inject","DOCUMENT","DIR_DOCUMENT","InjectionToken","providedIn","factory","Directionality","_document","this","value","change","EventEmitter","bodyDir","body","dir","htmlDir","documentElement","prototype","ngOnDestroy","complete","type","Injectable","args","undefined","decorators","Optional","Inject","Dir","_dir","_isInitialized","Object","defineProperty","old","emit","ngAfterContentInit","Directive","selector","providers","provide","useExisting","host","[dir]","exportAs","Output","Input","BidiModule","NgModule","exports","declarations"],"mappings":";;;;;;0WAyBA,SAAgBA,KACZ,MAAOC,GAAAA,OAAOC,EAAAA,UAPlB,GAAaC,GAAe,GAAIC,GAAAA,eAAyB,eACrDC,WAAY,OACZC,QAASN,ICTbO,EAAA,WAQI,QAAJA,GAAkDC,GAC1C,GANKC,KAAbC,MAAgC,MAGnBD,KAAbE,OAAsB,GAAIC,GAAAA,aAGdJ,EAAW,CACvB,GAAkBK,GAAUL,EAAUM,KAAON,EAAUM,KAAKC,IAAM,KAChDC,EAAUR,EAAUS,gBAAkBT,EAAUS,gBAAgBF,IAAM,KACtEL,EAAQG,GAAWG,CACzBP,MAAKC,MAAmB,QAAVA,GAA6B,QAAVA,EAAmBA,EAAQ,OAzBxE,MA6BIH,GAAJW,UAAAC,YAAI,WACIV,KAAKE,OAAOS,2BAlBpBC,KAACC,EAAAA,WAADC,OAAalB,WAAY,+CAQzBgB,SAAAG,GAAAC,aAAAJ,KAAiBK,EAAAA,WAAjBL,KAA6BM,EAAAA,OAA7BJ,MAAoCpB,0HApBpCI,KCkBAqB,EAAA,WAAA,QAAAA,KAOInB,KAAJoB,KAAsB,MAGVpB,KAAZqB,gBAAsC,EAIlCrB,KAAJE,OAAa,GAAIC,GAAAA,aA4BjB,MAzBImB,QAAJC,eACQJ,EADRV,UAAA,WAAI,WAEI,MAAOT,MAAKoB,UAGhB,SAAQnB,GACZ,GAAcuB,GAAMxB,KAAKoB,IACjBpB,MAAKoB,KAAkB,QAAVnB,GAA6B,QAAVA,EAAmBA,EAAQ,MAEvDuB,IAAQxB,KAAKoB,MAAQpB,KAAKqB,gBAC1BrB,KAAKE,OAAOuB,KAAKzB,KAAKoB,uCAK9BE,OAAJC,eAAQJ,EAARV,UAAA,aAAI,WAAyB,MAAOT,MAAKM,qCAGrCa,EAAJV,UAAAiB,mBAAI,WACI1B,KAAKqB,gBAAiB,GAG1BF,EAAJV,UAAAC,YAAI,WACIV,KAAKE,OAAOS,2BAxCpBC,KAACe,EAAAA,UAADb,OACIc,SAAU,QACVC,YAAaC,QAAShC,EAAgBiC,YAAaZ,IACnDa,MAAOC,QAAS,OAChBC,SAAU,4BASdhC,SAAAU,KAAKuB,EAAAA,OAALrB,MAAY,eAIZR,MAAAM,KAAKwB,EAAAA,SAyBLjB,KCvDAkB,EAAA,WAAA,QAAAA,MAKA,sBALAzB,KAAC0B,EAAAA,SAADxB,OACIyB,SAAUpB,GACVqB,cAAerB,OAGnBkB"}