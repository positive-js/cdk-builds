{"version":3,"file":"cdk-accordion.umd.min.js","sources":["../../packages/cdk/accordion/accordion.ts","../../packages/cdk/accordion/accordion-item.ts","../../packages/cdk/accordion/accordion-module.ts"],"sourcesContent":["import { Directive, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { Subject } from 'rxjs';\n\n\n/** Used to generate unique ID for each accordion. */\nlet nextId = 0;\n\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n@Directive({\n    selector: 'cdk-accordion, [cdkAccordion]',\n    exportAs: 'cdkAccordion'\n})\nexport class CdkAccordion implements OnDestroy, OnChanges {\n    /** Emits when the state of the accordion changes */\n    readonly stateChanges = new Subject<SimpleChanges>();\n\n    /** Stream that emits true/false when openAll/closeAll is triggered. */\n    readonly openCloseAllActions: Subject<boolean> = new Subject<boolean>();\n\n    /** A readonly id value to use for unique selection coordination. */\n    readonly id = `cdk-accordion-${nextId++}`;\n\n    /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n    @Input()\n    get multi(): boolean {\n        return this._multi;\n    }\n\n    set multi(multi: boolean) {\n        this._multi = coerceBooleanProperty(multi);\n    }\n\n    private _multi: boolean = false;\n\n    /** Opens all enabled accordion items in an accordion where multi is enabled. */\n    openAll(): void {\n        this.openCloseAll(true);\n    }\n\n    /** Closes all enabled accordion items in an accordion where multi is enabled. */\n    closeAll(): void {\n        this.openCloseAll(false);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.stateChanges.next(changes);\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    private openCloseAll(expanded: boolean): void {\n        if (this.multi) {\n            this.openCloseAllActions.next(expanded);\n        }\n    }\n}\n","import {\n    Output,\n    Directive,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    Optional,\n    ChangeDetectorRef,\n    SkipSelf\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@ptsecurity/cdk/collections';\nimport { Subscription } from 'rxjs';\n\nimport { CdkAccordion } from './accordion';\n\n\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n@Directive({\n    selector: 'cdk-accordion-item, [cdkAccordionItem]',\n    exportAs: 'cdkAccordionItem',\n    providers: [\n        // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n        // to the same accordion.\n        {provide: CdkAccordion, useValue: undefined}\n    ]\n})\nexport class CdkAccordionItem implements OnDestroy {\n\n    /** Whether the AccordionItem is expanded. */\n    @Input()\n    get expanded(): any {\n        return this._expanded;\n    }\n\n    set expanded(expanded: any) {\n        // tslint:disable:no-parameter-reassignment\n        expanded = coerceBooleanProperty(expanded);\n\n        // Only emit events and update the internal value if the value changes.\n        if (this._expanded !== expanded) {\n            this._expanded = expanded;\n            this.expandedChange.emit(expanded);\n\n            if (expanded) {\n                this.opened.emit();\n                /**\n                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                 * the name value is the id of the accordion.\n                 */\n                const accordionId = this.accordion ? this.accordion.id : this.id;\n                this._expansionDispatcher.notify(this.id, accordionId);\n            } else {\n                this.closed.emit();\n            }\n\n            // Ensures that the animation will run when the value is set outside of an `@Input`.\n            // This includes cases like the open, close and toggle methods.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    /** Whether the AccordionItem is disabled. */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(disabled: any) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n    /** Event emitted every time the AccordionItem is closed. */\n    @Output() closed: EventEmitter<void> = new EventEmitter<void>();\n    /** Event emitted every time the AccordionItem is opened. */\n    @Output() opened: EventEmitter<void> = new EventEmitter<void>();\n    /** Event emitted when the AccordionItem is destroyed. */\n    @Output() destroyed: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Emits whenever the expanded state of the accordion changes.\n     * Primarily used to facilitate two-way binding.\n     * @docs-private\n     */\n    @Output() expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The unique AccordionItem id. */\n    readonly id: string = `cdk-accordion-child-${nextId++}`;\n    /** Subscription to openAll/closeAll events. */\n    private openCloseAllSubscription = Subscription.EMPTY;\n\n    private _expanded = false;\n\n    private _disabled: boolean = false;\n\n    constructor(@Optional() @SkipSelf() public accordion: CdkAccordion,\n                private _changeDetectorRef: ChangeDetectorRef,\n                protected _expansionDispatcher: UniqueSelectionDispatcher) {\n\n        this.removeUniqueSelectionListener =\n            _expansionDispatcher.listen((id: string, accordionId: string) => {\n                if (this.accordion && !this.accordion.multi &&\n                    this.accordion.id === accordionId && this.id !== id) {\n                    this.expanded = false;\n                }\n            });\n\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this.openCloseAllSubscription = this.subscribeToOpenCloseAllActions();\n        }\n    }\n\n    /** Emits an event for the accordion item being destroyed. */\n    ngOnDestroy() {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this.removeUniqueSelectionListener();\n        this.openCloseAllSubscription.unsubscribe();\n    }\n\n    /** Toggles the expanded state of the accordion item. */\n    toggle(): void {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    }\n\n    /** Sets the expanded state of the accordion item to false. */\n    close(): void {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    }\n\n    /** Sets the expanded state of the accordion item to true. */\n    open(): void {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    }\n\n    /** Unregister function for _expansionDispatcher. */\n    // tslint:disable:no-empty\n    private removeUniqueSelectionListener: () => void = () => {};\n\n    private subscribeToOpenCloseAllActions(): Subscription {\n        return this.accordion.openCloseAllActions.subscribe((expanded) => {\n            // Only change expanded state if item is enabled\n            if (!this.disabled) {\n                this.expanded = expanded;\n            }\n        });\n    }\n}\n","import { NgModule } from '@angular/core';\n\nimport { CdkAccordion } from './accordion';\nimport { CdkAccordionItem } from './accordion-item';\n\n\n@NgModule({\n  exports: [\n      CdkAccordion, CdkAccordionItem\n  ],\n  declarations: [\n      CdkAccordion, CdkAccordionItem\n  ]\n})\nexport class CdkAccordionModule {}\n"],"names":["nextId","CdkAccordion","this","stateChanges","Subject","openCloseAllActions","id","_multi","Object","defineProperty","prototype","multi","coerceBooleanProperty","openAll","openCloseAll","closeAll","ngOnChanges","changes","next","ngOnDestroy","complete","expanded","type","Directive","args","selector","exportAs","Input","CdkAccordionItem","accordion","_changeDetectorRef","_expansionDispatcher","_this","closed","EventEmitter","opened","destroyed","expandedChange","openCloseAllSubscription","Subscription","EMPTY","_expanded","_disabled","removeUniqueSelectionListener","listen","accordionId","subscribeToOpenCloseAllActions","emit","notify","markForCheck","disabled","unsubscribe","toggle","close","open","subscribe","providers","provide","useValue","undefined","decorators","Optional","SkipSelf","ChangeDetectorRef","UniqueSelectionDispatcher","Output","CdkAccordionModule","NgModule","exports","declarations"],"mappings":";;;;;;wgBAMA,IAAIA,GAAS,EAKbC,EAAA,WAAA,QAAAA,KAMaC,KAAbC,aAA4B,GAAIC,GAAAA,QAGnBF,KAAbG,oBAAqD,GAAID,GAAAA,QAG5CF,KAAbI,GAAkB,iBAAiBN,IAYvBE,KAAZK,QAA8B,EAyB9B,MAlCIC,QAAJC,eACQR,EADRS,UAAA,aAAI,WAEI,MAAOR,MAAKK,YAGhB,SAAUI,GACNT,KAAKK,OAASK,EAAAA,sBAAsBD,oCAMxCV,EAAJS,UAAAG,QAAI,WACIX,KAAKY,cAAa,IAItBb,EAAJS,UAAAK,SAAI,WACIb,KAAKY,cAAa,IAGtBb,EAAJS,UAAAM,YAAI,SAAYC,GACRf,KAAKC,aAAae,KAAKD,IAG3BhB,EAAJS,UAAAS,YAAI,WACIjB,KAAKC,aAAaiB,YAGdnB,EAAZS,UAAAI,aAAI,SAAqBO,GACbnB,KAAKS,OACLT,KAAKG,oBAAoBa,KAAKG,mBA9C1CC,KAACC,EAAAA,UAADC,OACIC,SAAU,gCACVC,SAAU,qCAadf,QAAAW,KAAKK,EAAAA,SAkCL1B,KC1CID,EAAS,EAMb4B,EAAA,WA4EI,QAAJA,GAA+CC,EACvBC,EACEC,GAFtB,GAAJC,GAAA9B,IAA+CA,MAA/C2B,UAA+CA,EACvB3B,KAAxB4B,mBAAwBA,EACE5B,KAA1B6B,qBAA0BA,EAxBZ7B,KAAd+B,OAA2C,GAAIC,GAAAA,aAEjChC,KAAdiC,OAA2C,GAAID,GAAAA,aAEjChC,KAAdkC,UAA8C,GAAIF,GAAAA,aAOpChC,KAAdmC,eAAsD,GAAIH,GAAAA,aAG7ChC,KAAbI,GAA0B,uBAAuBN,IAErCE,KAAZoC,yBAAuCC,EAAAA,aAAaC,MAExCtC,KAAZuC,WAAwB,EAEZvC,KAAZwC,WAAiC,EAqDrBxC,KAAZyC,8BAAwD,aA/ChDzC,KAAKyC,8BACDZ,EAAqBa,OAAO,SAACtC,EAAYuC,GACjCb,EAAKH,YAAcG,EAAKH,UAAUlB,OAClCqB,EAAKH,UAAUvB,KAAOuC,GAAeb,EAAK1B,KAAOA,IACjD0B,EAAKX,UAAW,KAKxBnB,KAAK2B,YACL3B,KAAKoC,yBAA2BpC,KAAK4C,kCA+CjD,MA7HItC,QAAJC,eACQmB,EADRlB,UAAA,gBAAI,WAEI,MAAOR,MAAKuC,eAGhB,SAAapB,GAKT,GAHAA,EAAWT,EAAAA,sBAAsBS,GAG7BnB,KAAKuC,YAAcpB,EAAU,CAI7B,GAHAnB,KAAKuC,UAAYpB,EACjBnB,KAAKmC,eAAeU,KAAK1B,GAErBA,EAAU,CACVnB,KAAKiC,OAAOY,MAK5B,IAAsBF,GAAc3C,KAAK2B,UAAY3B,KAAK2B,UAAUvB,GAAKJ,KAAKI,EAC9DJ,MAAK6B,qBAAqBiB,OAAO9C,KAAKI,GAAIuC,OAE1C3C,MAAK+B,OAAOc,MAKhB7C,MAAK4B,mBAAmBmB,iDAKhCzC,OAAJC,eACQmB,EADRlB,UAAA,gBAAI,WAEI,MAAOR,MAAKwC,eAGhB,SAAaQ,GACThD,KAAKwC,UAAY9B,EAAAA,sBAAsBsC,oCA4C3CtB,EAAJlB,UAAAS,YAAI,WACIjB,KAAKiC,OAAOf,WACZlB,KAAK+B,OAAOb,WACZlB,KAAKkC,UAAUW,OACf7C,KAAKkC,UAAUhB,WACflB,KAAKyC,gCACLzC,KAAKoC,yBAAyBa,eAIlCvB,EAAJlB,UAAA0C,OAAI,WACSlD,KAAKgD,WACNhD,KAAKmB,UAAYnB,KAAKmB,WAK9BO,EAAJlB,UAAA2C,MAAI,WACSnD,KAAKgD,WACNhD,KAAKmB,UAAW,IAKxBO,EAAJlB,UAAA4C,KAAI,WACSpD,KAAKgD,WACNhD,KAAKmB,UAAW,IAQhBO,EAAZlB,UAAAoC,+BAAI,WAAA,GAAJd,GAAA9B,IACQ,OAAOA,MAAK2B,UAAUxB,oBAAoBkD,UAAU,SAAClC,GAE5CW,EAAKkB,WACNlB,EAAKX,SAAWA,qBArIhCC,KAACC,EAAAA,UAADC,OACIC,SAAU,yCACVC,SAAU,mBACV8B,YAGKC,QAASxD,EAAcyD,aAAUC,6CAhB1CrC,KAASrB,EAAT2D,aAAAtC,KAsFiBuC,EAAAA,WAtFjBvC,KAsF6BwC,EAAAA,aA7F7BxC,KAAIyC,EAAAA,oBAIJzC,KAAS0C,EAAAA,+CAyBT3C,WAAAC,KAAKK,EAAAA,QAiCLuB,WAAA5B,KAAKK,EAAAA,QASLM,SAAAX,KAAK2C,EAAAA,SAEL9B,SAAAb,KAAK2C,EAAAA,SAEL7B,YAAAd,KAAK2C,EAAAA,SAOL5B,iBAAAf,KAAK2C,EAAAA,UAwELrC,KC3JAsC,EAAA,WAAA,QAAAA,MAQiC,sBARjC5C,KAAC6C,EAAAA,SAAD3C,OACE4C,SACInE,EAAc2B,GAElByC,cACIpE,EAAc2B,OAGpBsC"}