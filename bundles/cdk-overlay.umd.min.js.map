{"version":3,"file":"cdk-overlay.umd.min.js","sources":["../../packages/cdk/overlay/overlay.ts","../../packages/cdk/overlay/overlay-directives.ts","../../packages/cdk/overlay/overlay-module.ts","../../packages/cdk/overlay/fullscreen-overlay-container.ts","../../node_modules/tslib/tslib.es6.js","../../packages/cdk/overlay/position/connected-position.ts","../../packages/cdk/overlay/scroll/scroll-strategy.ts","../../packages/cdk/overlay/position/scroll-clip.ts","../../packages/cdk/overlay/keyboard/overlay-keyboard-dispatcher.ts","../../packages/cdk/overlay/overlay-container.ts","../../packages/cdk/overlay/position/flexible-connected-position-strategy.ts","../../packages/cdk/overlay/scroll/noop-scroll-strategy.ts","../../packages/cdk/overlay/overlay-config.ts","../../packages/cdk/overlay/scroll/block-scroll-strategy.ts","../../packages/cdk/overlay/scroll/close-scroll-strategy.ts","../../packages/cdk/overlay/scroll/reposition-scroll-strategy.ts","../../packages/cdk/overlay/scroll/scroll-strategy-options.ts","../../packages/cdk/overlay/overlay-ref.ts","../../packages/cdk/overlay/position/connected-position-strategy.ts","../../packages/cdk/overlay/position/global-position-strategy.ts","../../packages/cdk/overlay/position/overlay-position-builder.ts"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport {\n    ApplicationRef,\n    ComponentFactoryResolver,\n    Inject,\n    Injectable,\n    Injector,\n    NgZone\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DomPortalOutlet } from '@ptsecurity/cdk/portal';\n\nimport { OverlayKeyboardDispatcher } from './keyboard/overlay-keyboard-dispatcher';\nimport { OverlayConfig } from './overlay-config';\nimport { OverlayContainer } from './overlay-container';\nimport { OverlayRef } from './overlay-ref';\nimport { OverlayPositionBuilder } from './position/overlay-position-builder';\nimport { ScrollStrategyOptions } from './scroll/index';\n\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\n// it needs is different based on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n@Injectable()\nexport class Overlay {\n    private _appRef: ApplicationRef;\n\n    constructor(\n        /** Scrolling strategies that can be used when creating an overlay. */\n        public scrollStrategies: ScrollStrategyOptions,\n        private _overlayContainer: OverlayContainer,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _positionBuilder: OverlayPositionBuilder,\n        private _keyboardDispatcher: OverlayKeyboardDispatcher,\n        private _injector: Injector,\n        private _ngZone: NgZone,\n        @Inject(DOCUMENT) private _document: any,\n        private _directionality: Directionality\n    ) {}\n\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config?: OverlayConfig): OverlayRef {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone,\n            this._keyboardDispatcher, this._document);\n    }\n\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position(): OverlayPositionBuilder {\n        return this._positionBuilder;\n    }\n\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    private _createPaneElement(host: HTMLElement): HTMLElement {\n        const pane = this._document.createElement('div');\n\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n\n        return pane;\n    }\n\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    private _createHostElement(): HTMLElement {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n\n        return host;\n    }\n\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\n        }\n\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n    }\n}\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    ViewContainerRef\n} from '@angular/core';\nimport { Direction, Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport { Subscription } from 'rxjs';\n\nimport { Overlay } from './overlay';\nimport { OverlayConfig } from './overlay-config';\nimport { OverlayRef } from './overlay-ref';\nimport { ConnectedOverlayPositionChange } from './position/connected-position';\nimport {\n    IConnectedPosition,\n    FlexibleConnectedPositionStrategy\n} from './position/flexible-connected-position-strategy';\nimport {\n    RepositionScrollStrategy,\n    IRepositionScrollStrategyConfig,\n    IScrollStrategy\n} from './scroll/index';\n\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList: IConnectedPosition[] = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('cdk-connected-overlay-scroll-strategy');\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay: Overlay):\n    () => IScrollStrategy {\n    return (config?: IRepositionScrollStrategyConfig) => overlay.scrollStrategies.reposition(config);\n}\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n@Directive({\n    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n    exportAs: 'cdkOverlayOrigin'\n})\nexport class CdkOverlayOrigin {\n    constructor(\n        /** Reference to the element on which the directive is applied. */\n        public elementRef: ElementRef) {\n    }\n}\n\n\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n@Directive({\n    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n    exportAs: 'cdkConnectedOverlay'\n})\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\n    /** Origin for the connected overlay. */\n    @Input('cdkConnectedOverlayOrigin') origin: CdkOverlayOrigin;\n\n    /** Registered connected position pairs. */\n    @Input('cdkConnectedOverlayPositions') positions: IConnectedPosition[];\n\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    @Input('cdkConnectedOverlayOffsetX')\n    get offsetX(): number {\n        return this._offsetX;\n    }\n\n    set offsetX(offsetX: number) {\n        this._offsetX = offsetX;\n\n        if (this._position) {\n            this._setPositions(this._position);\n        }\n    }\n\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    @Input('cdkConnectedOverlayOffsetY')\n    get offsetY() {\n        return this._offsetY;\n    }\n\n    set offsetY(offsetY: number) {\n        this._offsetY = offsetY;\n\n        if (this._position) {\n            this._setPositions(this._position);\n        }\n    }\n\n    /** The width of the overlay panel. */\n    @Input('cdkConnectedOverlayWidth') width: number | string;\n\n    /** The height of the overlay panel. */\n    @Input('cdkConnectedOverlayHeight') height: number | string;\n\n    /** The min width of the overlay panel. */\n    @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\n\n    /** The min height of the overlay panel. */\n    @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\n\n    /** The custom class to be set on the backdrop element. */\n    @Input('cdkConnectedOverlayBackdropClass') backdropClass: string;\n\n    /** Margin between the overlay and the viewport edges. */\n    @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\n\n    /** Strategy to be used when handling scroll events while the overlay is open. */\n    @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: IScrollStrategy =\n        this._scrollStrategy();\n\n    /** Whether the overlay is open. */\n    @Input('cdkConnectedOverlayOpen') open: boolean = false;\n\n    /** Whether or not the overlay should attach a backdrop. */\n    @Input('cdkConnectedOverlayHasBackdrop')\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n\n    set hasBackdrop(value: any) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n\n    /** Whether or not the overlay should be locked when scrolling. */\n    @Input('cdkConnectedOverlayLockPosition')\n    get lockPosition() {\n        return this._lockPosition;\n    }\n\n    set lockPosition(value: any) {\n        this._lockPosition = coerceBooleanProperty(value);\n    }\n\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    @Input('cdkConnectedOverlayFlexibleDimensions')\n    get flexibleDiemsions() {\n        return this._flexibleDimensions;\n    }\n\n    set flexibleDiemsions(value: boolean) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    @Input('cdkConnectedOverlayGrowAfterOpen')\n    get growAfterOpen() {\n        return this._growAfterOpen;\n    }\n\n    set growAfterOpen(value: boolean) {\n        this._growAfterOpen = coerceBooleanProperty(value);\n    }\n\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    @Input('cdkConnectedOverlayPush')\n    get push() {\n        return this._push;\n    }\n\n    set push(value: boolean) {\n        this._push = coerceBooleanProperty(value);\n    }\n\n    /** Event emitted when the backdrop is clicked. */\n    @Output() backdropClick = new EventEmitter<MouseEvent>();\n\n    /** Event emitted when the position has changed. */\n    @Output() positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n\n    /** Event emitted when the overlay has been attached. */\n    @Output() attach = new EventEmitter<void>();\n\n    /** Event emitted when the overlay has been detached. */\n    @Output() detach = new EventEmitter<void>();\n\n    private _overlayRef: OverlayRef;\n    private _templatePortal: TemplatePortal;\n    private _hasBackdrop = false;\n    private _lockPosition = false;\n    private _growAfterOpen = false;\n    private _flexibleDimensions = false;\n    private _push = false;\n    private _backdropSubscription = Subscription.EMPTY;\n    private _offsetX: number;\n    private _offsetY: number;\n    private _position: FlexibleConnectedPositionStrategy;\n\n    constructor(\n        private _overlay: Overlay,\n        templateRef: TemplateRef<any>,\n        viewContainerRef: ViewContainerRef,\n        @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) private _scrollStrategy,\n        @Optional() private _dir: Directionality\n    ) {\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    }\n\n    /** The associated overlay reference. */\n    get overlayRef(): OverlayRef {\n        return this._overlayRef;\n    }\n\n    /** The element's layout direction. */\n    get dir(): Direction {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n\n    ngOnDestroy() {\n        this._destroyOverlay();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this._position) {\n            if (changes['positions']) { //tslint:disable-line\n                this._position.withPositions(this.positions);\n            }\n\n            if (changes['lockPosition']) { //tslint:disable-line\n                this._position.withLockedPosition(this.lockPosition);\n            }\n\n            if (changes['origin']) { //tslint:disable-line\n                this._position.setOrigin(this.origin.elementRef);\n\n                if (this.open) {\n                    this._position.apply();\n                }\n            }\n        }\n\n        if (changes['open']) { //tslint:disable-line\n            this.open ? this._attachOverlay() : this._detachOverlay(); //tslint:disable-line\n        }\n    }\n\n    /** Creates an overlay */\n    private _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n\n        this._overlayRef = this._overlay.create(this._buildConfig());\n    }\n\n    /** Builds the overlay config based on the directive's inputs */\n    private _buildConfig(): OverlayConfig {\n        const positionStrategy = this._position = this._createPositionStrategy();\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n\n        return overlayConfig;\n    }\n\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this.origin.elementRef)\n            .withFlexibleDimensions(this.flexibleDiemsions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition);\n\n        this._setPositions(strategy);\n        strategy.positionChanges.subscribe((position) => this.positionChange.emit(position));\n\n        return strategy;\n    }\n\n    /**\n     * Sets the primary and fallback positions of a positions strategy,\n     * based on the current directive inputs.\n     */\n    private _setPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n        const positions: IConnectedPosition[] = this.positions.map((pos) => ({\n            originX: pos.originX,\n            originY: pos.originY,\n            overlayX: pos.overlayX,\n            overlayY: pos.overlayY,\n            offsetX: pos.offsetX || this.offsetX,\n            offsetY: pos.offsetY || this.offsetY\n        }));\n\n        positionStrategy.withPositions(positions);\n    }\n\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    private _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n\n            this._overlayRef!.keydownEvents().subscribe((event: KeyboardEvent) => { //tslint:disable-line\n                if (event.keyCode === ESCAPE) { //tslint:disable-line\n                    this._detachOverlay();\n                }\n            });\n        } else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight\n            });\n        }\n\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n            this.attach.emit();\n        }\n\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe((event) => {\n                this.backdropClick.emit(event);\n            });\n        }\n    }\n\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    private _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this.detach.emit();\n        }\n\n        this._backdropSubscription.unsubscribe();\n    }\n\n    /** Destroys the overlay created by this directive. */\n    private _destroyOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n\n        this._backdropSubscription.unsubscribe();\n    }\n}\n\n\n/** @docs-private */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n","import { NgModule, Provider } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { ScrollDispatchModule, VIEWPORT_RULER_PROVIDER } from '@ptsecurity/cdk/scrolling';\n\nimport { OVERLAY_KEYBOARD_DISPATCHER_PROVIDER } from './keyboard/overlay-keyboard-dispatcher';\nimport { Overlay } from './overlay';\nimport { OVERLAY_CONTAINER_PROVIDER } from './overlay-container';\nimport {\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    CdkConnectedOverlay,\n    CdkOverlayOrigin\n} from './overlay-directives';\nimport { OverlayPositionBuilder } from './position/overlay-position-builder';\n\n\n@NgModule({\n    imports: [BidiModule, PortalModule, ScrollDispatchModule],\n    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollDispatchModule],\n    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n    providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER\n    ]\n})\nexport class OverlayModule {\n}\n\n\n/**\n * @deprecated Use `OverlayModule` instead.\n * @deletion-target 7.0.0\n */\nexport const OVERLAY_PROVIDERS: Provider[] = [\n    Overlay,\n    OverlayPositionBuilder,\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n    VIEWPORT_RULER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n","import { DOCUMENT } from '@angular/common';\nimport { Injectable, Inject, OnDestroy } from '@angular/core';\n\nimport { OverlayContainer } from './overlay-container';\n\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n@Injectable()\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\n    private _fullScreenEventName: string | undefined;\n    private _fullScreenListener: () => void;\n\n    constructor(@Inject(DOCUMENT) _document: any) {\n        super(_document);\n    }\n\n    ngOnDestroy() {\n        super.ngOnDestroy();\n\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement(): Element {\n        return this._document.fullscreenElement ||\n            this._document.webkitFullscreenElement ||\n            (this._document as any).mozFullScreenElement ||\n            (this._document as any).msFullscreenElement ||\n            null;\n    }\n\n    protected _createContainer(): void {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n\n    private _adjustParentForFullscreenChange(): void {\n        if (!this._containerElement) {\n            return;\n        }\n\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n\n    private _addFullscreenChangeListener(fn: () => void) {\n        const eventName = this._getEventName();\n\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n\n    private _getEventName(): string | undefined {\n        if (!this._fullScreenEventName) {\n            if (this._document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            } else if (this._document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            } else if ((this._document as any).mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            } else if ((this._document as any).msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n\n        return this._fullScreenEventName;\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Optional } from '@angular/core';\n\n\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface IOriginConnectionPosition {\n    originX: HorizontalConnectionPos;\n    originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface IOverlayConnectionPosition {\n    overlayX: HorizontalConnectionPos;\n    overlayY: VerticalConnectionPos;\n}\n\n/** The points of the origin element and the overlay element to connect. */\nexport class ConnectionPositionPair {\n    /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n    originX: HorizontalConnectionPos;\n    /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n    originY: VerticalConnectionPos;\n    /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n    overlayX: HorizontalConnectionPos;\n    /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n    overlayY: VerticalConnectionPos;\n\n    constructor(\n        origin: IOriginConnectionPosition,\n        overlay: IOverlayConnectionPosition,\n        public offsetX?: number,\n        public offsetY?: number) {\n\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nexport class ScrollingVisibility {\n    isOriginClipped: boolean;\n    isOriginOutsideView: boolean;\n    isOverlayClipped: boolean;\n    isOverlayOutsideView: boolean;\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nexport class ConnectedOverlayPositionChange {\n    constructor(\n        /** The position used as a result of this change. */\n        public connectionPair: ConnectionPositionPair,\n        /** @docs-private */\n        @Optional() public scrollableViewProperties: ScrollingVisibility) {\n    }\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n","import { IOverlayReference } from '../overlay-reference';\n\n\n/**\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\n */\nexport interface IScrollStrategy {\n    /** Enable this scroll strategy (called when the attached overlay is attached to a portal). */\n    enable(): void;\n\n    /** Disable this scroll strategy (called when the attached overlay is detached from a portal). */\n    disable(): void;\n\n    /** Attaches this `ScrollStrategy` to an overlay. */\n    attach(overlayRef: IOverlayReference): void;\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nexport function getMatScrollStrategyAlreadyAttachedError(): Error {\n    return Error(`Scroll strategy has already been attached.`);\n}\n","/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nexport function isElementScrolledOutsideView(element: ClientRect, scrollContainers: ClientRect[]) {\n    return scrollContainers.some((containerBounds) => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nexport function isElementClippedByScrolling(element: ClientRect, scrollContainers: ClientRect[]) {\n    return scrollContainers.some((scrollContainerRect) => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    Inject,\n    Injectable,\n    InjectionToken,\n    OnDestroy,\n    Optional,\n    SkipSelf\n} from '@angular/core';\n\nimport { OverlayRef } from '../overlay-ref';\n\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({ providedIn: 'root' })\nexport class OverlayKeyboardDispatcher implements OnDestroy {\n\n    /** Currently attached overlays in the order they were attached. */\n    _attachedOverlays: OverlayRef[] = [];\n\n    private _document: Document;\n    private _isAttached: boolean;\n\n    constructor(@Inject(DOCUMENT) document: any) {\n        this._document = document;\n    }\n\n    ngOnDestroy() {\n        this._detach();\n    }\n\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef: OverlayRef): void {\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener, true);\n            this._isAttached = true;\n        }\n\n        this._attachedOverlays.push(overlayRef);\n    }\n\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef: OverlayRef): void {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this._detach();\n        }\n    }\n\n    /** Detaches the global keyboard event listener. */\n    private _detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener, true);\n            this._isAttached = false;\n        }\n    }\n\n    /** Keyboard event listener that will be attached to the body. */\n    private _keydownListener = (event: KeyboardEvent) => {\n        if (this._attachedOverlays.length) {\n            // Dispatch the keydown event to the top overlay. We want to target the most recent overlay,\n            // rather than trying to match where the event came from, because some components might open\n            // an overlay, but keep focus on a trigger element (e.g. for select and autocomplete).\n            this._attachedOverlays[this._attachedOverlays.length - 1]._keydownEvents.next(event);\n        }\n    }\n}\n\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(\n    dispatcher: OverlayKeyboardDispatcher, _document: any) {\n    return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n    // If there is already an OverlayKeyboardDispatcher available, use that.\n    // Otherwise, provide a new one.\n    provide: OverlayKeyboardDispatcher,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n\n        // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n        // of the type expected by Angular\n        DOCUMENT as InjectionToken<any>\n    ],\n    useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n","import { DOCUMENT } from '@angular/common';\nimport {\n    Inject,\n    Injectable,\n    InjectionToken,\n    OnDestroy,\n    Optional,\n    SkipSelf\n} from '@angular/core';\n\n\n/** Container inside which all overlays will render. */\n@Injectable({ providedIn: 'root' })\nexport class OverlayContainer implements OnDestroy {\n    protected _containerElement: HTMLElement;\n\n    constructor(@Inject(DOCUMENT) protected _document: any) {\n    }\n\n    ngOnDestroy() {\n        if (this._containerElement && this._containerElement.parentNode) {\n            this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n    }\n\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement(): HTMLElement {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n\n        return this._containerElement;\n    }\n\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    protected _createContainer(): void {\n        const container = this._document.createElement('div');\n\n        container.classList.add('cdk-overlay-container');\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\n\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer,\n                                                   _document: any) {\n    return parentContainer || new OverlayContainer(_document);\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayContainer],\n        DOCUMENT as InjectionToken<any> // We need to use the InjectionToken somewhere to keep TS happy\n    ],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n","import { ElementRef } from '@angular/core';\nimport { coerceCssPixelValue } from '@ptsecurity/cdk/coercion';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { ViewportRuler, CdkScrollable } from '@ptsecurity/cdk/scrolling';\nimport { Observable, Subscription, Subject } from 'rxjs';\n\nimport { IOverlayReference } from '../overlay-reference';\n\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    ScrollingVisibility,\n    validateHorizontalPosition,\n    validateVerticalPosition\n} from './connected-position';\nimport { IPositionStrategy } from './position-strategy';\nimport { isElementScrolledOutsideView, isElementClippedByScrolling } from './scroll-clip';\n\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class FlexibleConnectedPositionStrategy implements IPositionStrategy {\n\n    /** Ordered list of preferred positions, from most to least desirable. */\n    _preferredPositions: ConnectionPositionPair[] = [];\n\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions(): ConnectionPositionPair[] {\n        return this._preferredPositions;\n    }\n\n    /** The overlay to which this strategy is attached. */\n    private _overlayRef: IOverlayReference;\n\n    /** Whether we're performing the very first positioning of the overlay. */\n    private _isInitialRender = true;\n\n    /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n    private _lastBoundingBoxSize = { width: 0, height: 0 };\n\n    /** Whether the overlay was pushed in a previous positioning. */\n    private _isPushed = false;\n\n    /** Whether the overlay can be pushed on-screen on the initial open. */\n    private _canPush = true;\n\n    /** Whether the overlay can grow via flexible width/height after the initial open. */\n    private _growAfterOpen = false;\n\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    private _hasFlexibleDimensions = true;\n\n    /** Whether the overlay position is locked. */\n    private _positionLocked = false;\n\n    /** Cached origin dimensions */\n    private _originRect: ClientRect;\n\n    /** Cached overlay dimensions */\n    private _overlayRect: ClientRect;\n\n    /** Cached viewport dimensions */\n    private _viewportRect: ClientRect;\n\n    /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n    private _viewportMargin = 0;\n\n    /** The Scrollable containers used to check scrollable view properties on position change. */\n    private scrollables: CdkScrollable[] = [];\n\n    /** The origin element against which the overlay will be positioned. */\n    private _origin: HTMLElement;\n\n    /** The overlay pane element. */\n    private _pane: HTMLElement;\n\n    /** Whether the strategy has been disposed of already. */\n    private _isDisposed: boolean;\n\n    /**\n     * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n     * within the viewport.\n     */\n    private _boundingBox: HTMLElement | null;\n\n    /** The last position to have been calculated as the best fit position. */\n    private _lastPosition: IConnectedPosition | null;\n\n    /** Subject that emits whenever the position changes. */\n    private _positionChanges = new Subject<ConnectedOverlayPositionChange>();\n\n    /** Subscription to viewport size changes. */\n    private _resizeSubscription = Subscription.EMPTY;\n\n    /** Default offset for the overlay along the x axis. */\n    private _offsetX = 0;\n\n    /** Default offset for the overlay along the y axis. */\n    private _offsetY = 0;\n\n    /** Selector to be used when finding the elements on which to set the transform origin. */\n    private _transformOriginSelector: string;\n\n    /** Observable sequence of position changes. */\n    positionChanges: Observable<ConnectedOverlayPositionChange> =\n        this._positionChanges.asObservable();\n\n    constructor(\n        connectedTo: ElementRef | HTMLElement,\n        private _viewportRuler: ViewportRuler,\n        private _document: Document,\n        // @deletion-target 7.0.0 `_platform` parameter to be made required.\n        private _platform?: Platform) {\n        this.setOrigin(connectedTo);\n    }\n\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef: IOverlayReference): void {\n        if (this._overlayRef && overlayRef !== this._overlayRef) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n\n        this._validatePositions();\n\n        overlayRef.hostElement.classList.add('cdk-overlay-connected-position-bounding-box');\n\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => this.apply());\n    }\n\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply(): void {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || (this._platform && !this._platform.isBrowser)) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n\n            return;\n        }\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._origin.getBoundingClientRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits: IFlexibleFit[] = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback: IFallbackPosition | undefined;\n\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) { //tslint:disable-line\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, pos); //tslint:disable-line\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos); //tslint:disable-line\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos); //tslint:disable-line\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n\n                continue;\n            }\n\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit: IFlexibleFit | null = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score =\n                    fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n\n            this._isPushed = false;\n            this._applyPosition(bestFit!.position, bestFit!.origin); //tslint:disable-line\n\n            return;\n        }\n\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            this._isPushed = true;\n            this._applyPosition(fallback!.position, fallback!.originPoint); //tslint:disable-line\n\n            return;\n        }\n\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback!.position, fallback!.originPoint); //tslint:disable-line\n    }\n\n    detach() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (!this._isDisposed) {\n            this.detach();\n            this._boundingBox = null;\n            this._positionChanges.complete();\n            this._isDisposed = true;\n        }\n    }\n\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition(): void {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._origin.getBoundingClientRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables: CdkScrollable[]) {\n        this.scrollables = scrollables;\n    }\n\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions: IConnectedPosition[]): this {\n        this._preferredPositions = positions;\n\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition!) === -1) { //tslint:disable-line\n            this._lastPosition = null;\n        }\n\n        this._validatePositions();\n\n        return this;\n    }\n\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin: number): this {\n        this._viewportMargin = margin;\n\n        return this;\n    }\n\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true): this {\n        this._hasFlexibleDimensions = flexibleDimensions;\n\n        return this;\n    }\n\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true): this {\n        this._growAfterOpen = growAfterOpen;\n\n        return this;\n    }\n\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true): this {\n        this._canPush = canPush;\n\n        return this;\n    }\n\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true): this {\n        this._positionLocked = isLocked;\n\n        return this;\n    }\n\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    setOrigin(origin: ElementRef | HTMLElement): this {\n        this._origin = origin instanceof ElementRef ? origin.nativeElement : origin;\n\n        return this;\n    }\n\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset: number): this {\n        this._offsetX = offset;\n\n        return this;\n    }\n\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset: number): this {\n        this._offsetY = offset;\n\n        return this;\n    }\n\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector: string): this {\n        this._transformOriginSelector = selector;\n\n        return this;\n    }\n\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    private _getOriginPoint(originRect: ClientRect, pos: IConnectedPosition): IPoint {\n        let x: number;\n        if (pos.originX === 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2); //tslint:disable-line\n        } else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX === 'start' ? startX : endX;\n        }\n\n        let y: number;\n        if (pos.originY === 'center') {\n            y = originRect.top + (originRect.height / 2); //tslint:disable-line\n        } else {\n            y = pos.originY === 'top' ? originRect.top : originRect.bottom;\n        }\n\n        return { x, y };\n    }\n\n\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    private _getOverlayPoint( //tslint:disable-line\n        originPoint: IPoint,\n        overlayRect: ClientRect,\n        pos: IConnectedPosition): IPoint {\n\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX: number;\n        if (pos.overlayX === 'center') {\n            overlayStartX = -overlayRect.width / 2; //tslint:disable-line\n        } else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        } else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n\n        let overlayStartY: number;\n        if (pos.overlayY === 'center') {\n            overlayStartY = -overlayRect.height / 2; //tslint:disable-line\n        } else {\n            overlayStartY = pos.overlayY === 'top' ? 0 : -overlayRect.height;\n        }\n\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY\n        };\n    }\n\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    private _getOverlayFit(point: IPoint, overlay: ClientRect, viewport: ClientRect,\n                           position: IConnectedPosition): IOverlayFit {\n\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x'); //tslint:disable-line\n        let offsetY = this._getOffset(position, 'y'); //tslint:disable-line\n\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n\n        if (offsetY) {\n            y += offsetY;\n        }\n\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x; //tslint:disable-line\n        let rightOverflow = (x + overlay.width) - viewport.width; //tslint:disable-line\n        let topOverflow = 0 - y; //tslint:disable-line\n        let bottomOverflow = (y + overlay.height) - viewport.height; //tslint:disable-line\n\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow); //tslint:disable-line\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow); //tslint:disable-line\n        let visibleArea = visibleWidth * visibleHeight; //tslint:disable-line\n\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth === overlay.width\n        };\n    }\n\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlat at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    private _canFitWithFlexibleDimensions(fit: IOverlayFit, point: IPoint, viewport: ClientRect) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = this._overlayRef.getConfig().minHeight;\n            const minWidth = this._overlayRef.getConfig().minWidth;\n\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n\n            return verticalFit && horizontalFit;\n        }\n    }\n\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start The starting point from which the overlay is pushed.\n     * @param overlay The overlay dimensions.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    private _pushOverlayOnScreen(start: IPoint, overlay: ClientRect): IPoint {\n        const viewport = this._viewportRect;\n\n        // Determine how much the overlay goes outside the viewport on each side, which we'll use to\n        // decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n        const overflowTop = Math.max(viewport.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - start.x, 0);\n\n        // Amount by which to push the overlay in each direction such that it remains on-screen.\n        let pushX, pushY = 0; //tslint:disable-line\n\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        } else {\n            pushX = viewport.left - start.x;\n        }\n\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        } else {\n            pushY = viewport.top - start.y;\n        }\n\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY\n        };\n    }\n\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    private _applyPosition(position: IConnectedPosition, originPoint: IPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n\n        this._isInitialRender = false;\n    }\n\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    private _setTransformOrigin(position: IConnectedPosition) {\n        if (!this._transformOriginSelector) { return; }\n\n        const elements: NodeListOf<HTMLElement> =\n            this._boundingBox!.querySelectorAll(this._transformOriginSelector); //tslint:disable-line\n        let xOrigin: 'left' | 'right' | 'center';\n        let yOrigin: 'top' | 'bottom' | 'center' = position.overlayY; //tslint:disable-line\n\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        } else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        } else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n\n        for (let i = 0; i < elements.length; i++) { //tslint:disable-line\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    private _calculateBoundingBoxRect(origin: IPoint, position: IConnectedPosition): IBoundingBoxRect {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom; //tslint:disable-line\n\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.bottom - origin.y;\n        } else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2; //tslint:disable-line\n            height = viewport.height - bottom + this._viewportMargin;\n        } else {\n            // If neither top nor bottom, it means that the overlay\n            // is vertically centered on the origin point.\n            const smallestDistanceToViewportEdge =\n                Math.min(viewport.bottom - origin.y, origin.y - viewport.left);\n            const previousHeight = this._lastBoundingBoxSize.height;\n\n            height = smallestDistanceToViewportEdge * 2; //tslint:disable-line\n            top = origin.y - smallestDistanceToViewportEdge;\n\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2); //tslint:disable-line\n            }\n        }\n\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge =\n            (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge =\n            (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n\n        let width, left, right; //tslint:disable-line\n\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.right - origin.x + this._viewportMargin;\n            width = origin.x - viewport.left;\n        } else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        } else {\n            // If neither start nor end, it means that the overlay\n            // is horizontally centered on the origin point.\n            const smallestDistanceToViewportEdge =\n                Math.min(viewport.right - origin.x, origin.x - viewport.top);\n            const previousWidth = this._lastBoundingBoxSize.width;\n\n            width = smallestDistanceToViewportEdge * 2; //tslint:disable-line\n            left = origin.x - smallestDistanceToViewportEdge;\n\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2); //tslint:disable-line\n            }\n        }\n\n        return { top, left, bottom, right, width, height };\n    }\n\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    private _setBoundingBoxStyles(origin: IPoint, position: IConnectedPosition): void {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n\n        const styles = {} as CSSStyleDeclaration;\n\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = '';\n            styles.width = styles.height = '100%';\n        } else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            } else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            } else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n\n        this._lastBoundingBoxSize = boundingBoxRect;\n\n        extendStyles(this._boundingBox!.style, styles); //tslint:disable-line\n    }\n\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    private _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox!.style, { //tslint:disable-line\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: ''\n        } as CSSStyleDeclaration);\n    }\n\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    private _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: ''\n        } as CSSStyleDeclaration);\n    }\n\n    /** Sets positioning styles to the overlay element. */\n    private _setOverlayElementStyles(originPoint: IPoint, position: IConnectedPosition): void {\n        const styles = {} as CSSStyleDeclaration;\n\n        if (this._hasExactPosition()) {\n            extendStyles(styles, this._getExactOverlayY(position, originPoint));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint));\n        } else {\n            styles.position = 'static';\n        }\n\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x'); //tslint:disable-line\n        let offsetY = this._getOffset(position, 'y'); //tslint:disable-line\n\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n\n        styles.transform = transformString.trim();\n\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n            styles.maxHeight = '';\n        }\n\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n            styles.maxWidth = '';\n        }\n\n        extendStyles(this._pane.style, styles);\n    }\n\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    private _getExactOverlayY(position: IConnectedPosition, originPoint: IPoint) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: null, bottom: null } as CSSStyleDeclaration; //tslint:disable-line\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\n        }\n\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement!.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        } else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n\n        return styles;\n    }\n\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    private _getExactOverlayX(position: IConnectedPosition, originPoint: IPoint) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: null, right: null } as CSSStyleDeclaration; //tslint:disable-line\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\n        }\n\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty: 'left' | 'right';\n\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        } else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement!.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        } else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n\n        return styles;\n    }\n\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    private _getScrollVisibility(): ScrollingVisibility {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._origin.getBoundingClientRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this.scrollables.map((scrollable) => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds)\n        };\n    }\n\n    /** Subtracts the amount that an element is overflowing on an axis from it's length. */\n    private _subtractOverflows(length: number, ...overflows: number[]): number {\n        return overflows.reduce((currentValue: number, currentOverflow: number) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    private _getNarrowedViewportRect(): ClientRect {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement!.clientWidth;\n        const height = this._document.documentElement!.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin), //tslint:disable-line\n            height: height - (2 * this._viewportMargin) //tslint:disable-line\n        };\n    }\n\n    /** Whether the we're dealing with an RTL context */\n    private _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    private _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n\n    /** Retrieves the offset of a position along the x or y axis. */\n    private _getOffset(position: IConnectedPosition, axis: 'x' | 'y') {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n\n    /** Validates that the current position match the expected values. */\n    private _validatePositions(): void {\n        if (!this._preferredPositions.length) {\n            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        }\n\n        // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n        this._preferredPositions.forEach((pair) => {\n            validateHorizontalPosition('originX', pair.originX);\n            validateVerticalPosition('originY', pair.originY);\n            validateHorizontalPosition('overlayX', pair.overlayX);\n            validateVerticalPosition('overlayY', pair.overlayY);\n        });\n    }\n}\n\n/** A simple (x, y) coordinate. */\ninterface IPoint {\n    x: number;\n    y: number;\n}\n\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\ninterface IOverlayFit {\n    /** Whether the overlay fits completely in the viewport. */\n    isCompletelyWithinViewport: boolean;\n\n    /** Whether the overlay fits in the viewport on the y-axis. */\n    fitsInViewportVertically: boolean;\n\n    /** Whether the overlay fits in the viewport on the x-axis. */\n    fitsInViewportHorizontally: boolean;\n\n    /** The total visible area (in px^2) of the overlay inside the viewport. */\n    visibleArea: number;\n}\n\n/** Record of the measurments determining whether an overlay will fit in a specific position. */\ninterface IFallbackPosition {\n    position: IConnectedPosition;\n    originPoint: IPoint;\n    overlayPoint: IPoint;\n    overlayFit: IOverlayFit;\n    overlayRect: ClientRect;\n}\n\n/** Position and size of the overlay sizing wrapper for a specific position. */\ninterface IBoundingBoxRect {\n    top: number;\n    left: number;\n    bottom: number;\n    right: number;\n    height: number;\n    width: number;\n}\n\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\ninterface IFlexibleFit {\n    position: IConnectedPosition;\n    origin: IPoint;\n    overlayRect: ClientRect;\n    boundingBoxRect: IBoundingBoxRect;\n}\n\n/** A connected position as specified by the user. */\nexport interface IConnectedPosition {\n    originX: 'start' | 'center' | 'end';\n    originY: 'top' | 'center' | 'bottom';\n\n    overlayX: 'start' | 'center' | 'end';\n    overlayY: 'top' | 'center' | 'bottom';\n\n    weight?: number;\n    offsetX?: number;\n    offsetY?: number;\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(dest: CSSStyleDeclaration, source: CSSStyleDeclaration): CSSStyleDeclaration {\n    for (let key in source) { //tslint:disable-line\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n\n    return dest;\n}\n","import { IScrollStrategy } from './scroll-strategy';\n\n\n/** Scroll strategy that doesn't do anything. */\nexport class NoopScrollStrategy implements IScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() {\n    } // tslint:disable-line\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() {\n    } // tslint:disable-line\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() {\n    } // tslint:disable-line\n}\n","import { Direction, Directionality } from '@ptsecurity/cdk/bidi';\n\nimport { IPositionStrategy } from './position/position-strategy';\nimport { NoopScrollStrategy } from './scroll/noop-scroll-strategy';\nimport { IScrollStrategy } from './scroll/scroll-strategy';\n\n\n/** Initial configuration used when creating an overlay. */\nexport class OverlayConfig {\n    /** Strategy with which to position the overlay. */\n    positionStrategy?: IPositionStrategy;\n\n    /** Strategy to be used when handling scroll events while the overlay is open. */\n    scrollStrategy?: IScrollStrategy = new NoopScrollStrategy();\n\n    /** Custom class to add to the overlay pane. */\n    panelClass?: string | string[] = '';\n\n    /** Whether the overlay has a backdrop. */\n    hasBackdrop?: boolean = false;\n\n    /** Custom class to add to the backdrop */\n    backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\n\n    /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n    width?: number | string;\n\n    /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n    height?: number | string;\n\n    /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n    minWidth?: number | string;\n\n    /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n    minHeight?: number | string;\n\n    /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n    maxWidth?: number | string;\n\n    /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n    maxHeight?: number | string;\n\n    /**\n     * Direction of the text in the overlay panel. If a `Directionality` instance\n     * is passed in, the overlay will handle changes to its value automatically.\n     */\n    direction?: Direction | Directionality;\n\n    constructor(config?: OverlayConfig) {\n        if (config) {\n            Object.keys(config)\n                .filter((key) => config[key] !== undefined)\n                .forEach((key) => this[key] = config[key]);\n        }\n    }\n}\n","import { coerceCssPixelValue } from '@ptsecurity/cdk/coercion';\nimport { ViewportRuler } from '@ptsecurity/cdk/scrolling';\n\nimport { IScrollStrategy } from './scroll-strategy';\n\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements IScrollStrategy {\n    private _previousHTMLStyles = { top: '', left: '' };\n    private _previousScrollPosition: { top: number, left: number };\n    private _isEnabled = false;\n    private _document: Document;\n\n    constructor(private _viewportRuler: ViewportRuler, document: any) {\n        this._document = document;\n    }\n\n    /** Attaches this scroll strategy to an overlay. */\n    attach() {\n    } // tslint:disable-line\n\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() { // tslint:disable-line\n\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement!;\n\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement!;\n            const body = this._document.body!;\n            const previousHtmlScrollBehavior = html.style['scrollBehavior'] || ''; // tslint:disable-line\n            const previousBodyScrollBehavior = body.style['scrollBehavior'] || ''; // tslint:disable-line\n\n            this._isEnabled = false;\n\n            html.style.left = this._previousHTMLStyles.left;\n            html.style.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            html.style['scrollBehavior'] = body.style['scrollBehavior'] = 'auto'; // tslint:disable-line\n\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n            html.style['scrollBehavior'] = previousHtmlScrollBehavior; // tslint:disable-line\n            body.style['scrollBehavior'] = previousBodyScrollBehavior; // tslint:disable-line\n        }\n    }\n\n    private _canBeEnabled(): boolean {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement!;\n\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n","import { NgZone } from '@angular/core';\nimport { ScrollDispatcher, ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport { Subscription } from 'rxjs';\n\nimport { IOverlayReference } from '../overlay-reference';\n\nimport { IScrollStrategy, getMatScrollStrategyAlreadyAttachedError } from './scroll-strategy';\n\n\n/**\n * Config options for the CloseScrollStrategy.\n */\nexport interface ICloseScrollStrategyConfig {\n    /** Amount of pixels the user has to scroll before the overlay is closed. */\n    threshold?: number;\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements IScrollStrategy {\n    private _scrollSubscription: Subscription | null = null;\n    private _overlayRef: IOverlayReference;\n    private _initialScrollPosition: number;\n\n    constructor(\n        private _scrollDispatcher: ScrollDispatcher,\n        private _ngZone: NgZone,\n        private _viewportRuler: ViewportRuler,\n        private _config?: ICloseScrollStrategyConfig) {\n    }\n\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef: IOverlayReference) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n\n        this._overlayRef = overlayRef;\n    }\n\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n\n        const stream = this._scrollDispatcher.scrolled(0);\n\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) { //tslint:disable-line\n                    this._detach();\n                } else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        } else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n\n    /** Detaches the overlay ref and disables the scroll strategy. */\n    private _detach = () => {\n        this.disable();\n\n        if (this._overlayRef.hasAttached()) {\n            this._ngZone.run(() => this._overlayRef.detach());\n        }\n    }\n}\n","import { NgZone } from '@angular/core';\nimport { ScrollDispatcher, ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport { Subscription } from 'rxjs';\n\nimport { IOverlayReference } from '../overlay-reference';\nimport { isElementScrolledOutsideView } from '../position/scroll-clip';\n\nimport { IScrollStrategy, getMatScrollStrategyAlreadyAttachedError } from './scroll-strategy';\n\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface IRepositionScrollStrategyConfig {\n    /** Time in milliseconds to throttle the scroll events. */\n    scrollThrottle?: number;\n\n    /** Whether to close the overlay once the user has scrolled away completely. */\n    autoClose?: boolean;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements IScrollStrategy {\n    private _scrollSubscription: Subscription | null = null;\n    private _overlayRef: IOverlayReference;\n\n    constructor(\n        private _scrollDispatcher: ScrollDispatcher,\n        private _viewportRuler: ViewportRuler,\n        private _ngZone: NgZone,\n        private _config?: IRepositionScrollStrategyConfig) {\n    }\n\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef: IOverlayReference) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n\n        this._overlayRef = overlayRef;\n    }\n\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, NgZone } from '@angular/core';\nimport { ScrollDispatcher, ViewportRuler } from '@ptsecurity/cdk/scrolling';\n\n\nimport { BlockScrollStrategy } from './block-scroll-strategy';\nimport { CloseScrollStrategy, ICloseScrollStrategyConfig } from './close-scroll-strategy';\nimport { NoopScrollStrategy } from './noop-scroll-strategy';\nimport {\n    RepositionScrollStrategy,\n    IRepositionScrollStrategyConfig\n} from './reposition-scroll-strategy';\n\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable({ providedIn: 'root' })\nexport class ScrollStrategyOptions {\n    private _document: Document;\n\n    constructor(\n        private _scrollDispatcher: ScrollDispatcher,\n        private _viewportRuler: ViewportRuler,\n        private _ngZone: NgZone,\n        @Inject(DOCUMENT) document: any) {\n        this._document = document;\n    }\n\n    /** Do nothing on scroll. */\n    noop = () => new NoopScrollStrategy();\n\n    /**\n     * Close the overlay as soon as the user scrolls.\n     * @param config Configuration to be used inside the scroll strategy.\n     */\n    close = (config?: ICloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher,\n        this._ngZone, this._viewportRuler, config)\n\n    /** Block scrolling. */\n    block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n\n    /**\n     * Update the overlay's position on scroll.\n     * @param config Configuration to be used inside the scroll strategy.\n     * Allows debouncing the reposition calls.\n     */\n    reposition = (config?: IRepositionScrollStrategyConfig) => new RepositionScrollStrategy(\n        this._scrollDispatcher, this._viewportRuler, this._ngZone, config)\n}\n","import { ComponentRef, EmbeddedViewRef, NgZone } from '@angular/core';\nimport { Direction, Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceCssPixelValue, coerceArray } from '@ptsecurity/cdk/coercion';\nimport { ComponentPortal, Portal, IPortalOutlet, TemplatePortal } from '@ptsecurity/cdk/portal';\nimport { Observable, Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { OverlayKeyboardDispatcher } from './keyboard/overlay-keyboard-dispatcher';\nimport { OverlayConfig } from './overlay-config';\n\n\n/** An object where all of its properties cannot be written. */\nexport type ImmutableObject<T> = {\n    readonly [P in keyof T]: T[P];\n};\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements IPortalOutlet {\n    /** Stream of keydown events dispatched to this overlay. */\n    _keydownEvents = new Subject<KeyboardEvent>();\n\n    private _backdropElement: HTMLElement | null = null;\n    private _backdropClick: Subject<MouseEvent> = new Subject();\n    private _attachments = new Subject<void>();\n    private _detachments = new Subject<void>();\n\n    constructor(\n        private _portalOutlet: IPortalOutlet,\n        private _host: HTMLElement,\n        private _pane: HTMLElement,\n        private _config: ImmutableObject<OverlayConfig>,\n        private _ngZone: NgZone,\n        private _keyboardDispatcher: OverlayKeyboardDispatcher,\n        private _document: Document) {\n\n        if (_config.scrollStrategy) {\n            _config.scrollStrategy.attach(this);\n        }\n    }\n\n    /** The overlay's HTML element */\n    get overlayElement(): HTMLElement {\n        return this._pane;\n    }\n\n    /** The overlay's backdrop HTML element. */\n    get backdropElement(): HTMLElement | null {\n        return this._backdropElement;\n    }\n\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement(): HTMLElement {\n        return this._host;\n    }\n\n    attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n\n    attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n\n    attach(portal: any): any;\n\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal: Portal<any>): any {\n        let attachResult = this._portalOutlet.attach(portal); //tslint:disable-line\n\n        if (this._config.positionStrategy) {\n            this._config.positionStrategy.attach(this);\n        }\n\n        // Update the pane element with the given configuration.\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.enable();\n        }\n\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                // The overlay could've been detached before the zone has stabilized.\n                if (this.hasAttached()) {\n                    this.updatePosition();\n                }\n            });\n\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n\n        return attachResult;\n    }\n\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach(): any {\n        if (!this.hasAttached()) {\n            return;\n        }\n\n        this.detachBackdrop();\n\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n\n        if (this._config.positionStrategy && this._config.positionStrategy.detach) {\n            this._config.positionStrategy.detach();\n        }\n\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n\n        const detachmentResult = this._portalOutlet.detach();\n\n        // Only emit after everything is detached.\n        this._detachments.next();\n\n        // Remove this overlay from keyboard dispatcher tracking\n        this._keyboardDispatcher.remove(this);\n\n        return detachmentResult;\n    }\n\n    /** Cleans up the overlay from the DOM. */\n    dispose(): void {\n        const isAttached = this.hasAttached();\n\n        if (this._config.positionStrategy) {\n            this._config.positionStrategy.dispose();\n        }\n\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n\n        this.detachBackdrop();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = null!; //tslint:disable-line\n        }\n\n        this._pane = null!; //tslint:disable-line\n\n        if (isAttached) {\n            this._detachments.next();\n        }\n\n        this._detachments.complete();\n    }\n\n    /** Whether the overlay has attached content. */\n    hasAttached(): boolean {\n        return this._portalOutlet.hasAttached();\n    }\n\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick(): Observable<MouseEvent> {\n        return this._backdropClick.asObservable();\n    }\n\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments(): Observable<void> {\n        return this._attachments.asObservable();\n    }\n\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments(): Observable<void> {\n        return this._detachments.asObservable();\n    }\n\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents(): Observable<KeyboardEvent> {\n        return this._keydownEvents.asObservable();\n    }\n\n    /** Gets the the current overlay configuration, which is immutable. */\n    getConfig(): OverlayConfig {\n        return this._config;\n    }\n\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._config.positionStrategy) {\n            this._config.positionStrategy.apply();\n        }\n    }\n\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig: IOverlaySizeConfig) {\n        this._config = { ...this._config, ...sizeConfig };\n        this._updateElementSize();\n    }\n\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir: Direction | Directionality) {\n        this._config = { ...this._config, direction: dir };\n        this._updateElementDirection();\n    }\n\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection(): Direction {\n        const direction = this._config.direction;\n\n        if (!direction) {\n            return 'ltr';\n        }\n\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n\n    /** Updates the text direction of the overlay panel. */\n    private _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n\n    /** Updates the size of the overlay element based on the overlay config. */\n    private _updateElementSize() {\n        const style = this._pane.style;\n\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n\n    /** Toggles the pointer events for the overlay pane element. */\n    private _togglePointerEvents(enablePointer: boolean) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    }\n\n    /** Attaches a backdrop for this overlay. */\n    private _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement!.insertBefore(this._backdropElement, this._host); //tslint:disable-line\n\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click',\n            (event: MouseEvent) => this._backdropClick.next(event));\n\n        // Add class to fade-in the backdrop after one frame.\n        if (requestAnimationFrame !== undefined) {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        } else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    private _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode!.appendChild(this._host); //tslint:disable-line\n        }\n    }\n\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop(): void {\n        let backdropToDetach = this._backdropElement; //tslint:disable-line\n\n        if (backdropToDetach) {\n            let finishDetach = () => { //tslint:disable-line\n                // It may not be attached to anything in certain cases (e.g. unit tests).\n                if (backdropToDetach && backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n\n                // It is possible that a new portal has been attached to this overlay since we started\n                // removing the backdrop. If that is the case, only clear the backdrop reference if it\n                // is still the same instance that we started to remove.\n                if (this._backdropElement === backdropToDetach) {\n                    this._backdropElement = null;\n                }\n            };\n\n            backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n\n            backdropToDetach.addEventListener('transitionend', finishDetach);\n\n            // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n            // In this case we make it unclickable and we try to remove it after a delay.\n            backdropToDetach.style.pointerEvents = 'none';\n\n            // Run this outside the Angular zone because there's nothing that Angular cares about.\n            // If it were to run inside the Angular zone, every test that used Overlay would have to be\n            // either async or fakeAsync.\n            this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500)); //tslint:disable-line\n        }\n    }\n\n    /** Toggles a single CSS class or an array of classes on an element. */\n    private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\n        const classList = element.classList;\n\n        coerceArray(cssClasses).forEach((cssClass) => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            isAdd ? classList.add(cssClass) : classList.remove(cssClass); // tslint:disable-line\n        });\n    }\n}\n\n\n/** Size properties for an overlay. */\nexport interface IOverlaySizeConfig {\n    width?: number | string;\n    height?: number | string;\n    minWidth?: number | string;\n    minHeight?: number | string;\n    maxWidth?: number | string;\n    maxHeight?: number | string;\n}\n","import { ElementRef } from '@angular/core';\nimport { Direction } from '@ptsecurity/cdk/bidi';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CdkScrollable, ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport { Observable } from 'rxjs';\n\nimport { IOverlayReference } from '../overlay-reference';\n\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    IOriginConnectionPosition,\n    IOverlayConnectionPosition,\n} from './connected-position';\nimport { FlexibleConnectedPositionStrategy } from './flexible-connected-position-strategy';\nimport { IPositionStrategy } from './position-strategy';\n\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @deletion-target 7.0.0\n */\nexport class ConnectedPositionStrategy implements IPositionStrategy {\n    /**\n     * Reference to the underlying position strategy to which all the API calls are proxied.\n     * @docs-private\n     */\n    _positionStrategy: FlexibleConnectedPositionStrategy;\n\n    /** Ordered list of preferred positions, from most to least desirable. */\n    _preferredPositions: ConnectionPositionPair[] = [];\n\n    /** The overlay to which this strategy is attached. */\n    private _overlayRef: IOverlayReference;\n\n    private _direction: Direction | null;\n\n    /** Whether the we're dealing with an RTL context */\n    get _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n\n    /** Emits an event when the connection point changes. */\n    get onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n        return this._positionStrategy.positionChanges;\n    }\n\n    constructor(\n        originPos: IOriginConnectionPosition,\n        overlayPos: IOverlayConnectionPosition,\n        connectedTo: ElementRef,\n        viewportRuler: ViewportRuler,\n        document: Document,\n        // @deletion-target 7.0.0 `platform` parameter to be made required.\n        platform?: Platform) {\n\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy =\n            new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform)\n                .withFlexibleDimensions(false)\n                .withPush(false)\n                .withViewportMargin(0);\n\n        this.withFallbackPosition(originPos, overlayPos);\n    }\n\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions(): ConnectionPositionPair[] {\n        return this._preferredPositions;\n    }\n\n    /** Attach this position strategy to an overlay. */\n    attach(overlayRef: IOverlayReference): void {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n\n    /** Disposes all resources used by the position strategy. */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n\n    /** @docs-private */\n    detach() {\n        this._positionStrategy.detach();\n    }\n\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * @docs-private\n     */\n    apply(): void {\n        this._positionStrategy.apply();\n    }\n\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    recalculateLastPosition(): void {\n        this._positionStrategy.reapplyLastPosition();\n    }\n\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables: CdkScrollable[]) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n\n    /**\n     * Adds a new preferred fallback position.\n     * @param originPos\n     * @param overlayPos\n     */\n    withFallbackPosition(\n        originPos: IOriginConnectionPosition,\n        overlayPos: IOverlayConnectionPosition,\n        offsetX?: number,\n        offsetY?: number): this {\n\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n\n        return this;\n    }\n\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param dir New layout direction.\n     */\n    withDirection(dir: 'ltr' | 'rtl'): this {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        } else {\n            this._direction = dir;\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param offset New offset in the X axis.\n     */\n    withOffsetX(offset: number): this {\n        this._positionStrategy.withDefaultOffsetX(offset);\n\n        return this;\n    }\n\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param  offset New offset in the Y axis.\n     */\n    withOffsetY(offset: number): this {\n        this._positionStrategy.withDefaultOffsetY(offset);\n\n        return this;\n    }\n\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked: boolean): this {\n        this._positionStrategy.withLockedPosition(isLocked);\n\n        return this;\n    }\n\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param positions Position pairs to be set on the strategy.\n     */\n    withPositions(positions: ConnectionPositionPair[]): this {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n\n        return this;\n    }\n\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    setOrigin(origin: ElementRef): this {\n        this._positionStrategy.setOrigin(origin);\n\n        return this;\n    }\n}\n","import { IOverlayReference } from '../overlay-reference';\n\nimport { IPositionStrategy } from './position-strategy';\n\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements IPositionStrategy {\n    /** The overlay to which this strategy is attached. */\n    private _overlayRef: IOverlayReference;\n    private _cssPosition: string = 'static';\n    private _topOffset: string = '';\n    private _bottomOffset: string = '';\n    private _leftOffset: string = '';\n    private _rightOffset: string = '';\n    private _alignItems: string = '';\n    private _justifyContent: string = '';\n    private _width: string = '';\n    private _height: string = '';\n\n    attach(overlayRef: IOverlayReference): void {\n        const config = overlayRef.getConfig();\n\n        this._overlayRef = overlayRef;\n\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n\n        overlayRef.hostElement.classList.add('cdk-global-overlay-wrapper');\n    }\n\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value: string = ''): this {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n\n        return this;\n    }\n\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value: string = ''): this {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n\n        return this;\n    }\n\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value: string = ''): this {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n\n        return this;\n    }\n\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value: string = ''): this {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n\n        return this;\n    }\n\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @deletion-target 7.0.0\n     */\n    width(value: string = ''): this {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        } else {\n            this._width = value;\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @deletion-target 7.0.0\n     */\n    height(value: string = ''): this {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        } else {\n            this._height = value;\n        }\n\n        return this;\n    }\n\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset: string = ''): this {\n        this.left(offset);\n        this._justifyContent = 'center';\n\n        return this;\n    }\n\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset: string = ''): this {\n        this.top(offset);\n        this._alignItems = 'center';\n\n        return this;\n    }\n\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply(): void {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef.hasAttached()) {\n            return;\n        }\n\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n\n        styles.position = this._cssPosition;\n        styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n        styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n\n        if (config.width === '100%') {\n            parentStyles.justifyContent = 'flex-start';\n        } else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            } else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        } else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n\n        parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n    }\n\n    /**\n     * Noop implemented as a part of the IPositionStrategy interface.\n     * @docs-private\n     */\n    dispose(): void {\n    } //tslint:disable-line\n}\n","import { DOCUMENT } from '@angular/common';\nimport { ElementRef, Inject, Injectable, Optional } from '@angular/core';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { ViewportRuler } from '@ptsecurity/cdk/scrolling';\n\nimport { IOriginConnectionPosition, IOverlayConnectionPosition } from './connected-position';\nimport { ConnectedPositionStrategy } from './connected-position-strategy';\nimport { FlexibleConnectedPositionStrategy } from './flexible-connected-position-strategy';\nimport { GlobalPositionStrategy } from './global-position-strategy';\n\n\n/** Builder for overlay position strategy. */\n@Injectable({ providedIn: 'root' })\nexport class OverlayPositionBuilder {\n    constructor(\n        private _viewportRuler: ViewportRuler,\n        @Inject(DOCUMENT) private _document: any,\n        // @deletion-target 7.0.0 `_platform` parameter to be made required.\n        @Optional() private _platform?: Platform) {\n    }\n\n    /**\n     * Creates a global position strategy.\n     */\n    global(): GlobalPositionStrategy {\n        return new GlobalPositionStrategy();\n    }\n\n    /**\n     * Creates a relative position strategy.\n     * @param elementRef //tslint:disable-line\n     * @param originPos //tslint:disable-line\n     * @param overlayPos //tslint:disable-line\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * @deletion-target 7.0.0\n     */\n    connectedTo(\n        elementRef: ElementRef,\n        originPos: IOriginConnectionPosition,\n        overlayPos: IOverlayConnectionPosition): ConnectedPositionStrategy { //tslint:disable-line\n\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, //tslint:disable-line\n            this._document);\n    }\n\n    /**\n     * Creates a flexible position strategy.\n     * @param elementRef //tslint:disable-line\n     */\n    flexibleConnectedTo(elementRef: ElementRef | HTMLElement): FlexibleConnectedPositionStrategy {\n        return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document,\n            this._platform);\n    }\n\n}\n"],"names":["type","Inject","args","DOCUMENT","Directionality","Overlay","defaultPositionList","originX","originY","overlayX","overlayY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","InjectionToken","CdkOverlayOrigin","elementRef","this","Directive","selector","exportAs","ElementRef","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","_scrollStrategy","_dir","viewportMargin","scrollStrategy","open","backdropClick","EventEmitter","positionChange","attach","detach","_hasBackdrop","_lockPosition","_growAfterOpen","_flexibleDimensions","_push","_backdropSubscription","Subscription","EMPTY","_templatePortal","TemplatePortal","Object","defineProperty","prototype","_offsetX","offsetX","_position","_setPositions","_offsetY","offsetY","value","coerceBooleanProperty","_overlayRef","ngOnDestroy","_destroyOverlay","ngOnChanges","changes","withPositions","positions","withLockedPosition","lockPosition","setOrigin","origin","apply","_attachOverlay","_detachOverlay","_createOverlay","length","create","_buildConfig","positionStrategy","_createPositionStrategy","overlayConfig","OverlayConfig","direction","hasBackdrop","width","height","minWidth","minHeight","backdropClass","_this","strategy","position","flexibleConnectedTo","withFlexibleDimensions","flexibleDiemsions","withPush","push","withGrowAfterOpen","growAfterOpen","withViewportMargin","positionChanges","subscribe","emit","map","pos","updateSize","keydownEvents","event","keyCode","ESCAPE","hasAttached","unsubscribe","dispose","TemplateRef","ViewContainerRef","undefined","decorators","Optional","Input","Output","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","OverlayModule","NgModule","imports","BidiModule","PortalModule","ScrollDispatchModule","exports","declarations","providers","OVERLAY_PROVIDERS","OverlayPositionBuilder","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER","VIEWPORT_RULER_PROVIDER","OVERLAY_CONTAINER_PROVIDER","FullscreenOverlayContainer","_super","_document","call","tslib_1.__extends","_fullScreenEventName","_fullScreenListener","removeEventListener","getFullscreenElement","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","_createContainer","_adjustParentForFullscreenChange","_addFullscreenChangeListener","_containerElement","body","appendChild","fn","eventName","_getEventName","addEventListener","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","Injectable","OverlayContainer","__extends","d","b","__","constructor","extendStatics","validateVerticalPosition","property","Error","validateHorizontalPosition","getMatScrollStrategyAlreadyAttachedError","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","top","outsideBelow","outsideLeft","right","left","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY","dispatcher","OverlayKeyboardDispatcher","OVERLAY_CONTAINER_PROVIDER_FACTORY","parentContainer","extendStyles","dest","source","key","hasOwnProperty","overlay","scrollStrategies","reposition","setPrototypeOf","__proto__","Array","p","__assign","assign","t","s","i","n","arguments","NoopScrollStrategy","enable","disable","config","panelClass","keys","filter","forEach","ConnectionPositionPair","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","BlockScrollStrategy","_viewportRuler","document","_previousHTMLStyles","_isEnabled","_canBeEnabled","root","_previousScrollPosition","getViewportScrollPosition","style","coerceCssPixelValue","classList","add","html","previousHtmlScrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","scrollWidth","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","Math","abs","updatePosition","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","_a","ScrollStrategyOptions","noop","close","block","providedIn","ScrollDispatcher","ViewportRuler","NgZone","_attachedOverlays","_keydownListener","_keydownEvents","next","_isAttached","index","indexOf","splice","SkipSelf","parentNode","removeChild","getContainerElement","container","createElement","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","Subject","_backdropElement","_backdropClick","_attachments","_detachments","portal","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","asObservable","pipe","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","isAttached","complete","attachments","detachments","getConfig","sizeConfig","tslib_1.__assign","setDirection","dir","getDirection","setAttribute","maxWidth","maxHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","finishDetach_1","setTimeout","cssClasses","isAdd","coerceArray","cssClass","FlexibleConnectedPositionStrategy","connectedTo","_platform","_preferredPositions","_isInitialRender","_lastBoundingBoxSize","_isPushed","_canPush","_hasFlexibleDimensions","_positionLocked","_viewportMargin","scrollables","_positionChanges","_resizeSubscription","_validatePositions","hostElement","_boundingBox","change","_isDisposed","isBrowser","_lastPosition","reapplyLastPosition","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_origin","_overlayRect","fallback","originRect","viewportRect","flexibleFits","_i","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","_b","flexibleFits_1","fit_1","score","weight","lastPosition","withScrollableContainers","margin","flexibleDimensions","canPush","isLocked","nativeElement","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","fit","availableHeight","availableWidth","verticalFit","horizontalFit","_pushOverlayOnScreen","start","pushX","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","observers","_getScrollVisibility","changeEvent","xOrigin","elements","querySelectorAll","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","styles","_hasExactPosition","alignItems","justifyContent","_getExactOverlayY","_getExactOverlayX","transformString","transform","trim","documentHeight","clientHeight","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","_positionStrategy","withFallbackPosition","_direction","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","slice","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","marginLeft","marginTop","marginBottom","marginRight","global","Platform","nextUniqueId","_overlayContainer","_componentFactoryResolver","_positionBuilder","_injector","_directionality","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","id","_appRef","get","ApplicationRef","DomPortalOutlet","ComponentFactoryResolver","Injector"],"mappings":";;;;;;i7BIuBA,SAAgBmK,GAAUC,EAAGC,GAEzB,QAASC,KAAOvJ,KAAKwJ,YAAcH,EADnCI,EAAcJ,EAAGC,GAEjBD,EAAEtH,UAAkB,OAANuH,EAAazH,OAAO2B,OAAO8F,IAAMC,EAAGxH,UAAYuH,EAAEvH,UAAW,GAAIwH,ICmEnF,QAAgBG,GAAyBC,EAAkBrH,GACvD,GAAc,QAAVA,GAA6B,WAAVA,GAAgC,WAAVA,EACzC,KAAMsH,OAAM,8BAA8BD,EAAlD,KAA+DrH,EAA/D,4CAWA,QAAgBuH,GAA2BF,EAAkBrH,GACzD,GAAc,UAAVA,GAA+B,QAAVA,GAA6B,WAAVA,EACxC,KAAMsH,OAAM,8BAA8BD,EAAlD,KAA+DrH,EAA/D,2CCxFA,QAAgBwH,KACZ,MAAOF,OAAM,8CCdjB,QAAgBG,GAA6BC,EAAqBC,GAC9D,MAAOA,GAAiBC,KAAI,SAAEC,GAClC,GAAcC,GAAeJ,EAAQK,OAASF,EAAgBG,IAChDC,EAAeP,EAAQM,IAAMH,EAAgBE,OAC7CG,EAAcR,EAAQS,MAAQN,EAAgBO,KAC9CC,EAAeX,EAAQU,KAAOP,EAAgBM,KAEpD,OAAOL,IAAgBG,GAAgBC,GAAeG,IAY9D,QAAgBC,GAA4BZ,EAAqBC,GAC7D,MAAOA,GAAiBC,KAAI,SAAEW,GAClC,GAAcC,GAAed,EAAQM,IAAMO,EAAoBP,IACjDS,EAAef,EAAQK,OAASQ,EAAoBR,OACpDW,EAAchB,EAAQU,KAAOG,EAAoBH,KACjDO,EAAejB,EAAQS,MAAQI,EAAoBJ,KAEzD,OAAOK,IAAgBC,GAAgBC,GAAeC,ICgD9D,QAAgBC,GACZC,EAAuC1D,GACvC,MAAO0D,IAAc,GAAIC,GAA0B3D,GC7BvD,QAAgB4D,GAAmCC,EACA7D,GAC/C,MAAO6D,IAAmB,GAAInC,GAAiB1B,GCy8BnD,QAAS8D,GAAaC,EAA2BC,GAC7C,IAAK,GAAIC,KAAOD,GACRA,EAAOE,eAAeD,KACtBF,EAAKE,GAAOD,EAAOC,GAI3B,OAAOF,GT/mBX,QAAgBhF,GAAuDoF,GAEnE,MAAA,YAAa,MAAAA,GAAQC,iBAAiBC,cG3Y1C,GAAIrC,GAAgB,SAASJ,EAAGC,GAI5B,OAHAG,EAAgB5H,OAAOkK,iBAChBC,uBAA2BC,QAAS,SAAU5C,EAAGC,GAAKD,EAAE2C,UAAY1C,IACvE,SAAUD,EAAGC,GAAK,IAAK,GAAI4C,KAAK5C,GAAOA,EAAEqC,eAAeO,KAAI7C,EAAE6C,GAAK5C,EAAE4C,MACpD7C,EAAGC,IASjB6C,EAAW,WAQlB,MAPAA,GAAWtK,OAAOuK,QAAU,SAAkBC,GAC1C,IAAK,GAAIC,GAAGC,EAAI,EAAGC,EAAIC,UAAUlJ,OAAQgJ,EAAIC,EAAGD,IAAK,CACjDD,EAAIG,UAAUF,EACd,KAAK,GAAIL,KAAKI,GAAOzK,OAAOE,UAAU4J,eAAejE,KAAK4E,EAAGJ,KAAIG,EAAEH,GAAKI,EAAEJ,IAE9E,MAAOG,IAEJF,EAAShJ,MAAMnD,KAAMyM,yBOjChC,QAAAC,MAUA,MARIA,GAAJ3K,UAAA4K,OAAI,aAGAD,EAAJ3K,UAAA6K,QAAI,aAGAF,EAAJ3K,UAAAd,OAAI,aAEJyL,kBCkCI,QAAJ7I,GAAgBgJ,GAAZ,GAAJxI,GAAArE,IAnCIA,MAAJY,eAAuC,GAAI8L,GAGvC1M,KAAJ8M,WAAqC,GAGjC9M,KAAJ+D,aAA4B,EAGxB/D,KAAJoE,cAAwC,4BA2B5ByI,GACAhL,OAAOkL,KAAKF,GACPG,OAAM,SAAEtB,GAAQ,WAAgB3F,KAAhB8G,EAAOnB,KACvBuB,QAAO,SAAEvB,GAAQ,MAAArH,GAAKqH,GAAOmB,EAAOnB,KAGrD,MAAA7H,mBPvBI,QAAJqJ,GACQhK,EACA0I,EACO3J,EACAI,GADArC,KAAfiC,QAAeA,EACAjC,KAAfqC,QAAeA,EAEPrC,KAAKR,QAAU0D,EAAO1D,QACtBQ,KAAKP,QAAUyD,EAAOzD,QACtBO,KAAKN,SAAWkM,EAAQlM,SACxBM,KAAKL,SAAWiM,EAAQjM,SAEhC,MAAAuN,mBA2BA,QAAAC,MAKA,MAAAA,MAGAC,EAAA,WACI,QAAJA,GAEeC,EAEYC,GAFZtN,KAAfqN,eAAeA,EAEYrN,KAA3BsN,yBAA2BA,EAE3B,2CAJArO,KAA+BiO,IAE/BjO,KAAqDkO,EAArDnH,aAAA/G,KAASgH,EAAAA,cAETmH,kBQtEI,QAAJG,GAAwBC,EAA+BC,GAA/BzN,KAAxBwN,eAAwBA,EALZxN,KAAZ0N,qBAAoCpD,IAAK,GAAII,KAAM,IAEvC1K,KAAZ2N,YAAyB,EAIjB3N,KAAKyH,UAAYgG,EAoEzB,MAhEIF,GAAJxL,UAAAd,OAAI,aAIAsM,EAAJxL,UAAA4K,OAAI,WAEI,GAAI3M,KAAK4N,gBAAiB,CAClC,GAAkBC,GAAO7N,KAAKyH,UAAyB,eAE3CzH,MAAK8N,wBAA0B9N,KAAKwN,eAAeO,4BAGnD/N,KAAK0N,oBAAoBhD,KAAOmD,EAAKG,MAAMtD,MAAQ,GACnD1K,KAAK0N,oBAAoBpD,IAAMuD,EAAKG,MAAM1D,KAAO,GAIjDuD,EAAKG,MAAMtD,KAAOuD,EAAAA,qBAAqBjO,KAAK8N,wBAAwBpD,MACpEmD,EAAKG,MAAM1D,IAAM2D,EAAAA,qBAAqBjO,KAAK8N,wBAAwBxD,KACnEuD,EAAKK,UAAUC,IAAI,0BACnBnO,KAAK2N,YAAa,IAK1BJ,EAAJxL,UAAA6K,QAAI,WACI,GAAI5M,KAAK2N,WAAY,CAC7B,GAAkBS,GAAOpO,KAAKyH,UAAyB,gBACrCe,EAAOxI,KAAKyH,UAAc,KAC1B4G,EAA6BD,EAAKJ,MAAsB,gBAAK,GAC7DM,EAA6B9F,EAAKwF,MAAsB,gBAAK,EAEnEhO,MAAK2N,YAAa,EAElBS,EAAKJ,MAAMtD,KAAO1K,KAAK0N,oBAAoBhD,KAC3C0D,EAAKJ,MAAM1D,IAAMtK,KAAK0N,oBAAoBpD,IAC1C8D,EAAKF,UAAUK,OAAO,0BAItBH,EAAKJ,MAAsB,eAAIxF,EAAKwF,MAAsB,eAAI,OAE9DQ,OAAOC,OAAOzO,KAAK8N,wBAAwBpD,KAAM1K,KAAK8N,wBAAwBxD,KAE9E8D,EAAKJ,MAAsB,eAAIK,EAC/B7F,EAAKwF,MAAsB,eAAIM,IAI/Bf,EAAZxL,UAAA6L,cAAI,WAMI,GAFa5N,KAAKyH,UAAyB,gBAElCyG,UAAUQ,SAAS,2BAA6B1O,KAAK2N,WAC1D,OAAO,CAGnB,IAAcnF,GAAOxI,KAAKyH,UAAUe,KACtBmG,EAAW3O,KAAKwN,eAAeoB,iBAErC,OAAOpG,GAAKqG,aAAeF,EAAS1K,QAAUuE,EAAKsG,YAAcH,EAAS3K,OAElFuJ,kBC3DI,QAAJwB,GACgBC,EACAC,EACAzB,EACA0B,GAJZ,GAAJ7K,GAAArE,IACgBA,MAAhBgP,kBAAgBA,EACAhP,KAAhBiP,QAAgBA,EACAjP,KAAhBwN,eAAgBA,EACAxN,KAAhBkP,QAAgBA,EARJlP,KAAZmP,oBAAuD,KAsD3CnP,KAAZoP,QAAmB,WACX/K,EAAKuI,UAEDvI,EAAK7B,YAAYkD,eACjBrB,EAAK4K,QAAQI,IAAG,WAAO,MAAAhL,GAAK7B,YAAYtB,YAGpD,MAjDI6N,GAAJhN,UAAAd,OAAI,SAAOqO,GACH,GAAItP,KAAKwC,YACL,KAAMsH,IAGV9J,MAAKwC,YAAc8M,GAIvBP,EAAJhN,UAAA4K,OAAI,WAAA,GAAJtI,GAAArE,IACQ,KAAIA,KAAKmP,oBAAT,CAIR,GAAcI,GAASvP,KAAKgP,kBAAkBQ,SAAS,EAE3CxP,MAAKkP,SAAWlP,KAAKkP,QAAQO,WAAazP,KAAKkP,QAAQO,UAAY,GACnEzP,KAAK0P,uBAAyB1P,KAAKwN,eAAeO,4BAA4BzD,IAE9EtK,KAAKmP,oBAAsBI,EAAOtK,UAAS,WACvD,GAAsB0K,GAAiBtL,EAAKmJ,eAAeO,4BAA4BzD,GAEnEsF,MAAKC,IAAIF,EAAiBtL,EAAKqL,wBAA0BrL,EAAY,QAAW,UAChFA,EAAK+K,UAEL/K,EAAK7B,YAAYsN,oBAIzB9P,KAAKmP,oBAAsBI,EAAOtK,UAAUjF,KAAKoP,WAKzDL,EAAJhN,UAAA6K,QAAI,WACQ5M,KAAKmP,sBACLnP,KAAKmP,oBAAoBxJ,cACzB3F,KAAKmP,oBAAsB,OAYvCJ,kBCtDI,QAAJgB,GACgBf,EACAxB,EACAyB,EACAC,GAHAlP,KAAhBgP,kBAAgBA,EACAhP,KAAhBwN,eAAgBA,EACAxN,KAAhBiP,QAAgBA,EACAjP,KAAhBkP,QAAgBA,EAPJlP,KAAZmP,oBAAuD,KAoDvD,MAzCIY,GAAJhO,UAAAd,OAAI,SAAOqO,GACH,GAAItP,KAAKwC,YACL,KAAMsH,IAGV9J,MAAKwC,YAAc8M,GAIvBS,EAAJhO,UAAA4K,OAAI,WAAA,GAAJtI,GAAArE,IACQ,KAAKA,KAAKmP,oBAAqB,CACvC,GAAkBa,GAAWhQ,KAAKkP,QAAUlP,KAAKkP,QAAQe,eAAiB,CAE9DjQ,MAAKmP,oBAAsBnP,KAAKgP,kBAAkBQ,SAASQ,GAAU/K,UAAS,WAI1E,GAHAZ,EAAK7B,YAAYsN,iBAGbzL,EAAK6K,SAAW7K,EAAK6K,QAAQgB,UAAW,CAC5D,GAA0BC,GAAc9L,EAAK7B,YAAY4N,eAAeC,wBAC9CC,EAA1BjM,EAAAmJ,eAAAoB,kBAA4B5K,EAA5BsM,EAAAtM,MAAmCC,EAAnCqM,EAAArM,MAMwB8F,GAA6BoG,IAFVnM,MAA3CA,EAAkDC,OAAlDA,EAA0DoG,OAAQpG,EAAQwG,MAAOzG,EAAOsG,IAAK,EAAGI,KAAM,OAG9ErG,EAAKuI,UACLvI,EAAK4K,QAAQI,IAAG,WAAO,MAAAhL,GAAK7B,YAAYtB,iBAQ5D6O,EAAJhO,UAAA6K,QAAI,WACQ5M,KAAKmP,sBACLnP,KAAKmP,oBAAoBxJ,cACzB3F,KAAKmP,oBAAsB,OAGvCY,KCzDAQ,EAAA,WAII,QAAJA,GACgBvB,EACAxB,EACAyB,EACUxB,GAJtB,GAAJpJ,GAAArE,IACgBA,MAAhBgP,kBAAgBA,EACAhP,KAAhBwN,eAAgBA,EACAxN,KAAhBiP,QAAgBA,EAMZjP,KAAJwQ,KAAQ,WAAS,MAAA,IAAI9D,IAMjB1M,KAAJyQ,MAAS,SAAI5D,GAAwC,MAAA,IAAIkC,GAAoB1K,EAAK2K,kBAC1E3K,EAAK4K,QAAS5K,EAAKmJ,eAAgBX,IAGvC7M,KAAJ0Q,MAAS,WAAS,MAAA,IAAInD,GAAoBlJ,EAAKmJ,eAAgBnJ,EAAKoD,YAOhEzH,KAAJ8L,WAAc,SAAIe,GAA6C,MAAA,IAAIkD,GAC3D1L,EAAK2K,kBAAmB3K,EAAKmJ,eAAgBnJ,EAAK4K,QAASpC,IAtB3D7M,KAAKyH,UAAYgG,EA7BzB,sBAoBAxO,KAACiK,EAAAA,WAAD/J,OAAcwR,WAAY,+CAlB1B1R,KAAS2R,EAAAA,mBAAT3R,KAA2B4R,EAAAA,gBAD3B5R,KAA6B6R,EAAAA,SA2B7B7R,SAAA8G,GAAAC,aAAA/G,KAASC,EAAAA,OAATC,MAAgBC,EAAAA,4NA5BhBmR,KRkBAnF,EAAA,WASI,QAAJA,GAAkCqC,GAA9B,GAAJpJ,GAAArE,IALIA,MAAJ+Q,qBA+CY/Q,KAAZgR,iBAA4B,SAAIzL,GACpBlB,EAAK0M,kBAAkBxN,QAIvBc,EAAK0M,kBAAkB1M,EAAK0M,kBAAkBxN,OAAS,GAAG0N,eAAeC,KAAK3L,IA9ClFvF,KAAKyH,UAAYgG,EA5BzB,MA+BIrC,GAAJrJ,UAAAU,YAAI,WACIzC,KAAKoP,WAIThE,EAAJrJ,UAAAoM,IAAI,SAAImB,GAEKtP,KAAKmR,cACNnR,KAAKyH,UAAUe,KAAKK,iBAAiB,UAAW7I,KAAKgR,kBAAkB,GACvEhR,KAAKmR,aAAc,GAGvBnR,KAAK+Q,kBAAkBnM,KAAK0K,IAIhClE,EAAJrJ,UAAAwM,OAAI,SAAOe,GACX,GAAc8B,GAAQpR,KAAK+Q,kBAAkBM,QAAQ/B,EAEzC8B,IAAS,GACTpR,KAAK+Q,kBAAkBO,OAAOF,EAAO,GAIH,IAAlCpR,KAAK+Q,kBAAkBxN,QACvBvD,KAAKoP,WAKLhE,EAAZrJ,UAAAqN,QAAI,WACQpP,KAAKmR,cACLnR,KAAKyH,UAAUe,KAAKV,oBAAoB,UAAW9H,KAAKgR,kBAAkB,GAC1EhR,KAAKmR,aAAc,mBA9C/BlS,KAACiK,EAAAA,WAAD/J,OAAcwR,WAAY,+CAS1B1R,SAAA8G,GAAAC,aAAA/G,KAAiBC,EAAAA,OAAjBC,MAAwBC,EAAAA,4IA3BxBgM,KAuFahE,GAGTf,QAAS+E,EACT9E,OACK,GAAIL,GAAAA,SAAY,GAAIsL,GAAAA,SAAYnG,GAIjChM,EAAQ,UAEZmH,WAAY2E,GCtFhB/B,EAAA,WAII,QAAJA,GAA4C1B,GAAAzH,KAA5CyH,UAA4CA,EAhB5C,MAmBI0B,GAAJpH,UAAAU,YAAI,WACQzC,KAAKuI,mBAAqBvI,KAAKuI,kBAAkBiJ,YACjDxR,KAAKuI,kBAAkBiJ,WAAWC,YAAYzR,KAAKuI,oBAU3DY,EAAJpH,UAAA2P,oBAAI,WAKI,MAJK1R,MAAKuI,mBACNvI,KAAKoI,mBAGFpI,KAAKuI,mBAONY,EAAdpH,UAAAqG,iBAAI,WACJ,GAAcuJ,GAAY3R,KAAKyH,UAAUmK,cAAc,MAE/CD,GAAUzD,UAAUC,IAAI,yBACxBnO,KAAKyH,UAAUe,KAAKC,YAAYkJ,GAChC3R,KAAKuI,kBAAoBoJ,kBApCjC1S,KAACiK,EAAAA,WAAD/J,OAAcwR,WAAY,+CAI1B1R,SAAA8G,GAAAC,aAAA/G,KAAiBC,EAAAA,OAAjBC,MAAwBC,EAAAA,4IAhBxB+J,KA4Da7B,GAETjB,QAAS8C,EACT7C,OACK,GAAIL,GAAAA,SAAY,GAAIsL,GAAAA,SAAYpI,GACjC/J,EAAQ,UAEZmH,WAAY8E,gBQtCZ,QAAJwG,GACgBC,EACAC,EACAC,EACA9C,EACAD,EACAgD,EACAxK,GANAzH,KAAhB8R,cAAgBA,EACA9R,KAAhB+R,MAAgBA,EACA/R,KAAhBgS,MAAgBA,EACAhS,KAAhBkP,QAAgBA,EACAlP,KAAhBiP,QAAgBA,EACAjP,KAAhBiS,oBAAgBA,EACAjS,KAAhByH,UAAgBA,EAdZzH,KAAJiR,eAAqB,GAAIiB,GAAAA,QAEblS,KAAZmS,iBAAmD,KACvCnS,KAAZoS,eAAkD,GAAIF,GAAAA,QAC1ClS,KAAZqS,aAA2B,GAAIH,GAAAA,QACnBlS,KAAZsS,aAA2B,GAAIJ,GAAAA,QAWnBhD,EAAQtO,gBACRsO,EAAQtO,eAAeK,OAAOjB,MA2U1C,MAtUI6B,QAAJC,eAAQ+P,EAAR9P,UAAA,sBAAI,WACI,MAAO/B,MAAKgS,uCAIhBnQ,OAAJC,eAAQ+P,EAAR9P,UAAA,uBAAI,WACI,MAAO/B,MAAKmS,kDAQhBtQ,OAAJC,eAAQ+P,EAAR9P,UAAA,mBAAI,WACI,MAAO/B,MAAK+R,uCAgBhBF,EAAJ9P,UAAAd,OAAI,SAAOsR,GAAP,GAAJlO,GAAArE,KACYwS,EAAexS,KAAK8R,cAAc7Q,OAAOsR,EA6C7C,OA3CIvS,MAAKkP,QAAQxL,kBACb1D,KAAKkP,QAAQxL,iBAAiBzC,OAAOjB,MAIzCA,KAAKyS,uBACLzS,KAAK0S,qBACL1S,KAAK2S,0BAED3S,KAAKkP,QAAQtO,gBACbZ,KAAKkP,QAAQtO,eAAe+L,SAMhC3M,KAAKiP,QAAQ2D,SACRC,eACAC,KAAKC,EAAAA,KAAK,IACV9N,UAAS,WAEFZ,EAAKqB,eACLrB,EAAKyL,mBAKjB9P,KAAKgT,sBAAqB,GAEtBhT,KAAKkP,QAAQnL,aACb/D,KAAKiT,kBAGLjT,KAAKkP,QAAQpC,YACb9M,KAAKkT,eAAelT,KAAKgS,MAAOhS,KAAKkP,QAAQpC,YAAY,GAI7D9M,KAAKqS,aAAanB,OAGlBlR,KAAKiS,oBAAoB9D,IAAInO,MAEtBwS,GAOXX,EAAJ9P,UAAAb,OAAI,WACI,GAAKlB,KAAK0F,cAAV,CAIA1F,KAAKmT,iBAKLnT,KAAKgT,sBAAqB,GAEtBhT,KAAKkP,QAAQxL,kBAAoB1D,KAAKkP,QAAQxL,iBAAiBxC,QAC/DlB,KAAKkP,QAAQxL,iBAAiBxC,SAG9BlB,KAAKkP,QAAQtO,gBACbZ,KAAKkP,QAAQtO,eAAegM,SAGxC,IAAcwG,GAAmBpT,KAAK8R,cAAc5Q,QAQ5C,OALAlB,MAAKsS,aAAapB,OAGlBlR,KAAKiS,oBAAoB1D,OAAOvO,MAEzBoT,IAIXvB,EAAJ9P,UAAA6D,QAAI,WACJ,GAAcyN,GAAarT,KAAK0F,aAEpB1F,MAAKkP,QAAQxL,kBACb1D,KAAKkP,QAAQxL,iBAAiBkC,UAG9B5F,KAAKkP,QAAQtO,gBACbZ,KAAKkP,QAAQtO,eAAegM,UAGhC5M,KAAKmT,iBACLnT,KAAKiS,oBAAoB1D,OAAOvO,MAChCA,KAAK8R,cAAclM,UACnB5F,KAAKqS,aAAaiB,WAClBtT,KAAKoS,eAAekB,WACpBtT,KAAKiR,eAAeqC,WAEhBtT,KAAK+R,OAAS/R,KAAK+R,MAAMP,aACzBxR,KAAK+R,MAAMP,WAAWC,YAAYzR,KAAK+R,OACvC/R,KAAK+R,MAAK,MAGd/R,KAAKgS,MAAK,KAENqB,GACArT,KAAKsS,aAAapB,OAGtBlR,KAAKsS,aAAagB,YAItBzB,EAAJ9P,UAAA2D,YAAI,WACI,MAAO1F,MAAK8R,cAAcpM,eAI9BmM,EAAJ9P,UAAAjB,cAAI,WACI,MAAOd,MAAKoS,eAAeS,gBAI/BhB,EAAJ9P,UAAAwR,YAAI,WACI,MAAOvT,MAAKqS,aAAaQ,gBAI7BhB,EAAJ9P,UAAAyR,YAAI,WACI,MAAOxT,MAAKsS,aAAaO,gBAI7BhB,EAAJ9P,UAAAuD,cAAI,WACI,MAAOtF,MAAKiR,eAAe4B,gBAI/BhB,EAAJ9P,UAAA0R,UAAI,WACI,MAAOzT,MAAKkP,SAIhB2C,EAAJ9P,UAAA+N,eAAI,WACQ9P,KAAKkP,QAAQxL,kBACb1D,KAAKkP,QAAQxL,iBAAiBP,SAKtC0O,EAAJ9P,UAAAsD,WAAI,SAAWqO,GACP1T,KAAKkP,QAAbyE,KAA4B3T,KAAKkP,QAAYwE,GACrC1T,KAAK0S,sBAITb,EAAJ9P,UAAA6R,aAAI,SAAaC,GACT7T,KAAKkP,QAAbyE,KAA4B3T,KAAKkP,SAASpL,UAAW+P,IAC7C7T,KAAK2S,2BAMTd,EAAJ9P,UAAA+R,aAAI,WACJ,GAAchQ,GAAY9D,KAAKkP,QAAQpL,SAE/B,OAAKA,GAIuB,gBAAdA,GAAyBA,EAAYA,EAAUxB,MAHlD,OAOPuP,EAAZ9P,UAAA4Q,wBAAI,WACI3S,KAAK+R,MAAMgC,aAAa,MAAO/T,KAAK8T,iBAIhCjC,EAAZ9P,UAAA2Q,mBAAI,WACJ,GAAc1E,GAAQhO,KAAKgS,MAAMhE,KAEzBA,GAAMhK,MAAQiK,EAAAA,oBAAoBjO,KAAKkP,QAAQlL,OAC/CgK,EAAM/J,OAASgK,EAAAA,oBAAoBjO,KAAKkP,QAAQjL,QAChD+J,EAAM9J,SAAW+J,EAAAA,oBAAoBjO,KAAKkP,QAAQhL,UAClD8J,EAAM7J,UAAY8J,EAAAA,oBAAoBjO,KAAKkP,QAAQ/K,WACnD6J,EAAMgG,SAAW/F,EAAAA,oBAAoBjO,KAAKkP,QAAQ8E,UAClDhG,EAAMiG,UAAYhG,EAAAA,oBAAoBjO,KAAKkP,QAAQ+E,YAI/CpC,EAAZ9P,UAAAiR,qBAAI,SAA6BkB,GACzBlU,KAAKgS,MAAMhE,MAAMmG,cAAgBD,EAAgB,OAAS,QAItDrC,EAAZ9P,UAAAkR,gBAAI,WAAA,GAAJ5O,GAAArE,IAGQA,MAAKmS,iBAAmBnS,KAAKyH,UAAUmK,cAAc,OACrD5R,KAAKmS,iBAAiBjE,UAAUC,IAAI,wBAEhCnO,KAAKkP,QAAQ9K,eACbpE,KAAKkT,eAAelT,KAAKmS,iBAAkBnS,KAAKkP,QAAQ9K,eAAe,GAK3EpE,KAAK+R,MAAmB,cAAEqC,aAAapU,KAAKmS,iBAAkBnS,KAAK+R,OAInE/R,KAAKmS,iBAAiBtJ,iBAAiB,QAAO,SACzCtD,GAAsB,MAAAlB,GAAK+N,eAAelB,KAAK3L,SAGtBQ,KAA1BsO,sBACArU,KAAKiP,QAAQqF,kBAAiB,WAC1BD,sBAAqB,WACbhQ,EAAK8N,kBACL9N,EAAK8N,iBAAiBjE,UAAUC,IAvB3B,oCA4BjBnO,KAAKmS,iBAAiBjE,UAAUC,IA5Bf,iCAuCjB0D,EAAZ9P,UAAA0Q,qBAAI,WACQzS,KAAK+R,MAAMwC,aACXvU,KAAK+R,MAAgB,WAAEtJ,YAAYzI,KAAK+R,QAKhDF,EAAJ9P,UAAAoR,eAAI,WAAA,GAAJ9O,GAAArE,KACYwU,EAAmBxU,KAAKmS,gBAE5B,IAAIqC,EAAkB,CAC9B,GAAgBC,GAAY,WAERD,GAAoBA,EAAiBhD,YACrCgD,EAAiBhD,WAAWC,YAAY+C,GAMxCnQ,EAAK8N,mBAAqBqC,IAC1BnQ,EAAK8N,iBAAmB,MAIhCqC,GAAiBtG,UAAUK,OAAO,gCAE9BvO,KAAKkP,QAAQ9K,eACbpE,KAAKkT,eAAesB,EAAkBxU,KAAKkP,QAAQ9K,eAAe,GAGtEoQ,EAAiB3L,iBAAiB,gBAAiB4L,GAInDD,EAAiBxG,MAAMmG,cAAgB,OAKvCnU,KAAKiP,QAAQqF,kBAAiB,WAAO,MAAAI,YAAWD,EAAc,SAK9D5C,EAAZ9P,UAAAmR,eAAI,SAAuBlJ,EAAsB2K,EAA+BC,GAChF,GAAc1G,GAAYlE,EAAQkE,SAE1B2G,GAAAA,YAAYF,GAAY1H,QAAO,SAAE6H,GAE7BF,EAAQ1G,EAAUC,IAAI2G,GAAY5G,EAAUK,OAAOuG,MAG/DjD,kBPlQI,QAAJkD,GACQC,EACQxH,EACA/F,EAEAwN,GAHAjV,KAAhBwN,eAAgBA,EACAxN,KAAhByH,UAAgBA,EAEAzH,KAAhBiV,UAAgBA,EAxFZjV,KAAJkV,uBAWYlV,KAAZmV,kBAA+B,EAGnBnV,KAAZoV,sBAAqCpR,MAAO,EAAGC,OAAQ,GAG3CjE,KAAZqV,WAAwB,EAGZrV,KAAZsV,UAAuB,EAGXtV,KAAZqB,gBAA6B,EAGjBrB,KAAZuV,wBAAqC,EAGzBvV,KAAZwV,iBAA8B,EAYlBxV,KAAZyV,gBAA8B,EAGlBzV,KAAZ0V,eAqBY1V,KAAZ2V,iBAA+B,GAAIzD,GAAAA,QAGvBlS,KAAZ4V,oBAAkCnU,EAAAA,aAAaC,MAGnC1B,KAAZgC,SAAuB,EAGXhC,KAAZoC,SAAuB,EAMnBpC,KAAJgF,gBACQhF,KAAK2V,iBAAiB9C,eAQtB7S,KAAKiD,UAAU+R,GA20BvB,MAj6BInT,QAAJC,eAAQiT,EAARhT,UAAA,iBAAI,WACI,MAAO/B,MAAKkV,qDAyFhBH,EAAJhT,UAAAd,OAAI,SAAOqO,GAAP,GAAJjL,GAAArE,IACQ,IAAIA,KAAKwC,aAAe8M,IAAetP,KAAKwC,YACxC,KAAMoH,OAAM,2DAGhB5J,MAAK6V,qBAELvG,EAAWwG,YAAY5H,UAAUC,IAAI,+CAErCnO,KAAKwC,YAAc8M,EACnBtP,KAAK+V,aAAezG,EAAWwG,YAC/B9V,KAAKgS,MAAQ1C,EAAWc,eACxBpQ,KAAK4V,oBAAoBjQ,cACzB3F,KAAK4V,oBAAsB5V,KAAKwN,eAAewI,SAAS/Q,UAAS,WAAO,MAAAZ,GAAKlB,WAiBjF4R,EAAJhT,UAAAoB,MAAI,WAEI,KAAInD,KAAKiW,aAAgBjW,KAAKiV,YAAcjV,KAAKiV,UAAUiB,WAA3D,CAMA,IAAKlW,KAAKmV,kBAAoBnV,KAAKwV,iBAAmBxV,KAAKmW,cAGvD,WAFAnW,MAAKoW,qBAITpW,MAAKqW,6BACLrW,KAAKsW,0BAILtW,KAAKuW,cAAgBvW,KAAKwW,2BAC1BxW,KAAKyW,YAAczW,KAAK0W,QAAQrG,wBAChCrQ,KAAK2W,aAAe3W,KAAKgS,MAAM3B,uBAY/B,KAAgB,GAJZuG,GANEC,EAAa7W,KAAKyW,YAClBtG,EAAcnQ,KAAK2W,aACnBG,EAAe9W,KAAKuW,cAEpBQ,KAMdC,EAAA,EAAwB1G,EAAAtQ,KAAKkV,oBAAL8B,EAAxB1G,EAAA/M,OAAwByT,IAA0B,CAArC,GAAI5R,GAAjBkL,EAAA0G,GAEgBC,EAAcjX,KAAKkX,gBAAgBL,EAAYzR,GAI/C+R,EAAenX,KAAKoX,iBAAiBH,EAAa9G,EAAa/K,GAE/DiS,EAAarX,KAAKsX,eAAeH,EAAchH,EAAa2G,EAAc1R,EAE9E,IAAIiS,EAAWE,2BAIX,MAHAvX,MAAKqV,WAAY,MACjBrV,MAAKwX,eAAepS,EAAK6R,EAMzBjX,MAAKyX,8BAA8BJ,EAAYF,EAAcL,GAG7DC,EAAanS,MACTL,SAAUa,EACVlC,OAAQ+T,EACR9G,YAApBA,EACoBuH,gBAAiB1X,KAAK2X,0BAA0BV,EAAa7R,OAShEwR,GAAYA,EAASS,WAAWO,YAAcP,EAAWO,eAC1DhB,GAAaS,WAA7BA,EAAyCF,aAAzCA,EAAuDF,YAAvDA,EAAoE1S,SAAUa,EAAK+K,YAAnFA,IAMQ,GAAI4G,EAAaxT,OAAQ,CAGrB,IAAkB,GAFdsU,GAA+B,KAC/BC,GAAa,EAC7BC,EAAA,EAA8BC,EAA9BjB,EAA8BgB,EAA9BC,EAAAzU,OAA8BwU,IAAc,CAA3B,GAAME,GAAvBD,EAAAD,GACsBG,EACFD,EAAIP,gBAAgB1T,MAAQiU,EAAIP,gBAAgBzT,QAAUgU,EAAI1T,SAAS4T,QAAU,EACjFD,GAAQJ,IACRA,EAAYI,EACZL,EAAUI,GAOlB,MAHAjY,MAAKqV,WAAY,MACjBrV,MAAKwX,eAAe,EAASjT,SAAU,EAASrB,QAOpD,GAAIlD,KAAKsV,SAIL,MAHAtV,MAAKqV,WAAY,MACjBrV,MAAKwX,eAAe,EAAUjT,SAAU,EAAU0S,YAOtDjX,MAAKwX,eAAe,EAAUjT,SAAU,EAAU0S,eAGtDlC,EAAJhT,UAAAb,OAAI,WACIlB,KAAK4V,oBAAoBjQ,eAI7BoP,EAAJhT,UAAA6D,QAAI,WACS5F,KAAKiW,cACNjW,KAAKkB,SACLlB,KAAK+V,aAAe,KACpB/V,KAAK2V,iBAAiBrC,WACtBtT,KAAKiW,aAAc,IAS3BlB,EAAJhT,UAAAqU,oBAAI,WACI,IAAKpW,KAAKiW,eAAiBjW,KAAKiV,WAAajV,KAAKiV,UAAUiB,WAAY,CACpElW,KAAKyW,YAAczW,KAAK0W,QAAQrG,wBAChCrQ,KAAK2W,aAAe3W,KAAKgS,MAAM3B,wBAC/BrQ,KAAKuW,cAAgBvW,KAAKwW,0BAEtC,IAAkB4B,GAAepY,KAAKmW,eAAiBnW,KAAKkV,oBAAoB,GAC9D+B,EAAcjX,KAAKkX,gBAAgBlX,KAAKyW,YAAa2B,EAE3DpY,MAAKwX,eAAeY,EAAcnB,KAS1ClC,EAAJhT,UAAAsW,yBAAI,SAAyB3C,GACrB1V,KAAK0V,YAAcA,GAOvBX,EAAJhT,UAAAc,cAAI,SAAcC,GAWV,MAVA,MAAKoS,oBAAsBpS,GAIqB,IAA5CA,EAAUuO,QAAQ,KAAkB,iBACpC,KAAK8E,cAAgB,MAGzB,KAAKN,qBAEL,MAOJd,EAAJhT,UAAAgD,mBAAI,SAAmBuT,GAGf,MAFA,MAAK7C,gBAAkB6C,EAEvB,MAIJvD,EAAJhT,UAAA0C,uBAAI,SAAuB8T,GAGnB,WAHR,KAAAA,IAA2BA,GAA3B,GACQ,KAAKhD,uBAAyBgD,EAE9B,MAIJxD,EAAJhT,UAAA8C,kBAAI,SAAkBC,GAGd,WAHR,KAAAA,IAAsBA,GAAtB,GACQ,KAAKzD,eAAiByD,EAEtB,MAIJiQ,EAAJhT,UAAA4C,SAAI,SAAS6T,GAGL,WAHR,KAAAA,IAAaA,GAAb,GACQ,KAAKlD,SAAWkD,EAEhB,MASJzD,EAAJhT,UAAAgB,mBAAI,SAAmB0V,GAGf,WAHR,KAAAA,IAAuBA,GAAvB,GACQ,KAAKjD,gBAAkBiD,EAEvB,MAOJ1D,EAAJhT,UAAAkB,UAAI,SAAUC,GAGN,MAFA,MAAKwT,QAAUxT,YAAkB9C,GAAAA,WAAa8C,EAAOwV,cAAgBxV,EAErE,MAOJ6R,EAAJhT,UAAA4W,mBAAI,SAAmBC,GAGf,MAFA,MAAK5W,SAAW4W,EAEhB,MAOJ7D,EAAJhT,UAAA8W,mBAAI,SAAmBD,GAGf,MAFA,MAAKxW,SAAWwW,EAEhB,MAWJ7D,EAAJhT,UAAA+W,sBAAI,SAAsB5Y,GAGlB,MAFA,MAAK6Y,yBAA2B7Y,EAEhC,MAMI6U,EAAZhT,UAAAmV,gBAAI,SAAwBL,EAAwBzR,GACpD,GAAY4T,EACJ,IAAoB,WAAhB5T,EAAI5F,QAGJwZ,EAAInC,EAAWnM,KAAQmM,EAAW7S,MAAQ,MACvC,CACf,GAAkBiV,GAASjZ,KAAKkZ,SAAWrC,EAAWpM,MAAQoM,EAAWnM,KACvDyO,EAAOnZ,KAAKkZ,SAAWrC,EAAWnM,KAAOmM,EAAWpM,KAC1DuO,GAAoB,UAAhB5T,EAAI5F,QAAsByZ,EAASE,EAGnD,GAAYC,EAOJ,OALIA,GADgB,WAAhBhU,EAAI3F,QACAoX,EAAWvM,IAAOuM,EAAW5S,OAAS,EAEtB,QAAhBmB,EAAI3F,QAAoBoX,EAAWvM,IAAMuM,EAAWxM,QAGnD2O,EAAjBA,EAAoBI,EAApBA,IAQYrE,EAAZhT,UAAAqV,iBAAI,SACIH,EACA9G,EACA/K,GAIR,GAAYiU,EAEAA,GADiB,WAAjBjU,EAAI1F,UACayQ,EAAYnM,MAAQ,EACb,UAAjBoB,EAAI1F,SACKM,KAAKkZ,UAAY/I,EAAYnM,MAAQ,EAErChE,KAAKkZ,SAAW,GAAK/I,EAAYnM,KAG7D,IAAYsV,EAQJ,OANIA,GADiB,WAAjBlU,EAAIzF,UACawQ,EAAYlM,OAAS,EAEL,QAAjBmB,EAAIzF,SAAqB,GAAKwQ,EAAYlM,QAK1D+U,EAAG/B,EAAY+B,EAAIK,EACnBD,EAAGnC,EAAYmC,EAAIE,IAKnBvE,EAAZhT,UAAAuV,eAAI,SAAuBiC,EAAe3N,EAAqB+C,EACpCpK,GAEb,GAAAyU,GAAdO,EAAAP,EAAiBI,EAAjBG,EAAAH,EACYnX,EAAUjC,KAAKwZ,WAAWjV,EAAU,KACpClC,EAAUrC,KAAKwZ,WAAWjV,EAAU,IAGpCtC,KACA+W,GAAK/W,GAGLI,IACA+W,GAAK/W,EAIjB,IAAYoX,GAAe,EAAIT,EACnBU,EAAiBV,EAAIpN,EAAQ5H,MAAS2K,EAAS3K,MAC/C2V,EAAc,EAAIP,EAClBQ,EAAkBR,EAAIxN,EAAQ3H,OAAU0K,EAAS1K,OAGjD4V,EAAe7Z,KAAK8Z,mBAAmBlO,EAAQ5H,MAAOyV,EAAcC,GACpEK,EAAgB/Z,KAAK8Z,mBAAmBlO,EAAQ3H,OAAQ0V,EAAaC,GACrEhC,EAAciC,EAAeE,CAEjC,QACInC,YAAZA,EACYL,2BAA6B3L,EAAQ5H,MAAQ4H,EAAQ3H,SAAY2T,EACjEoC,yBAA0BD,IAAkBnO,EAAQ3H,OACpDgW,2BAA4BJ,IAAiBjO,EAAQ5H,QAUrD+Q,EAAZhT,UAAA0V,8BAAI,SAAsCyC,EAAkBX,EAAe5K,GACnE,GAAI3O,KAAKuV,uBAAwB,CACzC,GAAkB4E,GAAkBxL,EAAStE,OAASkP,EAAMH,EAC1CgB,EAAiBzL,EAASlE,MAAQ8O,EAAMP,EACxC7U,EAAYnE,KAAKwC,YAAYiR,YAAYtP,UACzCD,EAAWlE,KAAKwC,YAAYiR,YAAYvP,SAExCmW,EAAcH,EAAIF,0BACN,MAAb7V,GAAqBA,GAAagW,EACjCG,EAAgBJ,EAAID,4BACT,MAAZ/V,GAAoBA,GAAYkW,CAErC,OAAOC,IAAeC,IActBvF,EAAZhT,UAAAwY,qBAAI,SAA6BC,EAAe5O,GAChD,GAUY6O,GAVE9L,EAAW3O,KAAKuW,cAIhBmE,EAAgB9K,KAAK+K,IAAIH,EAAMxB,EAAIpN,EAAQ5H,MAAQ2K,EAASlE,MAAO,GACnEmQ,EAAiBhL,KAAK+K,IAAIH,EAAMpB,EAAIxN,EAAQ3H,OAAS0K,EAAStE,OAAQ,GACtEwQ,EAAcjL,KAAK+K,IAAIhM,EAASrE,IAAMkQ,EAAMpB,EAAG,GAC/C0B,EAAelL,KAAK+K,IAAIhM,EAASjE,KAAO8P,EAAMxB,EAAG,GAG5C+B,EAAQ,CAiBnB,OAXIN,GADA7O,EAAQ5H,OAAS2K,EAAS3K,MAClB8W,IAAiBJ,EAEjB/L,EAASjE,KAAO8P,EAAMxB,EAI9B+B,EADAnP,EAAQ3H,QAAU0K,EAAS1K,OACnB4W,IAAgBD,EAEhBjM,EAASrE,IAAMkQ,EAAMpB,GAI7BJ,EAAGwB,EAAMxB,EAAIyB,EACbrB,EAAGoB,EAAMpB,EAAI2B,IASbhG,EAAZhT,UAAAyV,eAAI,SAAuBjT,EAA8B0S,GAWjD,GAVAjX,KAAKgb,oBAAoBzW,GACzBvE,KAAKib,yBAAyBhE,EAAa1S,GAC3CvE,KAAKkb,sBAAsBjE,EAAa1S,GAGxCvE,KAAKmW,cAAgB5R,EAKjBvE,KAAK2V,iBAAiBwF,UAAU5X,OAAQ,CACpD,GAAkB+J,GAA2BtN,KAAKob,uBAChCC,EAAc,GAAIjO,GAA+B7I,EAAU+I,EACjEtN,MAAK2V,iBAAiBzE,KAAKmK,GAG/Brb,KAAKmV,kBAAmB,GAIpBJ,EAAZhT,UAAAiZ,oBAAI,SAA4BzW,GACxB,GAAKvE,KAAK+Y,yBAAV,CAER,GAEYuC,GAFEC,EACFvb,KAAiB,aAAEwb,iBAAiBxb,KAAK+Y,0BAEzC0C,EAAuClX,EAAS5E,QAGhD2b,GADsB,WAAtB/W,EAAS7E,SACC,SACHM,KAAKkZ,SACoB,UAAtB3U,EAAS7E,SAAuB,QAAU,OAEpB,UAAtB6E,EAAS7E,SAAuB,OAAS,OAGvD,KAAK,GAAI6M,GAAI,EAAGA,EAAIgP,EAAShY,OAAQgJ,IACjCgP,EAAShP,GAAGyB,MAAM0N,gBAAqBJ,EAAnD,IAA8DG,IAUlD1G,EAAZhT,UAAA4V,0BAAI,SAAkCzU,EAAgBqB,GACtD,GAEYN,GAAQqG,EAAKD,EAFXsE,EAAW3O,KAAKuW,cAChBoF,EAAQ3b,KAAKkZ,QAGnB,IAA0B,QAAtB3U,EAAS5E,SAET2K,EAAMpH,EAAOkW,EACbnV,EAAS0K,EAAStE,OAASnH,EAAOkW,MAC/B,IAA0B,WAAtB7U,EAAS5E,SAIhB0K,EAASsE,EAAS1K,OAASf,EAAOkW,EAA2B,EAAvBpZ,KAAKyV,gBAC3CxR,EAAS0K,EAAS1K,OAASoG,EAASrK,KAAKyV,oBACtC,CAGf,GAAkBmG,GACFhM,KAAKiM,IAAIlN,EAAStE,OAASnH,EAAOkW,EAAGlW,EAAOkW,EAAIzK,EAASjE,MACvDoR,EAAiB9b,KAAKoV,qBAAqBnR,MAEjDA,GAA0C,EAAjC2X,EACTtR,EAAMpH,EAAOkW,EAAIwC,EAEb3X,EAAS6X,IAAmB9b,KAAKmV,mBAAqBnV,KAAKqB,iBAC3DiJ,EAAMpH,EAAOkW,EAAK0C,EAAiB,GAKnD,GASY9X,GAAO0G,EAAMD,EATXsR,EACqB,UAAtBxX,EAAS7E,WAAyBic,GACZ,QAAtBpX,EAAS7E,UAAsBic,EAG9BK,EACqB,QAAtBzX,EAAS7E,WAAuBic,GACV,UAAtBpX,EAAS7E,UAAwBic,CAItC,IAAIK,EACAvR,EAAQkE,EAASlE,MAAQvH,EAAO8V,EAAIhZ,KAAKyV,gBACzCzR,EAAQd,EAAO8V,EAAIrK,EAASjE,SACzB,IAAIqR,EACPrR,EAAOxH,EAAO8V,EACdhV,EAAQ2K,EAASlE,MAAQvH,EAAO8V,MAC7B,CAGf,GAAkB4C,GACFhM,KAAKiM,IAAIlN,EAASlE,MAAQvH,EAAO8V,EAAG9V,EAAO8V,EAAIrK,EAASrE,KACtD2R,EAAgBjc,KAAKoV,qBAAqBpR,KAEhDA,GAAyC,EAAjC4X,EACRlR,EAAOxH,EAAO8V,EAAI4C,EAEd5X,EAAQiY,IAAkBjc,KAAKmV,mBAAqBnV,KAAKqB,iBACzDqJ,EAAOxH,EAAO8V,EAAKiD,EAAgB,GAI3C,OAAS3R,IAAjBA,EAAsBI,KAAtBA,EAA4BL,OAA5BA,EAAoCI,MAApCA,EAA2CzG,MAA3CA,EAAkDC,OAAlDA,IAUY8Q,EAAZhT,UAAAmZ,sBAAI,SAA8BhY,EAAgBqB,GAClD,GAAcmT,GAAkB1X,KAAK2X,0BAA0BzU,EAAQqB,EAI1DvE,MAAKmV,kBAAqBnV,KAAKqB,iBAChCqW,EAAgBzT,OAAS2L,KAAKiM,IAAInE,EAAgBzT,OAAQjE,KAAKoV,qBAAqBnR,QACpFyT,EAAgB1T,MAAQ4L,KAAKiM,IAAInE,EAAgB1T,MAAOhE,KAAKoV,qBAAqBpR,OAG9F,IAAckY,KAEN,IAAIlc,KAAKmc,oBACLD,EAAO5R,IAAM4R,EAAOxR,KAAO,IAC3BwR,EAAO7R,OAAS6R,EAAOzR,MAAQ,GAC/ByR,EAAOlY,MAAQkY,EAAOjY,OAAS,WAC5B,CACf,GAAkBgQ,GAAYjU,KAAKwC,YAAYiR,YAAYQ,UACzCD,EAAWhU,KAAKwC,YAAYiR,YAAYO,QAE9CkI,GAAOjY,OAASgK,EAAAA,oBAAoByJ,EAAgBzT,QACpDiY,EAAO5R,IAAM2D,EAAAA,oBAAoByJ,EAAgBpN,KACjD4R,EAAO7R,OAAS4D,EAAAA,oBAAoByJ,EAAgBrN,QACpD6R,EAAOlY,MAAQiK,EAAAA,oBAAoByJ,EAAgB1T,OACnDkY,EAAOxR,KAAOuD,EAAAA,oBAAoByJ,EAAgBhN,MAClDwR,EAAOzR,MAAQwD,EAAAA,oBAAoByJ,EAAgBjN,OAGzB,WAAtBlG,EAAS7E,SACTwc,EAAOE,WAAa,SAEpBF,EAAOE,WAAmC,QAAtB7X,EAAS7E,SAAqB,WAAa,aAGzC,WAAtB6E,EAAS5E,SACTuc,EAAOG,eAAiB,SAExBH,EAAOG,eAAuC,WAAtB9X,EAAS5E,SAAwB,WAAa,aAGtEsU,IACAiI,EAAOjI,UAAYhG,EAAAA,oBAAoBgG,IAGvCD,IACAkI,EAAOlI,SAAW/F,EAAAA,oBAAoB+F,IAI9ChU,KAAKoV,qBAAuBsC,EAE5BnM,EAAavL,KAAiB,aAAEgO,MAAOkO,IAInCnH,EAAZhT,UAAAuU,wBAAI,WACI/K,EAAavL,KAAiB,aAAEgO,OAC5B1D,IAAK,IACLI,KAAM,IACND,MAAO,IACPJ,OAAQ,IACRpG,OAAQ,GACRD,MAAO,GACPoY,WAAY,GACZC,eAAgB,MAKhBtH,EAAZhT,UAAAsU,2BAAI,WACI9K,EAAavL,KAAKgS,MAAMhE,OACpB1D,IAAK,GACLI,KAAM,GACNL,OAAQ,GACRI,MAAO,GACPlG,SAAU,MAKVwQ,EAAZhT,UAAAkZ,yBAAI,SAAiChE,EAAqB1S,GAC1D,GAAc2X,KAEFlc,MAAKmc,qBACL5Q,EAAa2Q,EAAQlc,KAAKsc,kBAAkB/X,EAAU0S,IACtD1L,EAAa2Q,EAAQlc,KAAKuc,kBAAkBhY,EAAU0S,KAEtDiF,EAAO3X,SAAW,QAQ9B,IAAYiY,GAAkB,GAClBva,EAAUjC,KAAKwZ,WAAWjV,EAAU,KACpClC,EAAUrC,KAAKwZ,WAAWjV,EAAU,IAEpCtC,KACAua,GAAmB,cAAcva,EAA7C,QAGYI,IACAma,GAAmB,cAAcna,EAA7C,OAGQ6Z,EAAOO,UAAYD,EAAgBE,OAK/B1c,KAAKuV,wBAA0BvV,KAAKwC,YAAYiR,YAAYQ,YAC5DiI,EAAOjI,UAAY,IAGnBjU,KAAKuV,wBAA0BvV,KAAKwC,YAAYiR,YAAYO,WAC5DkI,EAAOlI,SAAW,IAGtBzI,EAAavL,KAAKgS,MAAMhE,MAAOkO,IAI3BnH,EAAZhT,UAAAua,kBAAI,SAA0B/X,EAA8B0S,GAG5D,GAAYiF,IAAW5R,IAAK,KAAMD,OAAQ,MAC9B8M,EAAenX,KAAKoX,iBAAiBH,EAAajX,KAAK2W,aAAcpS,EAQzE,IANIvE,KAAKqV,YACL8B,EAAenX,KAAKua,qBAAqBpD,EAAcnX,KAAK2W,eAKtC,WAAtBpS,EAAS5E,SAAuB,CAG5C,GAAkBgd,GAAiB3c,KAAKyH,UAAyB,gBAAEmV,YACvDV,GAAO7R,OAAYsS,GAAkBxF,EAAaiC,EAAIpZ,KAAK2W,aAAa1S,QAApF,SAEYiY,GAAO5R,IAAM2D,EAAAA,oBAAoBkJ,EAAaiC,EAGlD,OAAO8C,IAIHnH,EAAZhT,UAAAwa,kBAAI,SAA0BhY,EAA8B0S,GAG5D,GAAYiF,IAAWxR,KAAM,KAAMD,MAAO,MAC9B0M,EAAenX,KAAKoX,iBAAiBH,EAAajX,KAAK2W,aAAcpS,EAErEvE,MAAKqV,YACL8B,EAAenX,KAAKua,qBAAqBpD,EAAcnX,KAAK2W,cAiBhE,IAAgC,WAR5B3W,KAAKkZ,SAC2C,QAAtB3U,EAAS7E,SAAqB,OAAS,QAEjB,QAAtB6E,EAAS7E,SAAqB,QAAU,QAK7B,CACjD,GAAkBmd,GAAgB7c,KAAKyH,UAAyB,gBAAEqV,WACtDZ,GAAOzR,MAAWoS,GAAiB1F,EAAa6B,EAAIhZ,KAAK2W,aAAa3S,OAAlF,SAEYkY,GAAOxR,KAAOuD,EAAAA,oBAAoBkJ,EAAa6B,EAGnD,OAAOkD,IAOHnH,EAAZhT,UAAAqZ,qBAAI,WAEJ,GAAc2B,GAAe/c,KAAK0W,QAAQrG,wBAC5B2M,EAAgBhd,KAAKgS,MAAM3B,wBAI3B4M,EAAwBjd,KAAK0V,YAAYvQ,IAAG,SAAE+X,GAChD,MAAOA,GAAWC,gBAAgBzE,cAAcrI,yBAGpD,QACI+M,gBAAiBxS,EAA4BmS,EAAcE,GAC3DI,oBAAqBtT,EAA6BgT,EAAcE,GAChEK,iBAAkB1S,EAA4BoS,EAAeC,GAC7DM,qBAAsBxT,EAA6BiT,EAAeC,KAKlElI,EAAZhT,UAAA+X,mBAAI,SAA2BvW,GAA/B,IAA+C,GAA/Cia,MAAAxG,EAAA,EAA+CA,EAA/CvK,UAAAlJ,OAA+CyT,IAAAwG,EAA/CxG,EAAA,GAAAvK,UAAAuK,EACQ,OAAOwG,GAAUC,OAAM,SAAEC,EAAsBC,GAC3C,MAAOD,GAAe9N,KAAK+K,IAAIgD,EAAiB,IACjDpa,IAICwR,EAAZhT,UAAAyU,yBAAI,WAMJ,GAAcxS,GAAQhE,KAAKyH,UAAyB,gBAAEqV,YACxC7Y,EAASjE,KAAKyH,UAAyB,gBAAEmV,aACzCjN,EAAiB3P,KAAKwN,eAAeO,2BAE3C,QACIzD,IAAKqF,EAAerF,IAAMtK,KAAKyV,gBAC/B/K,KAAMiF,EAAejF,KAAO1K,KAAKyV,gBACjChL,MAAOkF,EAAejF,KAAO1G,EAAQhE,KAAKyV,gBAC1CpL,OAAQsF,EAAerF,IAAMrG,EAASjE,KAAKyV,gBAC3CzR,MAAOA,EAAS,EAAIhE,KAAKyV,gBACzBxR,OAAQA,EAAU,EAAIjE,KAAKyV,kBAK3BV,EAAZhT,UAAAmX,OAAI,WACI,MAA2C,QAApClZ,KAAKwC,YAAYsR,gBAIpBiB,EAAZhT,UAAAoa,kBAAI,WACI,OAAQnc,KAAKuV,wBAA0BvV,KAAKqV,WAIxCN,EAAZhT,UAAAyX,WAAI,SAAmBjV,EAA8BqZ,GAC7C,MAAa,MAATA,EAG2B,MAApBrZ,EAAStC,QAAkBjC,KAAKgC,SAAWuC,EAAStC,QAGpC,MAApBsC,EAASlC,QAAkBrC,KAAKoC,SAAWmC,EAASlC,SAIvD0S,EAAZhT,UAAA8T,mBAAI,WACI,IAAK7V,KAAKkV,oBAAoB3R,OAC1B,KAAMqG,OAAM,wEAKhB5J,MAAKkV,oBAAoBjI,QAAO,SAAE4Q,GAC9BhU,EAA2B,UAAWgU,EAAKre,SAC3CkK,EAAyB,UAAWmU,EAAKpe,SACzCoK,EAA2B,WAAYgU,EAAKne,UAC5CgK,EAAyB,WAAYmU,EAAKle,aAGtDoV,kBQ74BI,QAAJ+I,GACQC,EACAC,EACAhJ,EACAiJ,EACAxQ,EAEAyQ,GAxBJle,KAAJkV,uBA8BQlV,KAAKme,kBACD,GAAIpJ,GAAkCC,EAAaiJ,EAAexQ,EAAUyQ,GACvEzZ,wBAAuB,GACvBE,UAAS,GACTI,mBAAmB,GAE5B/E,KAAKoe,qBAAqBL,EAAWC,GA+I7C,MA3KInc,QAAJC,eAAQgc,EAAR/b,UAAA,cAAI,WACI,MAA2C,QAApC/B,KAAKwC,YAAYsR,gDAI5BjS,OAAJC,eAAQgc,EAAR/b,UAAA,wBAAI,WACI,MAAO/B,MAAKme,kBAAkBnZ,iDA0BlCnD,OAAJC,eAAQgc,EAAR/b,UAAA,iBAAI,WACI,MAAO/B,MAAKkV,qDAIhB4I,EAAJ/b,UAAAd,OAAI,SAAOqO,GACHtP,KAAKwC,YAAc8M,EACnBtP,KAAKme,kBAAkBld,OAAOqO,GAE1BtP,KAAKqe,aACL/O,EAAWsE,aAAa5T,KAAKqe,YAC7Bre,KAAKqe,WAAa,OAK1BP,EAAJ/b,UAAA6D,QAAI,WACI5F,KAAKme,kBAAkBvY,WAI3BkY,EAAJ/b,UAAAb,OAAI,WACIlB,KAAKme,kBAAkBjd,UAQ3B4c,EAAJ/b,UAAAoB,MAAI,WACInD,KAAKme,kBAAkBhb,SAQ3B2a,EAAJ/b,UAAAuc,wBAAI,WACIte,KAAKme,kBAAkB/H,uBAQ3B0H,EAAJ/b,UAAAsW,yBAAI,SAAyB3C,GACrB1V,KAAKme,kBAAkB9F,yBAAyB3C,IAQpDoI,EAAJ/b,UAAAqc,qBAAI,SACIL,EACAC,EACA/b,EACAI,GAER,GAAckC,GAAW,GAAI2I,GAAuB6Q,EAAWC,EAAY/b,EAASI,EAI5E,OAHA,MAAK6S,oBAAoBtQ,KAAKL,GAC9B,KAAK4Z,kBAAkBtb,cAAc,KAAKqS,qBAE1C,MAOJ4I,EAAJ/b,UAAAwc,cAAI,SAAc1K,GAUV,MANI,MAAKrR,YACL,KAAKA,YAAYoR,aAAaC,GAE9B,KAAKwK,WAAaxK,EAGtB,MAOJiK,EAAJ/b,UAAAyc,YAAI,SAAY5F,GAGR,MAFA,MAAKuF,kBAAkBxF,mBAAmBC,GAE1C,MAOJkF,EAAJ/b,UAAA0c,YAAI,SAAY7F,GAGR,MAFA,MAAKuF,kBAAkBtF,mBAAmBD,GAE1C,MASJkF,EAAJ/b,UAAAgB,mBAAI,SAAmB0V,GAGf,MAFA,MAAK0F,kBAAkBpb,mBAAmB0V,GAE1C,MAOJqF,EAAJ/b,UAAAc,cAAI,SAAcC,GAIV,MAHA,MAAKoS,oBAAsBpS,EAAU4b,QACrC,KAAKP,kBAAkBtb,cAAc,KAAKqS,qBAE1C,MAOJ4I,EAAJ/b,UAAAkB,UAAI,SAAUC,GAGN,MAFA,MAAKib,kBAAkBlb,UAAUC,GAEjC,MAER4a,kBC3MA,QAAAa,KAGY3e,KAAZ4e,aAAmC,SACvB5e,KAAZ6e,WAAiC,GACrB7e,KAAZ8e,cAAoC,GACxB9e,KAAZ+e,YAAkC,GACtB/e,KAAZgf,aAAmC,GACvBhf,KAAZif,YAAkC,GACtBjf,KAAZkf,gBAAsC,GAC1Blf,KAAZmf,OAA6B,GACjBnf,KAAZof,QAA8B,GA0K9B,MAxKIT,GAAJ5c,UAAAd,OAAI,SAAOqO,GACX,GAAczC,GAASyC,EAAWmE,WAE1BzT,MAAKwC,YAAc8M,EAEftP,KAAKmf,SAAWtS,EAAO7I,OACvBsL,EAAWjK,YAAarB,MAAOhE,KAAKmf,SAGpCnf,KAAKof,UAAYvS,EAAO5I,QACxBqL,EAAWjK,YAAapB,OAAQjE,KAAKof,UAGzC9P,EAAWwG,YAAY5H,UAAUC,IAAI,+BAOzCwQ,EAAJ5c,UAAAuI,IAAI,SAAIhI,GAKA,WALR,KAAAA,IAAQA,EAAR,IACQ,KAAKwc,cAAgB,GACrB,KAAKD,WAAavc,EAClB,KAAK2c,YAAc,aAEnB,MAOJN,EAAJ5c,UAAA2I,KAAI,SAAKpI,GAKD,WALR,KAAAA,IAASA,EAAT,IACQ,KAAK0c,aAAe,GACpB,KAAKD,YAAczc,EACnB,KAAK4c,gBAAkB,aAEvB,MAOJP,EAAJ5c,UAAAsI,OAAI,SAAO/H,GAKH,WALR,KAAAA,IAAWA,EAAX,IACQ,KAAKuc,WAAa,GAClB,KAAKC,cAAgBxc,EACrB,KAAK2c,YAAc,WAEnB,MAOJN,EAAJ5c,UAAA0I,MAAI,SAAMnI,GAKF,WALR,KAAAA,IAAUA,EAAV,IACQ,KAAKyc,YAAc,GACnB,KAAKC,aAAe1c,EACpB,KAAK4c,gBAAkB,WAEvB,MASJP,EAAJ5c,UAAAiC,MAAI,SAAM1B,GAOF,WAPR,KAAAA,IAAUA,EAAV,IACY,KAAKE,YACL,KAAKA,YAAY6C,YAAarB,MAAO1B,IAErC,KAAK6c,OAAS7c,EAGlB,MASJqc,EAAJ5c,UAAAkC,OAAI,SAAO3B,GAOH,WAPR,KAAAA,IAAWA,EAAX,IACY,KAAKE,YACL,KAAKA,YAAY6C,YAAapB,OAAQ3B,IAEtC,KAAK8c,QAAU9c,EAGnB,MASJqc,EAAJ5c,UAAAsd,mBAAI,SAAmBzG,GAIf,WAJR,KAAAA,IAAuBA,EAAvB,IACQ,KAAKlO,KAAKkO,GACV,KAAKsG,gBAAkB,SAEvB,MASJP,EAAJ5c,UAAAud,iBAAI,SAAiB1G,GAIb,WAJR,KAAAA,IAAqBA,EAArB,IACQ,KAAKtO,IAAIsO,GACT,KAAKqG,YAAc,SAEnB,MAOJN,EAAJ5c,UAAAoB,MAAI,WAII,GAAKnD,KAAKwC,YAAYkD,cAAtB,CAIR,GAAcwW,GAASlc,KAAKwC,YAAY4N,eAAepC,MACzCuR,EAAevf,KAAKwC,YAAYsT,YAAY9H,MAC5CnB,EAAS7M,KAAKwC,YAAYiR,WAEhCyI,GAAO3X,SAAWvE,KAAK4e,aACvB1C,EAAOsD,WAA8B,SAAjB3S,EAAO7I,MAAmB,IAAMhE,KAAK+e,YACzD7C,EAAOuD,UAA8B,SAAlB5S,EAAO5I,OAAoB,IAAMjE,KAAK6e,WACzD3C,EAAOwD,aAAe1f,KAAK8e,cAC3B5C,EAAOyD,YAAc3f,KAAKgf,aAEL,SAAjBnS,EAAO7I,MACPub,EAAalD,eAAiB,aACoB,QAA3Crc,KAAKwC,YAAYiR,YAAY3P,UAIP,eAAzB9D,KAAKkf,gBACLK,EAAalD,eAAiB,WACE,aAAzBrc,KAAKkf,kBACZK,EAAalD,eAAiB,cAGlCkD,EAAalD,eAAiBrc,KAAKkf,gBAGvCK,EAAanD,WAA+B,SAAlBvP,EAAO5I,OAAoB,aAAejE,KAAKif,cAO7EN,EAAJ5c,UAAA6D,QAAI,aAEJ+Y,KCpLAxX,EAAA,WAEI,QAAJA,GACgBqG,EACkB/F,EAENwN,GAHZjV,KAAhBwN,eAAgBA,EACkBxN,KAAlCyH,UAAkCA,EAENzH,KAA5BiV,UAA4BA,EAlB5B,MAwBI9N,GAAJpF,UAAA6d,OAAI,WACI,MAAO,IAAIjB,IAWfxX,EAAJpF,UAAAiT,YAAI,SACIjV,EACAge,EACAC,GAEA,MAAO,IAAIF,GAA0BC,EAAWC,EAAYje,EAAYC,KAAKwN,eACzExN,KAAKyH,YAObN,EAAJpF,UAAAyC,oBAAI,SAAoBzE,GAChB,MAAO,IAAIgV,GAAkChV,EAAYC,KAAKwN,eAAgBxN,KAAKyH,UAC/EzH,KAAKiV,2BAvCjBhW,KAACiK,EAAAA,WAAD/J,OAAcwR,WAAY,+CAT1B1R,KAAS4R,EAAAA,gBAaT5R,SAAA8G,GAAAC,aAAA/G,KAASC,EAAAA,OAATC,MAAgBC,EAAAA,cAdhBH,KAAS4gB,EAAAA,SAAT7Z,aAAA/G,KAgBSgH,EAAAA,gMAlBTkB,KpBqBI2Y,EAAe,EAanBxgB,EAAA,WAII,QAAJA,GAEeuM,EACCkU,EACAC,EACAC,EACAhO,EACAiO,EACAjR,EACkBxH,EAClB0Y,GARDngB,KAAf6L,iBAAeA,EACC7L,KAAhB+f,kBAAgBA,EACA/f,KAAhBggB,0BAAgBA,EACAhgB,KAAhBigB,iBAAgBA,EACAjgB,KAAhBiS,oBAAgBA,EACAjS,KAAhBkgB,UAAgBA,EACAlgB,KAAhBiP,QAAgBA,EACkBjP,KAAlCyH,UAAkCA,EAClBzH,KAAhBmgB,gBAAgBA,EAqEhB,MA7DI7gB,GAAJyC,UAAAyB,OAAI,SAAOqJ,GACX,GAAcuT,GAAOpgB,KAAKqgB,qBACZC,EAAOtgB,KAAKugB,mBAAmBH,GAC/BI,EAAexgB,KAAKygB,oBAAoBH,GACxC1c,EAAgB,GAAIC,GAAcgJ,EAIxC,OAFAjJ,GAAcE,UAAYF,EAAcE,WAAa9D,KAAKmgB,gBAAgB7d,MAEnE,GAAIuP,GAAW2O,EAAcJ,EAAME,EAAM1c,EAAe5D,KAAKiP,QAChEjP,KAAKiS,oBAAqBjS,KAAKyH,YAQvCnI,EAAJyC,UAAAwC,SAAI,WACI,MAAOvE,MAAKigB,kBAOR3gB,EAAZyC,UAAAwe,mBAAI,SAA2BH,GAC/B,GAAcE,GAAOtgB,KAAKyH,UAAUmK,cAAc,MAM1C,OAJA0O,GAAKI,GAAK,eAAeZ,IACzBQ,EAAKpS,UAAUC,IAAI,oBACnBiS,EAAK3X,YAAY6X,GAEVA,GAQHhhB,EAAZyC,UAAAse,mBAAI,WACJ,GAAcD,GAAOpgB,KAAKyH,UAAUmK,cAAc,MAG1C,OAFA5R,MAAK+f,kBAAkBrO,sBAAsBjJ,YAAY2X,GAElDA,GAQH9gB,EAAZyC,UAAA0e,oBAAI,SAA4BH,GAOxB,MAJKtgB,MAAK2gB,UACN3gB,KAAK2gB,QAAU3gB,KAAKkgB,UAAUU,IAAoBC,EAAAA,iBAG/C,GAAIC,GAAAA,gBAAgBR,EAAMtgB,KAAKggB,0BAA2BhgB,KAAK2gB,QAAS3gB,KAAKkgB,2BAjF5FjhB,KAACiK,EAAAA,iDAjBDjK,KAASsR,IAHTtR,KAASkK,IAXTlK,KAAI8hB,EAAAA,2BAaJ9hB,KAASkI,IAJTlI,KAASmM,IANTnM,KAAI+hB,EAAAA,WACJ/hB,KAAI6R,EAAAA,SAwCJ7R,SAAA8G,GAAAC;aAAA/G,KAASC,EAAAA,OAATC,MAAgBC,EAAAA,cAtChBH,KAASI,EAAAA,kBA4GTC,KChFMC,IAEEC,QAAS,QACTC,QAAS,SACTC,SAAU,QACVC,SAAU,QAGVH,QAAS,QACTC,QAAS,MACTC,SAAU,QACVC,SAAU,WAGVH,QAAS,MACTC,QAAS,MACTC,SAAU,MACVC,SAAU,WAGVH,QAAS,MACTC,QAAS,SACTC,SAAU,MACVC,SAAU,QAKLC,EACT,GAAIC,GAAAA,eAAsC,yCAY9CC,EAAA,WAKI,QAAJA,GAEeC,GAAAC,KAAfD,WAAeA,EAEf,sBATAd,KAACgB,EAAAA,UAADd,OACIe,SAAU,6DACVC,SAAU,2DA9EdlB,KAAImB,EAAAA,cAqFJN,KAOAO,EAAA,WA0II,QAAJA,GACgBC,EACRC,EACAC,EACuDC,EACnCC,GAJZV,KAAhBM,SAAgBA,EAG+CN,KAA/DS,gBAA+DA,EACnCT,KAA5BU,KAA4BA,EAxFoBV,KAAhDW,eAAyE,EAGzBX,KAAhDY,eACQZ,KAAKS,kBAGyBT,KAAtCa,MAAsD,EAqDxCb,KAAdc,cAA8B,GAAIC,GAAAA,aAGpBf,KAAdgB,eAA+B,GAAID,GAAAA,aAGrBf,KAAdiB,OAAuB,GAAIF,GAAAA,aAGbf,KAAdkB,OAAuB,GAAIH,GAAAA,aAIff,KAAZmB,cAA2B,EACfnB,KAAZoB,eAA4B,EAChBpB,KAAZqB,gBAA6B,EACjBrB,KAAZsB,qBAAkC,EACtBtB,KAAZuB,OAAoB,EACRvB,KAAZwB,sBAAoCC,EAAAA,aAAaC,MAYzC1B,KAAK2B,gBAAkB,GAAIC,GAAAA,eAAerB,EAAaC,GAsK/D,MA3SIqB,QAAJC,eACQzB,EADR0B,UAAA,eAAI,WAEI,MAAO/B,MAAKgC,cAGhB,SAAYC,GACRjC,KAAKgC,SAAWC,EAEZjC,KAAKkC,WACLlC,KAAKmC,cAAcnC,KAAKkC,4CAKhCL,OAAJC,eACQzB,EADR0B,UAAA,eAAI,WAEI,MAAO/B,MAAKoC,cAGhB,SAAYC,GACRrC,KAAKoC,SAAWC,EAEZrC,KAAKkC,WACLlC,KAAKmC,cAAcnC,KAAKkC,4CA8BhCL,OAAJC,eACQzB,EADR0B,UAAA,mBAAI,WAEI,MAAO/B,MAAKmB,kBAGhB,SAAgBmB,GACZtC,KAAKmB,aAAeoB,EAAAA,sBAAsBD,oCAI9CT,OAAJC,eACQzB,EADR0B,UAAA,oBAAI,WAEI,MAAO/B,MAAKoB,mBAGhB,SAAiBkB,GACbtC,KAAKoB,cAAgBmB,EAAAA,sBAAsBD,oCAI/CT,OAAJC,eACQzB,EADR0B,UAAA,yBAAI,WAEI,MAAO/B,MAAKsB,yBAGhB,SAAsBgB,GAClBtC,KAAKsB,oBAAsBiB,EAAAA,sBAAsBD,oCAIrDT,OAAJC,eACQzB,EADR0B,UAAA,qBAAI,WAEI,MAAO/B,MAAKqB,oBAGhB,SAAkBiB,GACdtC,KAAKqB,eAAiBkB,EAAAA,sBAAsBD,oCAIhDT,OAAJC,eACQzB,EADR0B,UAAA,YAAI,WAEI,MAAO/B,MAAKuB,WAGhB,SAASe,GACLtC,KAAKuB,MAAQgB,EAAAA,sBAAsBD,oCAsCvCT,OAAJC,eAAQzB,EAAR0B,UAAA,kBAAI,WACI,MAAO/B,MAAKwC,6CAIhBX,OAAJC,eAAQzB,EAAR0B,UAAA,WAAI,WACI,MAAO/B,MAAKU,KAAOV,KAAKU,KAAK4B,MAAQ,uCAGzCjC,EAAJ0B,UAAAU,YAAI,WACIzC,KAAK0C,mBAGTrC,EAAJ0B,UAAAY,YAAI,SAAYC,GACJ5C,KAAKkC,YACDU,EAAmB,WACnB5C,KAAKkC,UAAUW,cAAc7C,KAAK8C,WAGlCF,EAAsB,cACtB5C,KAAKkC,UAAUa,mBAAmB/C,KAAKgD,cAGvCJ,EAAgB,SAChB5C,KAAKkC,UAAUe,UAAUjD,KAAKkD,OAAOnD,YAEjCC,KAAKa,MACLb,KAAKkC,UAAUiB,UAKvBP,EAAc,OACd5C,KAAKa,KAAOb,KAAKoD,iBAAmBpD,KAAKqD,mBAKzChD,EAAZ0B,UAAAuB,eAAI,WACStD,KAAK8C,WAAc9C,KAAK8C,UAAUS,SACnCvD,KAAK8C,UAAYvD,GAGrBS,KAAKwC,YAAcxC,KAAKM,SAASkD,OAAOxD,KAAKyD,iBAIzCpD,EAAZ0B,UAAA0B,aAAI,WACJ,GAAcC,GAAmB1D,KAAKkC,UAAYlC,KAAK2D,0BACzCC,EAAgB,GAAIC,IACtBC,UAAW9D,KAAKU,KAChBgD,iBAAZA,EACY9C,eAAgBZ,KAAKY,eACrBmD,YAAa/D,KAAK+D,aAuBtB,QApBI/D,KAAKgE,OAAwB,IAAfhE,KAAKgE,SACnBJ,EAAcI,MAAQhE,KAAKgE,QAG3BhE,KAAKiE,QAA0B,IAAhBjE,KAAKiE,UACpBL,EAAcK,OAASjE,KAAKiE,SAG5BjE,KAAKkE,UAA8B,IAAlBlE,KAAKkE,YACtBN,EAAcM,SAAWlE,KAAKkE,WAG9BlE,KAAKmE,WAAgC,IAAnBnE,KAAKmE,aACvBP,EAAcO,UAAYnE,KAAKmE,WAG/BnE,KAAKoE,gBACLR,EAAcQ,cAAgBpE,KAAKoE,eAGhCR,GAIHvD,EAAZ0B,UAAA4B,wBAAI,WAAA,GAAJU,GAAArE,KACcsE,EAAWtE,KAAKM,SAASiE,WAC1BC,oBAAoBxE,KAAKkD,OAAOnD,YAChC0E,uBAAuBzE,KAAK0E,mBAC5BC,SAAS3E,KAAK4E,MACdC,kBAAkB7E,KAAK8E,eACvBC,mBAAmB/E,KAAKW,gBACxBoC,mBAAmB/C,KAAKgD,aAK7B,OAHAhD,MAAKmC,cAAcmC,GACnBA,EAASU,gBAAgBC,UAAS,SAAEV,GAAa,MAAAF,GAAKrD,eAAekE,KAAKX,KAEnED,GAOHjE,EAAZ0B,UAAAI,cAAI,SAAsBuB,GAAtB,GAAJW,GAAArE,KACc8C,EAAkC9C,KAAK8C,UAAUqC,IAAG,SAAEC,GAAQ,OAChE5F,QAAS4F,EAAI5F,QACbC,QAAS2F,EAAI3F,QACbC,SAAU0F,EAAI1F,SACdC,SAAUyF,EAAIzF,SACdsC,QAASmD,EAAInD,SAAWoC,EAAKpC,QAC7BI,QAAS+C,EAAI/C,SAAWgC,EAAKhC,UAGjCqB,GAAiBb,cAAcC,IAI3BzC,EAAZ0B,UAAAqB,eAAI,WAAA,GAAJiB,GAAArE,IACaA,MAAKwC,YAUNxC,KAAKwC,YAAY6C,YACbrB,MAAOhE,KAAKgE,MACZE,SAAUlE,KAAKkE,SACfD,OAAQjE,KAAKiE,OACbE,UAAWnE,KAAKmE,aAbpBnE,KAAKsD,iBAELtD,KAAgB,YAAEsF,gBAAgBL,UAAS,SAAEM,GACrCA,EAAMC,UAAYC,EAAAA,QAClBpB,EAAKhB,oBAaZrD,KAAKwC,YAAYkD,gBAClB1F,KAAKwC,YAAYvB,OAAOjB,KAAK2B,iBAC7B3B,KAAKiB,OAAOiE,QAGZlF,KAAK+D,cACL/D,KAAKwB,sBAAwBxB,KAAKwC,YAAY1B,gBAAgBmE,UAAS,SAAEM,GACrElB,EAAKvD,cAAcoE,KAAKK,OAM5BlF,EAAZ0B,UAAAsB,eAAI,WACQrD,KAAKwC,cACLxC,KAAKwC,YAAYtB,SACjBlB,KAAKkB,OAAOgE,QAGhBlF,KAAKwB,sBAAsBmE,eAIvBtF,EAAZ0B,UAAAW,gBAAI,WACQ1C,KAAKwC,aACLxC,KAAKwC,YAAYoD,UAGrB5F,KAAKwB,sBAAsBmE,8BArTnC1G,KAACgB,EAAAA,UAADd,OACIe,SAAU,sEACVC,SAAU,8DA3EdlB,KAASK,IATTL,KAAI4G,EAAAA,cACJ5G,KAAI6G,EAAAA,mBA+NJ7G,SAAA8G,GAAAC,aAAA/G,KAASC,EAAAA,OAATC,MAAgBS,OA7NhBX,KAAoBI,EAAAA,eAApB2G,aAAA/G,KA8NSgH,EAAAA,gCAzIT/C,SAAAjE,KAAKiH,EAAAA,MAAL/G,MAAW,+BAGX2D,YAAA7D,KAAKiH,EAAAA,MAAL/G,MAAW,kCAGX8C,UAAAhD,KAAKiH,EAAAA,MAAL/G,MAAW,gCAcXkD,UAAApD,KAAKiH,EAAAA,MAAL/G,MAAW,gCAcX6E,QAAA/E,KAAKiH,EAAAA,MAAL/G,MAAW,8BAGX8E,SAAAhF,KAAKiH,EAAAA,MAAL/G,MAAW,+BAGX+E,WAAAjF,KAAKiH,EAAAA,MAAL/G,MAAW,iCAGXgF,YAAAlF,KAAKiH,EAAAA,MAAL/G,MAAW,kCAGXiF,gBAAAnF,KAAKiH,EAAAA,MAAL/G,MAAW,sCAGXwB,iBAAA1B,KAAKiH,EAAAA,MAAL/G,MAAW,uCAGXyB,iBAAA3B,KAAKiH,EAAAA,MAAL/G,MAAW,uCAIX0B,OAAA5B,KAAKiH,EAAAA,MAAL/G,MAAW,6BAGX4E,cAAA9E,KAAKiH,EAAAA,MAAL/G,MAAW,oCAUX6D,eAAA/D,KAAKiH,EAAAA,MAAL/G,MAAW,qCAUXuF,oBAAAzF,KAAKiH,EAAAA,MAAL/G,MAAW,2CAUX2F,gBAAA7F,KAAKiH,EAAAA,MAAL/G,MAAW,sCAUXyF,OAAA3F,KAAKiH,EAAAA,MAAL/G,MAAW,6BAUX2B,gBAAA7B,KAAKkH,EAAAA,SAGLnF,iBAAA/B,KAAKkH,EAAAA,SAGLlF,SAAAhC,KAAKkH,EAAAA,SAGLjF,SAAAjC,KAAKkH,EAAAA,UA2LL9F,KAUa+F,GACTC,QAASzG,EACT0G,MAAOhH,GACPiH,WAAYC,GClZhBC,EAAA,WAAA,QAAAA,MAUA,sBAVAxH,KAACyH,EAAAA,SAADvH,OACIwH,SAAUC,EAAAA,WAAYC,EAAAA,aAAcC,EAAAA,sBACpCC,SAAU1G,EAAqBP,EAAkBgH,EAAAA,sBACjDE,cAAe3G,EAAqBP,GACpCmH,WACI3H,EACA8G,OAIRK,KAOaS,GACT5H,EACA6H,EACAC,EACAC,EAAAA,wBACAC,EACAlB,GC1BJmB,EAAA,SAAAC,GAKI,QAAJD,GAAkCE,GAClC,MAAQD,GAARE,KAAA1H,KAAcyH,IAAdzH,KAmEA,MAxEgD2H,GAAhDJ,EAAAC,GAQID,EAAJxF,UAAAU,YAAI,WACI+E,EAARzF,UAAcU,YAAdiF,KAAA1H,MAEYA,KAAK4H,sBAAwB5H,KAAK6H,qBAClC7H,KAAKyH,UAAUK,oBAAoB9H,KAAK4H,qBAAsB5H,KAAK6H,sBAQ3EN,EAAJxF,UAAAgG,qBAAI,WACI,MAAO/H,MAAKyH,UAAUO,mBAClBhI,KAAKyH,UAAUQ,yBACdjI,KAAc,UAASkI,sBACvBlI,KAAc,UAASmI,qBACxB,MAGEZ,EAAdxF,UAAAqG,iBAAI,WAAA,GAAJ/D,GAAArE,IACQwH,GAARzF,UAAcqG,iBAAdV,KAAA1H,MACQA,KAAKqI,mCACLrI,KAAKsI,6BAA4B,WAAO,MAAAjE,GAAKgE,sCAGzCd,EAAZxF,UAAAsG,iCAAI,WACI,GAAKrI,KAAKuI,kBAAV,EAI0BvI,KAAK+H,wBACK/H,KAAKyH,UAAUe,MAC5CC,YAAYzI,KAAKuI,qBAGpBhB,EAAZxF,UAAAuG,6BAAI,SAAqCI,GACzC,GAAcC,GAAY3I,KAAK4I,eAEnBD,KACI3I,KAAK6H,qBACL7H,KAAKyH,UAAUK,oBAAoBa,EAAW3I,KAAK6H,qBAGvD7H,KAAKyH,UAAUoB,iBAAiBF,EAAWD,GAC3C1I,KAAK6H,oBAAsBa,IAI3BnB,EAAZxF,UAAA6G,cAAI,WAaI,MAZK5I,MAAK4H,uBACF5H,KAAKyH,UAAUqB,kBACf9I,KAAK4H,qBAAuB,mBACrB5H,KAAKyH,UAAUsB,wBACtB/I,KAAK4H,qBAAuB,yBACpB5H,KAAc,UAASgJ,qBAC/BhJ,KAAK4H,qBAAuB,sBACpB5H,KAAc,UAASiJ,sBAC/BjJ,KAAK4H,qBAAuB,uBAI7B5H,KAAK4H,qCAvEpB3I,KAACiK,EAAAA,iDAKDjK,SAAA8G,GAAAC,aAAA/G,KAAiBC,EAAAA,OAAjBC,MAAwBC,EAAAA,eAoExBmI,GAxEgD4B"}