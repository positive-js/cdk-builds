{"version":3,"file":"cdk-overlay.umd.min.js","sources":["../../src/cdk/overlay/overlay.ts","../../src/cdk/overlay/overlay-directives.ts","../../src/cdk/overlay/overlay-module.ts","../../src/cdk/overlay/fullscreen-overlay-container.ts","../../node_modules/tslib/tslib.es6.js","../../src/cdk/overlay/position/connected-position.ts","../../src/cdk/overlay/scroll/scroll-strategy.ts","../../src/cdk/overlay/position/scroll-clip.ts","../../src/cdk/overlay/keyboard/overlay-keyboard-dispatcher.ts","../../src/cdk/overlay/overlay-container.ts","../../src/cdk/overlay/position/flexible-connected-position-strategy.ts","../../src/cdk/overlay/scroll/noop-scroll-strategy.ts","../../src/cdk/overlay/overlay-config.ts","../../src/cdk/overlay/scroll/block-scroll-strategy.ts","../../src/cdk/overlay/scroll/close-scroll-strategy.ts","../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts","../../src/cdk/overlay/scroll/scroll-strategy-options.ts","../../src/cdk/overlay/overlay-ref.ts","../../src/cdk/overlay/position/connected-position-strategy.ts","../../src/cdk/overlay/position/global-position-strategy.ts","../../src/cdk/overlay/position/overlay-position-builder.ts"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport {\n    ApplicationRef,\n    ComponentFactoryResolver,\n    Inject,\n    Injectable,\n    Injector,\n    NgZone\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DomPortalOutlet } from '@ptsecurity/cdk/portal';\n\nimport { OverlayKeyboardDispatcher } from './keyboard/overlay-keyboard-dispatcher';\nimport { OverlayConfig } from './overlay-config';\nimport { OverlayContainer } from './overlay-container';\nimport { OverlayRef } from './overlay-ref';\nimport { OverlayPositionBuilder } from './position/overlay-position-builder';\nimport { ScrollStrategyOptions } from './scroll/index';\n\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\n// it needs is different based on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n@Injectable()\nexport class Overlay {\n    private _appRef: ApplicationRef;\n\n    constructor(\n        /** Scrolling strategies that can be used when creating an overlay. */\n        public scrollStrategies: ScrollStrategyOptions,\n        private _overlayContainer: OverlayContainer,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _positionBuilder: OverlayPositionBuilder,\n        private _keyboardDispatcher: OverlayKeyboardDispatcher,\n        private _injector: Injector,\n        private _ngZone: NgZone,\n        @Inject(DOCUMENT) private _document: any,\n        private _directionality: Directionality) {\n    }\n\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config?: OverlayConfig): OverlayRef {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone,\n            this._keyboardDispatcher, this._document);\n    }\n\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position(): OverlayPositionBuilder {\n        return this._positionBuilder;\n    }\n\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    private _createPaneElement(host: HTMLElement): HTMLElement {\n        const pane = this._document.createElement('div');\n\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n\n        return pane;\n    }\n\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    private _createHostElement(): HTMLElement {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n\n        return host;\n    }\n\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\n        }\n\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n    }\n}\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    ViewContainerRef\n} from '@angular/core';\nimport { Direction, Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport { Subscription } from 'rxjs';\n\nimport { Overlay } from './overlay';\nimport { OverlayConfig } from './overlay-config';\nimport { OverlayRef } from './overlay-ref';\nimport { ConnectedOverlayPositionChange } from './position/connected-position';\nimport {\n    IConnectedPosition,\n    FlexibleConnectedPositionStrategy\n} from './position/flexible-connected-position-strategy';\nimport {\n    RepositionScrollStrategy,\n    IRepositionScrollStrategyConfig,\n    IScrollStrategy\n} from './scroll/index';\n\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList: IConnectedPosition[] = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('cdk-connected-overlay-scroll-strategy');\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay: Overlay):\n    () => IScrollStrategy {\n    return (config?: IRepositionScrollStrategyConfig) => overlay.scrollStrategies.reposition(config);\n}\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n@Directive({\n    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n    exportAs: 'cdkOverlayOrigin'\n})\nexport class CdkOverlayOrigin {\n    constructor(\n        /** Reference to the element on which the directive is applied. */\n        public elementRef: ElementRef) {\n    }\n}\n\n\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n@Directive({\n    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n    exportAs: 'cdkConnectedOverlay'\n})\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\n    /** Origin for the connected overlay. */\n    @Input('cdkConnectedOverlayOrigin') origin: CdkOverlayOrigin;\n\n    /** Registered connected position pairs. */\n    @Input('cdkConnectedOverlayPositions') positions: IConnectedPosition[];\n\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    @Input('cdkConnectedOverlayOffsetX')\n    get offsetX(): number {\n        return this._offsetX;\n    }\n\n    set offsetX(offsetX: number) {\n        this._offsetX = offsetX;\n\n        if (this._position) {\n            this._setPositions(this._position);\n        }\n    }\n\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    @Input('cdkConnectedOverlayOffsetY')\n    get offsetY() {\n        return this._offsetY;\n    }\n\n    set offsetY(offsetY: number) {\n        this._offsetY = offsetY;\n\n        if (this._position) {\n            this._setPositions(this._position);\n        }\n    }\n\n    /** The width of the overlay panel. */\n    @Input('cdkConnectedOverlayWidth') width: number | string;\n\n    /** The height of the overlay panel. */\n    @Input('cdkConnectedOverlayHeight') height: number | string;\n\n    /** The min width of the overlay panel. */\n    @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\n\n    /** The min height of the overlay panel. */\n    @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\n\n    /** The custom class to be set on the backdrop element. */\n    @Input('cdkConnectedOverlayBackdropClass') backdropClass: string;\n\n    /** Margin between the overlay and the viewport edges. */\n    @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\n\n    /** Strategy to be used when handling scroll events while the overlay is open. */\n    @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: IScrollStrategy =\n        this._scrollStrategy();\n\n    /** Whether the overlay is open. */\n    @Input('cdkConnectedOverlayOpen') open: boolean = false;\n\n    /** Whether or not the overlay should attach a backdrop. */\n    @Input('cdkConnectedOverlayHasBackdrop')\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n\n    set hasBackdrop(value: any) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n\n    /** Whether or not the overlay should be locked when scrolling. */\n    @Input('cdkConnectedOverlayLockPosition')\n    get lockPosition() {\n        return this._lockPosition;\n    }\n\n    set lockPosition(value: any) {\n        this._lockPosition = coerceBooleanProperty(value);\n    }\n\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    @Input('cdkConnectedOverlayFlexibleDimensions')\n    get flexibleDiemsions() {\n        return this._flexibleDimensions;\n    }\n\n    set flexibleDiemsions(value: boolean) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    @Input('cdkConnectedOverlayGrowAfterOpen')\n    get growAfterOpen() {\n        return this._growAfterOpen;\n    }\n\n    set growAfterOpen(value: boolean) {\n        this._growAfterOpen = coerceBooleanProperty(value);\n    }\n\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    @Input('cdkConnectedOverlayPush')\n    get push() {\n        return this._push;\n    }\n\n    set push(value: boolean) {\n        this._push = coerceBooleanProperty(value);\n    }\n\n    /** Event emitted when the backdrop is clicked. */\n    @Output() backdropClick = new EventEmitter<MouseEvent>();\n\n    /** Event emitted when the position has changed. */\n    @Output() positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n\n    /** Event emitted when the overlay has been attached. */\n    @Output() attach = new EventEmitter<void>();\n\n    /** Event emitted when the overlay has been detached. */\n    @Output() detach = new EventEmitter<void>();\n\n    private _overlayRef: OverlayRef;\n    private _templatePortal: TemplatePortal;\n    private _hasBackdrop = false;\n    private _lockPosition = false;\n    private _growAfterOpen = false;\n    private _flexibleDimensions = false;\n    private _push = false;\n    private _backdropSubscription = Subscription.EMPTY;\n    private _offsetX: number;\n    private _offsetY: number;\n    private _position: FlexibleConnectedPositionStrategy;\n\n    constructor(\n        private _overlay: Overlay,\n        templateRef: TemplateRef<any>,\n        viewContainerRef: ViewContainerRef,\n        @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) private _scrollStrategy,\n        @Optional() private _dir: Directionality) {\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    }\n\n    /** The associated overlay reference. */\n    get overlayRef(): OverlayRef {\n        return this._overlayRef;\n    }\n\n    /** The element's layout direction. */\n    get dir(): Direction {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n\n    ngOnDestroy() {\n        this._destroyOverlay();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this._position) {\n            if (changes['positions']) { //tslint:disable-line\n                this._position.withPositions(this.positions);\n            }\n\n            if (changes['lockPosition']) { //tslint:disable-line\n                this._position.withLockedPosition(this.lockPosition);\n            }\n\n            if (changes['origin']) { //tslint:disable-line\n                this._position.setOrigin(this.origin.elementRef);\n\n                if (this.open) {\n                    this._position.apply();\n                }\n            }\n        }\n\n        if (changes['open']) { //tslint:disable-line\n            this.open ? this._attachOverlay() : this._detachOverlay(); //tslint:disable-line\n        }\n    }\n\n    /** Creates an overlay */\n    private _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n\n        this._overlayRef = this._overlay.create(this._buildConfig());\n    }\n\n    /** Builds the overlay config based on the directive's inputs */\n    private _buildConfig(): OverlayConfig {\n        const positionStrategy = this._position = this._createPositionStrategy();\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n\n        return overlayConfig;\n    }\n\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this.origin.elementRef)\n            .withFlexibleDimensions(this.flexibleDiemsions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition);\n\n        this._setPositions(strategy);\n        strategy.positionChanges.subscribe((position) => this.positionChange.emit(position));\n\n        return strategy;\n    }\n\n    /**\n     * Sets the primary and fallback positions of a positions strategy,\n     * based on the current directive inputs.\n     */\n    private _setPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n        const positions: IConnectedPosition[] = this.positions.map((pos) => ({\n            originX: pos.originX,\n            originY: pos.originY,\n            overlayX: pos.overlayX,\n            overlayY: pos.overlayY,\n            offsetX: pos.offsetX || this.offsetX,\n            offsetY: pos.offsetY || this.offsetY\n        }));\n\n        positionStrategy.withPositions(positions);\n    }\n\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    private _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n\n            this._overlayRef!.keydownEvents().subscribe((event: KeyboardEvent) => { //tslint:disable-line\n                if (event.keyCode === ESCAPE) { //tslint:disable-line\n                    this._detachOverlay();\n                }\n            });\n        } else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight\n            });\n        }\n\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n            this.attach.emit();\n        }\n\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe((event) => {\n                this.backdropClick.emit(event);\n            });\n        }\n    }\n\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    private _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this.detach.emit();\n        }\n\n        this._backdropSubscription.unsubscribe();\n    }\n\n    /** Destroys the overlay created by this directive. */\n    private _destroyOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n\n        this._backdropSubscription.unsubscribe();\n    }\n}\n\n\n/** @docs-private */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n","import { NgModule, Provider } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { ScrollDispatchModule, VIEWPORT_RULER_PROVIDER } from '@ptsecurity/cdk/scrolling';\n\nimport { OVERLAY_KEYBOARD_DISPATCHER_PROVIDER } from './keyboard/overlay-keyboard-dispatcher';\nimport { Overlay } from './overlay';\nimport { OVERLAY_CONTAINER_PROVIDER } from './overlay-container';\nimport {\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    CdkConnectedOverlay,\n    CdkOverlayOrigin\n} from './overlay-directives';\nimport { OverlayPositionBuilder } from './position/overlay-position-builder';\n\n\n@NgModule({\n    imports: [BidiModule, PortalModule, ScrollDispatchModule],\n    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollDispatchModule],\n    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n    providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER\n    ]\n})\nexport class OverlayModule {\n}\n\n\n/**\n * @deprecated Use `OverlayModule` instead.\n * @deletion-target 7.0.0\n */\nexport const OVERLAY_PROVIDERS: Provider[] = [\n    Overlay,\n    OverlayPositionBuilder,\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n    VIEWPORT_RULER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n","import { DOCUMENT } from '@angular/common';\nimport { Injectable, Inject, OnDestroy } from '@angular/core';\n\nimport { OverlayContainer } from './overlay-container';\n\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n@Injectable()\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\n    private _fullScreenEventName: string | undefined;\n    private _fullScreenListener: () => void;\n\n    constructor(@Inject(DOCUMENT) _document: any) {\n        super(_document);\n    }\n\n    ngOnDestroy() {\n        super.ngOnDestroy();\n\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement(): Element {\n        return this._document.fullscreenElement ||\n            this._document.webkitFullscreenElement ||\n            (this._document as any).mozFullScreenElement ||\n            (this._document as any).msFullscreenElement ||\n            null;\n    }\n\n    protected _createContainer(): void {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n\n    private _adjustParentForFullscreenChange(): void {\n        if (!this._containerElement) {\n            return;\n        }\n\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n\n    private _addFullscreenChangeListener(fn: () => void) {\n        const eventName = this._getEventName();\n\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n\n    private _getEventName(): string | undefined {\n        if (!this._fullScreenEventName) {\n            if (this._document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            } else if (this._document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            } else if ((this._document as any).mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            } else if ((this._document as any).msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n\n        return this._fullScreenEventName;\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Optional } from '@angular/core';\n\n\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface IOriginConnectionPosition {\n    originX: HorizontalConnectionPos;\n    originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface IOverlayConnectionPosition {\n    overlayX: HorizontalConnectionPos;\n    overlayY: VerticalConnectionPos;\n}\n\n/** The points of the origin element and the overlay element to connect. */\nexport class ConnectionPositionPair {\n    /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n    originX: HorizontalConnectionPos;\n    /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n    originY: VerticalConnectionPos;\n    /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n    overlayX: HorizontalConnectionPos;\n    /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n    overlayY: VerticalConnectionPos;\n\n    constructor(\n        origin: IOriginConnectionPosition,\n        overlay: IOverlayConnectionPosition,\n        public offsetX?: number,\n        public offsetY?: number) {\n\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nexport class ScrollingVisibility {\n    isOriginClipped: boolean;\n    isOriginOutsideView: boolean;\n    isOverlayClipped: boolean;\n    isOverlayOutsideView: boolean;\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nexport class ConnectedOverlayPositionChange {\n    constructor(\n        /** The position used as a result of this change. */\n        public connectionPair: ConnectionPositionPair,\n        /** @docs-private */\n        @Optional() public scrollableViewProperties: ScrollingVisibility) {\n    }\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n","import { IOverlayReference } from '../overlay-reference';\n\n\n/**\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\n */\nexport interface IScrollStrategy {\n    /** Enable this scroll strategy (called when the attached overlay is attached to a portal). */\n    enable(): void;\n\n    /** Disable this scroll strategy (called when the attached overlay is detached from a portal). */\n    disable(): void;\n\n    /** Attaches this `ScrollStrategy` to an overlay. */\n    attach(overlayRef: IOverlayReference): void;\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nexport function getMatScrollStrategyAlreadyAttachedError(): Error {\n    return Error(`Scroll strategy has already been attached.`);\n}\n","/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nexport function isElementScrolledOutsideView(element: ClientRect, scrollContainers: ClientRect[]) {\n    return scrollContainers.some((containerBounds) => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nexport function isElementClippedByScrolling(element: ClientRect, scrollContainers: ClientRect[]) {\n    return scrollContainers.some((scrollContainerRect) => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    Inject,\n    Injectable,\n    InjectionToken,\n    OnDestroy,\n    Optional,\n    SkipSelf\n} from '@angular/core';\n\nimport { OverlayRef } from '../overlay-ref';\n\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({ providedIn: 'root' })\nexport class OverlayKeyboardDispatcher implements OnDestroy {\n\n    /** Currently attached overlays in the order they were attached. */\n    _attachedOverlays: OverlayRef[] = [];\n\n    private _document: Document;\n    private _isAttached: boolean;\n\n    constructor(@Inject(DOCUMENT) document: any) {\n        this._document = document;\n    }\n\n    ngOnDestroy() {\n        this._detach();\n    }\n\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef: OverlayRef): void {\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener, true);\n            this._isAttached = true;\n        }\n\n        this._attachedOverlays.push(overlayRef);\n    }\n\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef: OverlayRef): void {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this._detach();\n        }\n    }\n\n    /** Detaches the global keyboard event listener. */\n    private _detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener, true);\n            this._isAttached = false;\n        }\n    }\n\n    /** Keyboard event listener that will be attached to the body. */\n    private _keydownListener = (event: KeyboardEvent) => {\n        if (this._attachedOverlays.length) {\n            // Dispatch the keydown event to the top overlay. We want to target the most recent overlay,\n            // rather than trying to match where the event came from, because some components might open\n            // an overlay, but keep focus on a trigger element (e.g. for select and autocomplete).\n            this._attachedOverlays[this._attachedOverlays.length - 1]._keydownEvents.next(event);\n        }\n    }\n}\n\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(\n    dispatcher: OverlayKeyboardDispatcher, _document: any) {\n    return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n    // If there is already an OverlayKeyboardDispatcher available, use that.\n    // Otherwise, provide a new one.\n    provide: OverlayKeyboardDispatcher,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n\n        // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n        // of the type expected by Angular\n        DOCUMENT as InjectionToken<any>\n    ],\n    useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n","import { DOCUMENT } from '@angular/common';\nimport {\n    Inject,\n    Injectable,\n    InjectionToken,\n    OnDestroy,\n    Optional,\n    SkipSelf\n} from '@angular/core';\n\n\n/** Container inside which all overlays will render. */\n@Injectable({ providedIn: 'root' })\nexport class OverlayContainer implements OnDestroy {\n    protected _containerElement: HTMLElement;\n\n    constructor(@Inject(DOCUMENT) protected _document: any) {\n    }\n\n    ngOnDestroy() {\n        if (this._containerElement && this._containerElement.parentNode) {\n            this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n    }\n\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement(): HTMLElement {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n\n        return this._containerElement;\n    }\n\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    protected _createContainer(): void {\n        const container = this._document.createElement('div');\n\n        container.classList.add('cdk-overlay-container');\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\n\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer,\n                                                   _document: any) {\n    return parentContainer || new OverlayContainer(_document);\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayContainer],\n        DOCUMENT as InjectionToken<any> // We need to use the InjectionToken somewhere to keep TS happy\n    ],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n","import { ElementRef } from '@angular/core';\nimport { coerceCssPixelValue } from '@ptsecurity/cdk/coercion';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { ViewportRuler, CdkScrollable } from '@ptsecurity/cdk/scrolling';\nimport { Observable, Subscription, Subject } from 'rxjs';\n\nimport { IOverlayReference } from '../overlay-reference';\n\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    ScrollingVisibility,\n    validateHorizontalPosition,\n    validateVerticalPosition\n} from './connected-position';\nimport { IPositionStrategy } from './position-strategy';\nimport { isElementScrolledOutsideView, isElementClippedByScrolling } from './scroll-clip';\n\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class FlexibleConnectedPositionStrategy implements IPositionStrategy {\n\n    /** Ordered list of preferred positions, from most to least desirable. */\n    _preferredPositions: ConnectionPositionPair[] = [];\n\n    /** Observable sequence of position changes. */\n    positionChanges: Observable<ConnectedOverlayPositionChange> = new Observable((observer) => {\n        const subscription = this._positionChanges.subscribe(observer);\n        this._positionChangeSubscriptions++;\n\n        return () => {\n            subscription.unsubscribe();\n            this._positionChangeSubscriptions--;\n        };\n    });\n\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n\n    /** The overlay to which this strategy is attached. */\n    private _overlayRef: IOverlayReference;\n\n    /** Whether we're performing the very first positioning of the overlay. */\n    private _isInitialRender = true;\n\n    /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n    private _lastBoundingBoxSize = { width: 0, height: 0 };\n\n    /** Whether the overlay was pushed in a previous positioning. */\n    private _isPushed = false;\n\n    /** Whether the overlay can be pushed on-screen on the initial open. */\n    private _canPush = true;\n\n    /** Whether the overlay can grow via flexible width/height after the initial open. */\n    private _growAfterOpen = false;\n\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    private _hasFlexibleDimensions = true;\n\n    /** Whether the overlay position is locked. */\n    private _positionLocked = false;\n\n    /** Cached origin dimensions */\n    private _originRect: ClientRect;\n\n    /** Cached overlay dimensions */\n    private _overlayRect: ClientRect;\n\n    /** Cached viewport dimensions */\n    private _viewportRect: ClientRect;\n\n    /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n    private _viewportMargin = 0;\n\n    /** The Scrollable containers used to check scrollable view properties on position change. */\n    private scrollables: CdkScrollable[] = [];\n\n    /** The origin element against which the overlay will be positioned. */\n    private _origin: HTMLElement;\n\n    /** The overlay pane element. */\n    private _pane: HTMLElement;\n\n    /** Whether the strategy has been disposed of already. */\n    private _isDisposed: boolean;\n\n    /**\n     * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n     * within the viewport.\n     */\n    private _boundingBox: HTMLElement | null;\n\n    /** The last position to have been calculated as the best fit position. */\n    private _lastPosition: IConnectedPosition | null;\n\n    /** Subject that emits whenever the position changes. */\n    private _positionChanges = new Subject<ConnectedOverlayPositionChange>();\n\n    /** Subscription to viewport size changes. */\n    private _resizeSubscription = Subscription.EMPTY;\n\n    /** Default offset for the overlay along the x axis. */\n    private _offsetX = 0;\n\n    /** Default offset for the overlay along the y axis. */\n    private _offsetY = 0;\n\n    /** Selector to be used when finding the elements on which to set the transform origin. */\n    private _transformOriginSelector: string;\n\n    /** Amount of subscribers to the `positionChanges` stream. */\n    private _positionChangeSubscriptions = 0;\n\n    constructor(\n        connectedTo: ElementRef | HTMLElement,\n        private _viewportRuler: ViewportRuler,\n        private _document: Document,\n        // @deletion-target 7.0.0 `_platform` parameter to be made required.\n        private _platform?: Platform) {\n        this.setOrigin(connectedTo);\n    }\n\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef: IOverlayReference): void {\n        if (this._overlayRef && overlayRef !== this._overlayRef) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n\n        this._validatePositions();\n\n        overlayRef.hostElement.classList.add('cdk-overlay-connected-position-bounding-box');\n\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => this.apply());\n    }\n\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply(): void {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || (this._platform && !this._platform.isBrowser)) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n\n            return;\n        }\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._origin.getBoundingClientRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits: IFlexibleFit[] = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback: IFallbackPosition | undefined;\n\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) { //tslint:disable-line\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, pos); //tslint:disable-line\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos); //tslint:disable-line\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos); //tslint:disable-line\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n\n                continue;\n            }\n\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit: IFlexibleFit | null = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score =\n                    fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n\n            this._isPushed = false;\n            this._applyPosition(bestFit!.position, bestFit!.origin); //tslint:disable-line\n\n            return;\n        }\n\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            this._isPushed = true;\n            this._applyPosition(fallback!.position, fallback!.originPoint); //tslint:disable-line\n\n            return;\n        }\n\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback!.position, fallback!.originPoint); //tslint:disable-line\n    }\n\n    detach() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (!this._isDisposed) {\n            this.detach();\n            this._boundingBox = null;\n            this._positionChanges.complete();\n            this._isDisposed = true;\n        }\n    }\n\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition(): void {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._origin.getBoundingClientRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables: CdkScrollable[]) {\n        this.scrollables = scrollables;\n    }\n\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions: IConnectedPosition[]): this {\n        this._preferredPositions = positions;\n\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition!) === -1) { //tslint:disable-line\n            this._lastPosition = null;\n        }\n\n        this._validatePositions();\n\n        return this;\n    }\n\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin: number): this {\n        this._viewportMargin = margin;\n\n        return this;\n    }\n\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true): this {\n        this._hasFlexibleDimensions = flexibleDimensions;\n\n        return this;\n    }\n\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true): this {\n        this._growAfterOpen = growAfterOpen;\n\n        return this;\n    }\n\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true): this {\n        this._canPush = canPush;\n\n        return this;\n    }\n\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true): this {\n        this._positionLocked = isLocked;\n\n        return this;\n    }\n\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    setOrigin(origin: ElementRef | HTMLElement): this {\n        this._origin = origin instanceof ElementRef ? origin.nativeElement : origin;\n\n        return this;\n    }\n\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset: number): this {\n        this._offsetX = offset;\n\n        return this;\n    }\n\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset: number): this {\n        this._offsetY = offset;\n\n        return this;\n    }\n\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector: string): this {\n        this._transformOriginSelector = selector;\n\n        return this;\n    }\n\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    private _getOriginPoint(originRect: ClientRect, pos: IConnectedPosition): IPoint {\n        let x: number;\n        if (pos.originX === 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2); //tslint:disable-line\n        } else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX === 'start' ? startX : endX;\n        }\n\n        let y: number;\n        if (pos.originY === 'center') {\n            y = originRect.top + (originRect.height / 2); //tslint:disable-line\n        } else {\n            y = pos.originY === 'top' ? originRect.top : originRect.bottom;\n        }\n\n        return { x, y };\n    }\n\n\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    private _getOverlayPoint( //tslint:disable-line\n        originPoint: IPoint,\n        overlayRect: ClientRect,\n        pos: IConnectedPosition): IPoint {\n\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX: number;\n        if (pos.overlayX === 'center') {\n            overlayStartX = -overlayRect.width / 2; //tslint:disable-line\n        } else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        } else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n\n        let overlayStartY: number;\n        if (pos.overlayY === 'center') {\n            overlayStartY = -overlayRect.height / 2; //tslint:disable-line\n        } else {\n            overlayStartY = pos.overlayY === 'top' ? 0 : -overlayRect.height;\n        }\n\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY\n        };\n    }\n\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    private _getOverlayFit(point: IPoint, overlay: ClientRect, viewport: ClientRect,\n                           position: IConnectedPosition): IOverlayFit {\n\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x'); //tslint:disable-line\n        let offsetY = this._getOffset(position, 'y'); //tslint:disable-line\n\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n\n        if (offsetY) {\n            y += offsetY;\n        }\n\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x; //tslint:disable-line\n        let rightOverflow = (x + overlay.width) - viewport.width; //tslint:disable-line\n        let topOverflow = 0 - y; //tslint:disable-line\n        let bottomOverflow = (y + overlay.height) - viewport.height; //tslint:disable-line\n\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow); //tslint:disable-line\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow); //tslint:disable-line\n        let visibleArea = visibleWidth * visibleHeight; //tslint:disable-line\n\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth === overlay.width\n        };\n    }\n\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlat at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    private _canFitWithFlexibleDimensions(fit: IOverlayFit, point: IPoint, viewport: ClientRect) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = this._overlayRef.getConfig().minHeight;\n            const minWidth = this._overlayRef.getConfig().minWidth;\n\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n\n            return verticalFit && horizontalFit;\n        }\n    }\n\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start The starting point from which the overlay is pushed.\n     * @param overlay The overlay dimensions.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    private _pushOverlayOnScreen(start: IPoint, overlay: ClientRect): IPoint {\n        const viewport = this._viewportRect;\n\n        // Determine how much the overlay goes outside the viewport on each side, which we'll use to\n        // decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n        const overflowTop = Math.max(viewport.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - start.x, 0);\n\n        // Amount by which to push the overlay in each direction such that it remains on-screen.\n        let pushX, pushY = 0; //tslint:disable-line\n\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        } else {\n            pushX = viewport.left - start.x;\n        }\n\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        } else {\n            pushY = viewport.top - start.y;\n        }\n\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY\n        };\n    }\n\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    private _applyPosition(position: IConnectedPosition, originPoint: IPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChangeSubscriptions > 0) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n\n        this._isInitialRender = false;\n    }\n\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    private _setTransformOrigin(position: IConnectedPosition) {\n        if (!this._transformOriginSelector) { return; }\n\n        const elements: NodeListOf<HTMLElement> =\n            this._boundingBox!.querySelectorAll(this._transformOriginSelector); //tslint:disable-line\n        let xOrigin: 'left' | 'right' | 'center';\n        let yOrigin: 'top' | 'bottom' | 'center' = position.overlayY; //tslint:disable-line\n\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        } else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        } else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n\n        for (let i = 0; i < elements.length; i++) { //tslint:disable-line\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    private _calculateBoundingBoxRect(origin: IPoint, position: IConnectedPosition): IBoundingBoxRect {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom; //tslint:disable-line\n\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.bottom - origin.y;\n        } else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2; //tslint:disable-line\n            height = viewport.height - bottom + this._viewportMargin;\n        } else {\n            // If neither top nor bottom, it means that the overlay\n            // is vertically centered on the origin point.\n            const smallestDistanceToViewportEdge =\n                Math.min(viewport.bottom - origin.y, origin.y - viewport.left);\n            const previousHeight = this._lastBoundingBoxSize.height;\n\n            height = smallestDistanceToViewportEdge * 2; //tslint:disable-line\n            top = origin.y - smallestDistanceToViewportEdge;\n\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2); //tslint:disable-line\n            }\n        }\n\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge =\n            (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge =\n            (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n\n        let width, left, right; //tslint:disable-line\n\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.right - origin.x + this._viewportMargin;\n            width = origin.x - viewport.left;\n        } else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        } else {\n            // If neither start nor end, it means that the overlay\n            // is horizontally centered on the origin point.\n            const smallestDistanceToViewportEdge =\n                Math.min(viewport.right - origin.x, origin.x - viewport.top);\n            const previousWidth = this._lastBoundingBoxSize.width;\n\n            width = smallestDistanceToViewportEdge * 2; //tslint:disable-line\n            left = origin.x - smallestDistanceToViewportEdge;\n\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2); //tslint:disable-line\n            }\n        }\n\n        return { top, left, bottom, right, width, height };\n    }\n\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    private _setBoundingBoxStyles(origin: IPoint, position: IConnectedPosition): void {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n\n        const styles = {} as CSSStyleDeclaration;\n\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = '';\n            styles.width = styles.height = '100%';\n        } else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            } else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            } else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n\n        this._lastBoundingBoxSize = boundingBoxRect;\n\n        extendStyles(this._boundingBox!.style, styles); //tslint:disable-line\n    }\n\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    private _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox!.style, { //tslint:disable-line\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: ''\n        } as CSSStyleDeclaration);\n    }\n\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    private _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: ''\n        } as CSSStyleDeclaration);\n    }\n\n    /** Sets positioning styles to the overlay element. */\n    private _setOverlayElementStyles(originPoint: IPoint, position: IConnectedPosition): void {\n        const styles = {} as CSSStyleDeclaration;\n\n        if (this._hasExactPosition()) {\n            extendStyles(styles, this._getExactOverlayY(position, originPoint));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint));\n        } else {\n            styles.position = 'static';\n        }\n\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x'); //tslint:disable-line\n        let offsetY = this._getOffset(position, 'y'); //tslint:disable-line\n\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n\n        styles.transform = transformString.trim();\n\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n            styles.maxHeight = '';\n        }\n\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n            styles.maxWidth = '';\n        }\n\n        extendStyles(this._pane.style, styles);\n    }\n\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    private _getExactOverlayY(position: IConnectedPosition, originPoint: IPoint) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: null, bottom: null } as CSSStyleDeclaration; //tslint:disable-line\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\n        }\n\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement!.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        } else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n\n        return styles;\n    }\n\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    private _getExactOverlayX(position: IConnectedPosition, originPoint: IPoint) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: null, right: null } as CSSStyleDeclaration; //tslint:disable-line\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\n        }\n\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty: 'left' | 'right';\n\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        } else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement!.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        } else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n\n        return styles;\n    }\n\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    private _getScrollVisibility(): ScrollingVisibility {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._origin.getBoundingClientRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this.scrollables.map((scrollable) => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds)\n        };\n    }\n\n    /** Subtracts the amount that an element is overflowing on an axis from it's length. */\n    private _subtractOverflows(length: number, ...overflows: number[]): number {\n        return overflows.reduce((currentValue: number, currentOverflow: number) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    private _getNarrowedViewportRect(): ClientRect {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement!.clientWidth;\n        const height = this._document.documentElement!.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin), //tslint:disable-line\n            height: height - (2 * this._viewportMargin) //tslint:disable-line\n        };\n    }\n\n    /** Whether the we're dealing with an RTL context */\n    private _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    private _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n\n    /** Retrieves the offset of a position along the x or y axis. */\n    private _getOffset(position: IConnectedPosition, axis: 'x' | 'y') {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n\n    /** Validates that the current position match the expected values. */\n    private _validatePositions(): void {\n        if (!this._preferredPositions.length) {\n            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        }\n\n        // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n        this._preferredPositions.forEach((pair) => {\n            validateHorizontalPosition('originX', pair.originX);\n            validateVerticalPosition('originY', pair.originY);\n            validateHorizontalPosition('overlayX', pair.overlayX);\n            validateVerticalPosition('overlayY', pair.overlayY);\n        });\n    }\n}\n\n/** A simple (x, y) coordinate. */\ninterface IPoint {\n    x: number;\n    y: number;\n}\n\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\ninterface IOverlayFit {\n    /** Whether the overlay fits completely in the viewport. */\n    isCompletelyWithinViewport: boolean;\n\n    /** Whether the overlay fits in the viewport on the y-axis. */\n    fitsInViewportVertically: boolean;\n\n    /** Whether the overlay fits in the viewport on the x-axis. */\n    fitsInViewportHorizontally: boolean;\n\n    /** The total visible area (in px^2) of the overlay inside the viewport. */\n    visibleArea: number;\n}\n\n/** Record of the measurments determining whether an overlay will fit in a specific position. */\ninterface IFallbackPosition {\n    position: IConnectedPosition;\n    originPoint: IPoint;\n    overlayPoint: IPoint;\n    overlayFit: IOverlayFit;\n    overlayRect: ClientRect;\n}\n\n/** Position and size of the overlay sizing wrapper for a specific position. */\ninterface IBoundingBoxRect {\n    top: number;\n    left: number;\n    bottom: number;\n    right: number;\n    height: number;\n    width: number;\n}\n\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\ninterface IFlexibleFit {\n    position: IConnectedPosition;\n    origin: IPoint;\n    overlayRect: ClientRect;\n    boundingBoxRect: IBoundingBoxRect;\n}\n\n/** A connected position as specified by the user. */\nexport interface IConnectedPosition {\n    originX: 'start' | 'center' | 'end';\n    originY: 'top' | 'center' | 'bottom';\n\n    overlayX: 'start' | 'center' | 'end';\n    overlayY: 'top' | 'center' | 'bottom';\n\n    weight?: number;\n    offsetX?: number;\n    offsetY?: number;\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(dest: CSSStyleDeclaration, source: CSSStyleDeclaration): CSSStyleDeclaration {\n    for (let key in source) { //tslint:disable-line\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n\n    return dest;\n}\n","import { IScrollStrategy } from './scroll-strategy';\n\n\n/** Scroll strategy that doesn't do anything. */\nexport class NoopScrollStrategy implements IScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() {\n    } // tslint:disable-line\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() {\n    } // tslint:disable-line\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() {\n    } // tslint:disable-line\n}\n","import { Direction, Directionality } from '@ptsecurity/cdk/bidi';\n\nimport { IPositionStrategy } from './position/position-strategy';\nimport { NoopScrollStrategy } from './scroll/noop-scroll-strategy';\nimport { IScrollStrategy } from './scroll/scroll-strategy';\n\n\n/** Initial configuration used when creating an overlay. */\nexport class OverlayConfig {\n    /** Strategy with which to position the overlay. */\n    positionStrategy?: IPositionStrategy;\n\n    /** Strategy to be used when handling scroll events while the overlay is open. */\n    scrollStrategy?: IScrollStrategy = new NoopScrollStrategy();\n\n    /** Custom class to add to the overlay pane. */\n    panelClass?: string | string[] = '';\n\n    /** Whether the overlay has a backdrop. */\n    hasBackdrop?: boolean = false;\n\n    /** Custom class to add to the backdrop */\n    backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\n\n    /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n    width?: number | string;\n\n    /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n    height?: number | string;\n\n    /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n    minWidth?: number | string;\n\n    /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n    minHeight?: number | string;\n\n    /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n    maxWidth?: number | string;\n\n    /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n    maxHeight?: number | string;\n\n    /**\n     * Direction of the text in the overlay panel. If a `Directionality` instance\n     * is passed in, the overlay will handle changes to its value automatically.\n     */\n    direction?: Direction | Directionality;\n\n    constructor(config?: OverlayConfig) {\n        if (config) {\n            Object.keys(config)\n                .filter((key) => config[key] !== undefined)\n                .forEach((key) => this[key] = config[key]);\n        }\n    }\n}\n","import { coerceCssPixelValue } from '@ptsecurity/cdk/coercion';\nimport { ViewportRuler } from '@ptsecurity/cdk/scrolling';\n\nimport { IScrollStrategy } from './scroll-strategy';\n\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements IScrollStrategy {\n    private _previousHTMLStyles = { top: '', left: '' };\n    private _previousScrollPosition: { top: number, left: number };\n    private _isEnabled = false;\n    private _document: Document;\n\n    constructor(private _viewportRuler: ViewportRuler, document: any) {\n        this._document = document;\n    }\n\n    /** Attaches this scroll strategy to an overlay. */\n    attach() {\n    } // tslint:disable-line\n\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() { // tslint:disable-line\n\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement!;\n\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement!;\n            const body = this._document.body!;\n            const previousHtmlScrollBehavior = html.style['scrollBehavior'] || ''; // tslint:disable-line\n            const previousBodyScrollBehavior = body.style['scrollBehavior'] || ''; // tslint:disable-line\n\n            this._isEnabled = false;\n\n            html.style.left = this._previousHTMLStyles.left;\n            html.style.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            html.style['scrollBehavior'] = body.style['scrollBehavior'] = 'auto'; // tslint:disable-line\n\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n            html.style['scrollBehavior'] = previousHtmlScrollBehavior; // tslint:disable-line\n            body.style['scrollBehavior'] = previousBodyScrollBehavior; // tslint:disable-line\n        }\n    }\n\n    private _canBeEnabled(): boolean {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement!;\n\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n","import { NgZone } from '@angular/core';\nimport { ScrollDispatcher, ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport { Subscription } from 'rxjs';\n\nimport { IOverlayReference } from '../overlay-reference';\n\nimport { IScrollStrategy, getMatScrollStrategyAlreadyAttachedError } from './scroll-strategy';\n\n\n/**\n * Config options for the CloseScrollStrategy.\n */\nexport interface ICloseScrollStrategyConfig {\n    /** Amount of pixels the user has to scroll before the overlay is closed. */\n    threshold?: number;\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements IScrollStrategy {\n    private _scrollSubscription: Subscription | null = null;\n    private _overlayRef: IOverlayReference;\n    private _initialScrollPosition: number;\n\n    constructor(\n        private _scrollDispatcher: ScrollDispatcher,\n        private _ngZone: NgZone,\n        private _viewportRuler: ViewportRuler,\n        private _config?: ICloseScrollStrategyConfig) {\n    }\n\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef: IOverlayReference) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n\n        this._overlayRef = overlayRef;\n    }\n\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n\n        const stream = this._scrollDispatcher.scrolled(0);\n\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) { //tslint:disable-line\n                    this._detach();\n                } else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        } else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n\n    /** Detaches the overlay ref and disables the scroll strategy. */\n    private _detach = () => {\n        this.disable();\n\n        if (this._overlayRef.hasAttached()) {\n            this._ngZone.run(() => this._overlayRef.detach());\n        }\n    }\n}\n","import { NgZone } from '@angular/core';\nimport { ScrollDispatcher, ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport { Subscription } from 'rxjs';\n\nimport { IOverlayReference } from '../overlay-reference';\nimport { isElementScrolledOutsideView } from '../position/scroll-clip';\n\nimport { IScrollStrategy, getMatScrollStrategyAlreadyAttachedError } from './scroll-strategy';\n\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface IRepositionScrollStrategyConfig {\n    /** Time in milliseconds to throttle the scroll events. */\n    scrollThrottle?: number;\n\n    /** Whether to close the overlay once the user has scrolled away completely. */\n    autoClose?: boolean;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements IScrollStrategy {\n    private _scrollSubscription: Subscription | null = null;\n    private _overlayRef: IOverlayReference;\n\n    constructor(\n        private _scrollDispatcher: ScrollDispatcher,\n        private _viewportRuler: ViewportRuler,\n        private _ngZone: NgZone,\n        private _config?: IRepositionScrollStrategyConfig) {\n    }\n\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef: IOverlayReference) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n\n        this._overlayRef = overlayRef;\n    }\n\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, NgZone } from '@angular/core';\nimport { ScrollDispatcher, ViewportRuler } from '@ptsecurity/cdk/scrolling';\n\n\nimport { BlockScrollStrategy } from './block-scroll-strategy';\nimport { CloseScrollStrategy, ICloseScrollStrategyConfig } from './close-scroll-strategy';\nimport { NoopScrollStrategy } from './noop-scroll-strategy';\nimport {\n    RepositionScrollStrategy,\n    IRepositionScrollStrategyConfig\n} from './reposition-scroll-strategy';\n\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable({ providedIn: 'root' })\nexport class ScrollStrategyOptions {\n    private _document: Document;\n\n    constructor(\n        private _scrollDispatcher: ScrollDispatcher,\n        private _viewportRuler: ViewportRuler,\n        private _ngZone: NgZone,\n        @Inject(DOCUMENT) document: any) {\n        this._document = document;\n    }\n\n    /** Do nothing on scroll. */\n    noop = () => new NoopScrollStrategy();\n\n    /**\n     * Close the overlay as soon as the user scrolls.\n     * @param config Configuration to be used inside the scroll strategy.\n     */\n    close = (config?: ICloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher,\n        this._ngZone, this._viewportRuler, config)\n\n    /** Block scrolling. */\n    block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n\n    /**\n     * Update the overlay's position on scroll.\n     * @param config Configuration to be used inside the scroll strategy.\n     * Allows debouncing the reposition calls.\n     */\n    reposition = (config?: IRepositionScrollStrategyConfig) => new RepositionScrollStrategy(\n        this._scrollDispatcher, this._viewportRuler, this._ngZone, config)\n}\n","import { ComponentRef, EmbeddedViewRef, NgZone } from '@angular/core';\nimport { Direction, Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceCssPixelValue, coerceArray } from '@ptsecurity/cdk/coercion';\nimport { ComponentPortal, Portal, IPortalOutlet, TemplatePortal } from '@ptsecurity/cdk/portal';\nimport { Observable, Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { OverlayKeyboardDispatcher } from './keyboard/overlay-keyboard-dispatcher';\nimport { OverlayConfig } from './overlay-config';\n\n\n/** An object where all of its properties cannot be written. */\nexport type ImmutableObject<T> = {\n    readonly [P in keyof T]: T[P];\n};\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements IPortalOutlet {\n    /** Stream of keydown events dispatched to this overlay. */\n    _keydownEvents = new Subject<KeyboardEvent>();\n\n    private _backdropElement: HTMLElement | null = null;\n    private _backdropClick: Subject<MouseEvent> = new Subject();\n    private _attachments = new Subject<void>();\n    private _detachments = new Subject<void>();\n\n    constructor(\n        private _portalOutlet: IPortalOutlet,\n        private _host: HTMLElement,\n        private _pane: HTMLElement,\n        private _config: ImmutableObject<OverlayConfig>,\n        private _ngZone: NgZone,\n        private _keyboardDispatcher: OverlayKeyboardDispatcher,\n        private _document: Document) {\n\n        if (_config.scrollStrategy) {\n            _config.scrollStrategy.attach(this);\n        }\n    }\n\n    /** The overlay's HTML element */\n    get overlayElement(): HTMLElement {\n        return this._pane;\n    }\n\n    /** The overlay's backdrop HTML element. */\n    get backdropElement(): HTMLElement | null {\n        return this._backdropElement;\n    }\n\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement(): HTMLElement {\n        return this._host;\n    }\n\n    attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n\n    attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n\n    attach(portal: any): any;\n\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal: Portal<any>): any {\n        let attachResult = this._portalOutlet.attach(portal); //tslint:disable-line\n\n        if (this._config.positionStrategy) {\n            this._config.positionStrategy.attach(this);\n        }\n\n        // Update the pane element with the given configuration.\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.enable();\n        }\n\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                // The overlay could've been detached before the zone has stabilized.\n                if (this.hasAttached()) {\n                    this.updatePosition();\n                }\n            });\n\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n\n        return attachResult;\n    }\n\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach(): any {\n        if (!this.hasAttached()) {\n            return;\n        }\n\n        this.detachBackdrop();\n\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n\n        if (this._config.positionStrategy && this._config.positionStrategy.detach) {\n            this._config.positionStrategy.detach();\n        }\n\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n\n        const detachmentResult = this._portalOutlet.detach();\n\n        // Only emit after everything is detached.\n        this._detachments.next();\n\n        // Remove this overlay from keyboard dispatcher tracking\n        this._keyboardDispatcher.remove(this);\n\n        return detachmentResult;\n    }\n\n    /** Cleans up the overlay from the DOM. */\n    dispose(): void {\n        const isAttached = this.hasAttached();\n\n        if (this._config.positionStrategy) {\n            this._config.positionStrategy.dispose();\n        }\n\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n\n        this.detachBackdrop();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = null!; //tslint:disable-line\n        }\n\n        this._pane = null!; //tslint:disable-line\n\n        if (isAttached) {\n            this._detachments.next();\n        }\n\n        this._detachments.complete();\n    }\n\n    /** Whether the overlay has attached content. */\n    hasAttached(): boolean {\n        return this._portalOutlet.hasAttached();\n    }\n\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick(): Observable<MouseEvent> {\n        return this._backdropClick.asObservable();\n    }\n\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments(): Observable<void> {\n        return this._attachments.asObservable();\n    }\n\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments(): Observable<void> {\n        return this._detachments.asObservable();\n    }\n\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents(): Observable<KeyboardEvent> {\n        return this._keydownEvents.asObservable();\n    }\n\n    /** Gets the the current overlay configuration, which is immutable. */\n    getConfig(): OverlayConfig {\n        return this._config;\n    }\n\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._config.positionStrategy) {\n            this._config.positionStrategy.apply();\n        }\n    }\n\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig: IOverlaySizeConfig) {\n        this._config = { ...this._config, ...sizeConfig };\n        this._updateElementSize();\n    }\n\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir: Direction | Directionality) {\n        this._config = { ...this._config, direction: dir };\n        this._updateElementDirection();\n    }\n\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection(): Direction {\n        const direction = this._config.direction;\n\n        if (!direction) {\n            return 'ltr';\n        }\n\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n\n    /** Updates the text direction of the overlay panel. */\n    private _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n\n    /** Updates the size of the overlay element based on the overlay config. */\n    private _updateElementSize() {\n        const style = this._pane.style;\n\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n\n    /** Toggles the pointer events for the overlay pane element. */\n    private _togglePointerEvents(enablePointer: boolean) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    }\n\n    /** Attaches a backdrop for this overlay. */\n    private _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement!.insertBefore(this._backdropElement, this._host); //tslint:disable-line\n\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click',\n            (event: MouseEvent) => this._backdropClick.next(event));\n\n        // Add class to fade-in the backdrop after one frame.\n        if (requestAnimationFrame !== undefined) {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        } else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    private _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode!.appendChild(this._host); //tslint:disable-line\n        }\n    }\n\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop(): void {\n        let backdropToDetach = this._backdropElement; //tslint:disable-line\n\n        if (backdropToDetach) {\n            let finishDetach = () => { //tslint:disable-line\n                // It may not be attached to anything in certain cases (e.g. unit tests).\n                if (backdropToDetach && backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n\n                // It is possible that a new portal has been attached to this overlay since we started\n                // removing the backdrop. If that is the case, only clear the backdrop reference if it\n                // is still the same instance that we started to remove.\n                if (this._backdropElement === backdropToDetach) {\n                    this._backdropElement = null;\n                }\n            };\n\n            backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n\n            backdropToDetach.addEventListener('transitionend', finishDetach);\n\n            // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n            // In this case we make it unclickable and we try to remove it after a delay.\n            backdropToDetach.style.pointerEvents = 'none';\n\n            // Run this outside the Angular zone because there's nothing that Angular cares about.\n            // If it were to run inside the Angular zone, every test that used Overlay would have to be\n            // either async or fakeAsync.\n            this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500)); //tslint:disable-line\n        }\n    }\n\n    /** Toggles a single CSS class or an array of classes on an element. */\n    private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\n        const classList = element.classList;\n\n        coerceArray(cssClasses).forEach((cssClass) => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            isAdd ? classList.add(cssClass) : classList.remove(cssClass); // tslint:disable-line\n        });\n    }\n}\n\n\n/** Size properties for an overlay. */\nexport interface IOverlaySizeConfig {\n    width?: number | string;\n    height?: number | string;\n    minWidth?: number | string;\n    minHeight?: number | string;\n    maxWidth?: number | string;\n    maxHeight?: number | string;\n}\n","import { ElementRef } from '@angular/core';\nimport { Direction } from '@ptsecurity/cdk/bidi';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CdkScrollable, ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport { Observable } from 'rxjs';\n\nimport { IOverlayReference } from '../overlay-reference';\n\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    IOriginConnectionPosition,\n    IOverlayConnectionPosition,\n} from './connected-position';\nimport { FlexibleConnectedPositionStrategy } from './flexible-connected-position-strategy';\nimport { IPositionStrategy } from './position-strategy';\n\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @deletion-target 7.0.0\n */\nexport class ConnectedPositionStrategy implements IPositionStrategy {\n    /**\n     * Reference to the underlying position strategy to which all the API calls are proxied.\n     * @docs-private\n     */\n    _positionStrategy: FlexibleConnectedPositionStrategy;\n\n    /** Ordered list of preferred positions, from most to least desirable. */\n    _preferredPositions: ConnectionPositionPair[] = [];\n\n    /** The overlay to which this strategy is attached. */\n    private _overlayRef: IOverlayReference;\n\n    private _direction: Direction | null;\n\n    /** Whether the we're dealing with an RTL context */\n    get _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n\n    /** Emits an event when the connection point changes. */\n    get onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n        return this._positionStrategy.positionChanges;\n    }\n\n    constructor(\n        originPos: IOriginConnectionPosition,\n        overlayPos: IOverlayConnectionPosition,\n        connectedTo: ElementRef,\n        viewportRuler: ViewportRuler,\n        document: Document,\n        // @deletion-target 7.0.0 `platform` parameter to be made required.\n        platform?: Platform) {\n\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy =\n            new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform)\n                .withFlexibleDimensions(false)\n                .withPush(false)\n                .withViewportMargin(0);\n\n        this.withFallbackPosition(originPos, overlayPos);\n    }\n\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions(): ConnectionPositionPair[] {\n        return this._preferredPositions;\n    }\n\n    /** Attach this position strategy to an overlay. */\n    attach(overlayRef: IOverlayReference): void {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n\n    /** Disposes all resources used by the position strategy. */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n\n    /** @docs-private */\n    detach() {\n        this._positionStrategy.detach();\n    }\n\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * @docs-private\n     */\n    apply(): void {\n        this._positionStrategy.apply();\n    }\n\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    recalculateLastPosition(): void {\n        this._positionStrategy.reapplyLastPosition();\n    }\n\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables: CdkScrollable[]) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n\n    /**\n     * Adds a new preferred fallback position.\n     * @param originPos\n     * @param overlayPos\n     */\n    withFallbackPosition(\n        originPos: IOriginConnectionPosition,\n        overlayPos: IOverlayConnectionPosition,\n        offsetX?: number,\n        offsetY?: number): this {\n\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n\n        return this;\n    }\n\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param dir New layout direction.\n     */\n    withDirection(dir: 'ltr' | 'rtl'): this {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        } else {\n            this._direction = dir;\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param offset New offset in the X axis.\n     */\n    withOffsetX(offset: number): this {\n        this._positionStrategy.withDefaultOffsetX(offset);\n\n        return this;\n    }\n\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param  offset New offset in the Y axis.\n     */\n    withOffsetY(offset: number): this {\n        this._positionStrategy.withDefaultOffsetY(offset);\n\n        return this;\n    }\n\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked: boolean): this {\n        this._positionStrategy.withLockedPosition(isLocked);\n\n        return this;\n    }\n\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param positions Position pairs to be set on the strategy.\n     */\n    withPositions(positions: ConnectionPositionPair[]): this {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n\n        return this;\n    }\n\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    setOrigin(origin: ElementRef): this {\n        this._positionStrategy.setOrigin(origin);\n\n        return this;\n    }\n}\n","import { IOverlayReference } from '../overlay-reference';\n\nimport { IPositionStrategy } from './position-strategy';\n\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements IPositionStrategy {\n    /** The overlay to which this strategy is attached. */\n    private _overlayRef: IOverlayReference;\n    private _cssPosition: string = 'static';\n    private _topOffset: string = '';\n    private _bottomOffset: string = '';\n    private _leftOffset: string = '';\n    private _rightOffset: string = '';\n    private _alignItems: string = '';\n    private _justifyContent: string = '';\n    private _width: string = '';\n    private _height: string = '';\n\n    attach(overlayRef: IOverlayReference): void {\n        const config = overlayRef.getConfig();\n\n        this._overlayRef = overlayRef;\n\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n\n        overlayRef.hostElement.classList.add('cdk-global-overlay-wrapper');\n    }\n\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value: string = ''): this {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n\n        return this;\n    }\n\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value: string = ''): this {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n\n        return this;\n    }\n\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value: string = ''): this {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n\n        return this;\n    }\n\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value: string = ''): this {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n\n        return this;\n    }\n\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @deletion-target 7.0.0\n     */\n    width(value: string = ''): this {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        } else {\n            this._width = value;\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @deletion-target 7.0.0\n     */\n    height(value: string = ''): this {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        } else {\n            this._height = value;\n        }\n\n        return this;\n    }\n\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset: string = ''): this {\n        this.left(offset);\n        this._justifyContent = 'center';\n\n        return this;\n    }\n\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset: string = ''): this {\n        this.top(offset);\n        this._alignItems = 'center';\n\n        return this;\n    }\n\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply(): void {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef.hasAttached()) {\n            return;\n        }\n\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n\n        styles.position = this._cssPosition;\n        styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n        styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n\n        if (config.width === '100%') {\n            parentStyles.justifyContent = 'flex-start';\n        } else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            } else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        } else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n\n        parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n    }\n\n    /**\n     * Noop implemented as a part of the IPositionStrategy interface.\n     * @docs-private\n     */\n    dispose(): void {\n    } //tslint:disable-line\n}\n","import { DOCUMENT } from '@angular/common';\nimport { ElementRef, Inject, Injectable, Optional } from '@angular/core';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { ViewportRuler } from '@ptsecurity/cdk/scrolling';\n\nimport { IOriginConnectionPosition, IOverlayConnectionPosition } from './connected-position';\nimport { ConnectedPositionStrategy } from './connected-position-strategy';\nimport { FlexibleConnectedPositionStrategy } from './flexible-connected-position-strategy';\nimport { GlobalPositionStrategy } from './global-position-strategy';\n\n\n/** Builder for overlay position strategy. */\n@Injectable({ providedIn: 'root' })\nexport class OverlayPositionBuilder {\n    constructor(\n        private _viewportRuler: ViewportRuler,\n        @Inject(DOCUMENT) private _document: any,\n        // @deletion-target 7.0.0 `_platform` parameter to be made required.\n        @Optional() private _platform?: Platform) {\n    }\n\n    /**\n     * Creates a global position strategy.\n     */\n    global(): GlobalPositionStrategy {\n        return new GlobalPositionStrategy();\n    }\n\n    /**\n     * Creates a relative position strategy.\n     * @param elementRef //tslint:disable-line\n     * @param originPos //tslint:disable-line\n     * @param overlayPos //tslint:disable-line\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * @deletion-target 7.0.0\n     */\n    connectedTo(\n        elementRef: ElementRef,\n        originPos: IOriginConnectionPosition,\n        overlayPos: IOverlayConnectionPosition): ConnectedPositionStrategy { //tslint:disable-line\n\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, //tslint:disable-line\n            this._document);\n    }\n\n    /**\n     * Creates a flexible position strategy.\n     * @param elementRef //tslint:disable-line\n     */\n    flexibleConnectedTo(elementRef: ElementRef | HTMLElement): FlexibleConnectedPositionStrategy {\n        return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document,\n            this._platform);\n    }\n\n}\n"],"names":["DomPortalOutlet","pane","this","_componentFactoryResolver","_appRef","_injector","Overlay","tslib_1.__decorate","Injectable","tslib_1.__param","Inject","DOCUMENT","tslib_1.__metadata","ScrollStrategyOptions","OverlayContainer","ComponentFactoryResolver","OverlayPositionBuilder","OverlayKeyboardDispatcher","Injector","NgZone","Object","Directionality","defaultPositionList","originX","originY","overlayX","overlayY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","InjectionToken","CdkOverlayOrigin","elementRef","Directive","selector","exportAs","ElementRef","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","_scrollStrategy","_dir","viewportMargin","scrollStrategy","open","backdropClick","EventEmitter","positionChange","attach","detach","_hasBackdrop","_lockPosition","_growAfterOpen","_flexibleDimensions","_push","_backdropSubscription","Subscription","EMPTY","_templatePortal","TemplatePortal","defineProperty","prototype","get","_offsetX","set","offsetX","_position","_setPositions","_offsetY","offsetY","value","coerceBooleanProperty","_overlayRef","ngOnDestroy","_destroyOverlay","ngOnChanges","changes","withPositions","positions","withLockedPosition","lockPosition","setOrigin","origin","apply","_attachOverlay","_detachOverlay","_createOverlay","length","create","_buildConfig","positionStrategy","_createPositionStrategy","overlayConfig","OverlayConfig","direction","hasBackdrop","width","height","minWidth","minHeight","backdropClass","_this","strategy","position","flexibleConnectedTo","withFlexibleDimensions","flexibleDiemsions","withPush","push","withGrowAfterOpen","growAfterOpen","withViewportMargin","positionChanges","subscribe","emit","map","pos","updateSize","keydownEvents","event","keyCode","ESCAPE","hasAttached","unsubscribe","dispose","Input","Output","Optional","TemplateRef","ViewContainerRef","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","OverlayModule","NgModule","imports","BidiModule","PortalModule","ScrollDispatchModule","exports","declarations","providers","OVERLAY_PROVIDERS","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER","VIEWPORT_RULER_PROVIDER","OVERLAY_CONTAINER_PROVIDER","FullscreenOverlayContainer","_super","_document","call","tslib_1.__extends","_fullScreenEventName","_fullScreenListener","removeEventListener","getFullscreenElement","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","_createContainer","_adjustParentForFullscreenChange","_addFullscreenChangeListener","_containerElement","body","appendChild","fn","eventName","_getEventName","addEventListener","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","__extends","d","b","__","constructor","extendStatics","__decorate","decorators","target","key","desc","c","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","i","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","validateVerticalPosition","property","Error","validateHorizontalPosition","getMatScrollStrategyAlreadyAttachedError","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","top","outsideBelow","outsideLeft","right","left","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY","dispatcher","OVERLAY_CONTAINER_PROVIDER_FACTORY","parentContainer","extendStyles","dest","source","hasOwnProperty","overlay","scrollStrategies","reposition","setPrototypeOf","__proto__","Array","p","__assign","assign","t","s","n","NoopScrollStrategy","enable","disable","config","panelClass","keys","filter","undefined","forEach","ConnectionPositionPair","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","BlockScrollStrategy","_viewportRuler","document","_previousHTMLStyles","_isEnabled","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","coerceCssPixelValue","classList","add","html","previousHtmlScrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","scrollWidth","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","Math","abs","updatePosition","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","_a","noop","close","block","providedIn","ScrollDispatcher","ViewportRuler","_attachedOverlays","_keydownListener","_keydownEvents","next","_isAttached","index","indexOf","splice","SkipSelf","parentNode","removeChild","getContainerElement","container","createElement","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","Subject","_backdropElement","_backdropClick","_attachments","_detachments","portal","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","asObservable","pipe","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","isAttached","complete","attachments","detachments","getConfig","sizeConfig","tslib_1.__assign","setDirection","dir","getDirection","setAttribute","maxWidth","maxHeight","enablePointer","pointerEvents","parentElement","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","finishDetach_1","setTimeout","cssClasses","isAdd","coerceArray","cssClass","FlexibleConnectedPositionStrategy","connectedTo","_platform","_preferredPositions","Observable","observer","subscription","_positionChanges","_positionChangeSubscriptions","_isInitialRender","_lastBoundingBoxSize","_isPushed","_canPush","_hasFlexibleDimensions","_positionLocked","_viewportMargin","scrollables","_resizeSubscription","_validatePositions","hostElement","_boundingBox","change","_isDisposed","isBrowser","_lastPosition","reapplyLastPosition","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_origin","_overlayRect","fallback","originRect","viewportRect","flexibleFits","_i","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","_b","flexibleFits_1","fit_1","score","weight","lastPosition","withScrollableContainers","margin","flexibleDimensions","canPush","isLocked","nativeElement","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","fit","availableHeight","availableWidth","verticalFit","horizontalFit","_pushOverlayOnScreen","start","pushX","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_getScrollVisibility","changeEvent","xOrigin","elements","querySelectorAll","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","styles","_hasExactPosition","alignItems","justifyContent","_getExactOverlayY","_getExactOverlayX","transformString","transform","trim","documentHeight","clientHeight","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","_positionStrategy","withFallbackPosition","_direction","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","slice","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","marginLeft","marginTop","marginBottom","marginRight","global","Platform","nextUniqueId","_overlayContainer","_positionBuilder","_directionality","host","_createHostElement","_createPaneElement","portalOutlet","_createPortalOutlet","id","ApplicationRef"],"mappings":"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"}