{"version":3,"file":"cdk-overlay.umd.min.js","sources":["../../src/cdk/overlay/overlay.ts","../../src/cdk/overlay/overlay-directives.ts","../../src/cdk/overlay/overlay-module.ts","../../src/cdk/overlay/fullscreen-overlay-container.ts","../../node_modules/tslib/tslib.es6.js","../../src/cdk/overlay/position/connected-position.ts","../../src/cdk/overlay/scroll/scroll-strategy.ts","../../src/cdk/overlay/position/scroll-clip.ts","../../src/cdk/overlay/keyboard/overlay-keyboard-dispatcher.ts","../../src/cdk/overlay/overlay-container.ts","../../src/cdk/overlay/position/flexible-connected-position-strategy.ts","../../src/cdk/overlay/scroll/noop-scroll-strategy.ts","../../src/cdk/overlay/overlay-config.ts","../../src/cdk/overlay/scroll/block-scroll-strategy.ts","../../src/cdk/overlay/scroll/close-scroll-strategy.ts","../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts","../../src/cdk/overlay/scroll/scroll-strategy-options.ts","../../src/cdk/overlay/overlay-ref.ts","../../src/cdk/overlay/position/connected-position-strategy.ts","../../src/cdk/overlay/position/global-position-strategy.ts","../../src/cdk/overlay/position/overlay-position-builder.ts"],"sourcesContent":["\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  Injector,\n  NgZone\n} from '@angular/core';\nimport {Directionality} from '@ptsecurity/cdk/bidi';\nimport {DomPortalOutlet} from '@ptsecurity/cdk/portal';\n\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayContainer} from './overlay-container';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {ScrollStrategyOptions} from './scroll/index';\n\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\n// it needs is different based on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n@Injectable()\nexport class Overlay {\n  private _appRef: ApplicationRef;\n\n  constructor(\n              /** Scrolling strategies that can be used when creating an overlay. */\n              public scrollStrategies: ScrollStrategyOptions,\n              private _overlayContainer: OverlayContainer,\n              private _componentFactoryResolver: ComponentFactoryResolver,\n              private _positionBuilder: OverlayPositionBuilder,\n              private _keyboardDispatcher: OverlayKeyboardDispatcher,\n              private _injector: Injector,\n              private _ngZone: NgZone,\n              @Inject(DOCUMENT) private _document: any,\n              private _directionality: Directionality) { }\n\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(config?: OverlayConfig): OverlayRef {\n    const host = this._createHostElement();\n    const pane = this._createPaneElement(host);\n    const portalOutlet = this._createPortalOutlet(pane);\n    const overlayConfig = new OverlayConfig(config);\n\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone,\n      this._keyboardDispatcher, this._document);\n  }\n\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n  position(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(host: HTMLElement): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n\n    return pane;\n  }\n\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n  private _createHostElement(): HTMLElement {\n    const host = this._document.createElement('div');\n    this._overlayContainer.getContainerElement().appendChild(host);\n\n    return host;\n  }\n\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\n    }\n\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n}\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    ViewContainerRef\n} from '@angular/core';\nimport {Direction, Directionality} from '@ptsecurity/cdk/bidi';\nimport {coerceBooleanProperty} from '@ptsecurity/cdk/coercion';\nimport {ESCAPE} from '@ptsecurity/cdk/keycodes';\nimport {TemplatePortal} from '@ptsecurity/cdk/portal';\nimport {Subscription} from 'rxjs';\n\nimport {Overlay} from './overlay';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayRef} from './overlay-ref';\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\nimport {\n    IConnectedPosition,\n    FlexibleConnectedPositionStrategy\n} from './position/flexible-connected-position-strategy';\nimport {\n    RepositionScrollStrategy,\n    IRepositionScrollStrategyConfig,\n    IScrollStrategy\n} from './scroll/index';\n\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList: IConnectedPosition[] = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('cdk-connected-overlay-scroll-strategy');\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay: Overlay):\n    () => IScrollStrategy {\n    return (config?: IRepositionScrollStrategyConfig) => overlay.scrollStrategies.reposition(config);\n}\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n@Directive({\n    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n    exportAs: 'cdkOverlayOrigin'\n})\nexport class CdkOverlayOrigin {\n    constructor(\n        /** Reference to the element on which the directive is applied. */\n        public elementRef: ElementRef) { }\n}\n\n\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n@Directive({\n    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n    exportAs: 'cdkConnectedOverlay'\n})\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\n    /** Origin for the connected overlay. */\n    @Input('cdkConnectedOverlayOrigin') origin: CdkOverlayOrigin;\n\n    /** Registered connected position pairs. */\n    @Input('cdkConnectedOverlayPositions') positions: IConnectedPosition[];\n\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    @Input('cdkConnectedOverlayOffsetX')\n    get offsetX(): number { return this._offsetX; }\n    set offsetX(offsetX: number) {\n        this._offsetX = offsetX;\n\n        if (this._position) {\n            this._setPositions(this._position);\n        }\n    }\n\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    @Input('cdkConnectedOverlayOffsetY')\n    get offsetY() { return this._offsetY; }\n    set offsetY(offsetY: number) {\n        this._offsetY = offsetY;\n\n        if (this._position) {\n            this._setPositions(this._position);\n        }\n    }\n\n    /** The width of the overlay panel. */\n    @Input('cdkConnectedOverlayWidth') width: number | string;\n\n    /** The height of the overlay panel. */\n    @Input('cdkConnectedOverlayHeight') height: number | string;\n\n    /** The min width of the overlay panel. */\n    @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\n\n    /** The min height of the overlay panel. */\n    @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\n\n    /** The custom class to be set on the backdrop element. */\n    @Input('cdkConnectedOverlayBackdropClass') backdropClass: string;\n\n    /** Margin between the overlay and the viewport edges. */\n    @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\n\n    /** Strategy to be used when handling scroll events while the overlay is open. */\n    @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: IScrollStrategy =\n        this._scrollStrategy();\n\n    /** Whether the overlay is open. */\n    @Input('cdkConnectedOverlayOpen') open: boolean = false;\n\n    /** Whether or not the overlay should attach a backdrop. */\n    @Input('cdkConnectedOverlayHasBackdrop')\n    get hasBackdrop() { return this._hasBackdrop; }\n    set hasBackdrop(value: any) { this._hasBackdrop = coerceBooleanProperty(value); }\n\n    /** Whether or not the overlay should be locked when scrolling. */\n    @Input('cdkConnectedOverlayLockPosition')\n    get lockPosition() { return this._lockPosition; }\n    set lockPosition(value: any) { this._lockPosition = coerceBooleanProperty(value); }\n\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    @Input('cdkConnectedOverlayFlexibleDimensions')\n    get flexibleDiemsions() { return this._flexibleDimensions; }\n    set flexibleDiemsions(value: boolean) { this._flexibleDimensions = coerceBooleanProperty(value); }\n\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    @Input('cdkConnectedOverlayGrowAfterOpen')\n    get growAfterOpen() { return this._growAfterOpen; }\n    set growAfterOpen(value: boolean) { this._growAfterOpen = coerceBooleanProperty(value); }\n\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    @Input('cdkConnectedOverlayPush')\n    get push() { return this._push; }\n    set push(value: boolean) { this._push = coerceBooleanProperty(value); }\n\n    /** Event emitted when the backdrop is clicked. */\n    @Output() backdropClick = new EventEmitter<MouseEvent>();\n\n    /** Event emitted when the position has changed. */\n    @Output() positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n\n    /** Event emitted when the overlay has been attached. */\n    @Output() attach = new EventEmitter<void>();\n\n    /** Event emitted when the overlay has been detached. */\n    @Output() detach = new EventEmitter<void>();\n\n    private _overlayRef: OverlayRef;\n    private _templatePortal: TemplatePortal;\n    private _hasBackdrop = false;\n    private _lockPosition = false;\n    private _growAfterOpen = false;\n    private _flexibleDimensions = false;\n    private _push = false;\n    private _backdropSubscription = Subscription.EMPTY;\n    private _offsetX: number;\n    private _offsetY: number;\n    private _position: FlexibleConnectedPositionStrategy;\n\n    constructor(\n        private _overlay: Overlay,\n        templateRef: TemplateRef<any>,\n        viewContainerRef: ViewContainerRef,\n        @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) private _scrollStrategy,\n        @Optional() private _dir: Directionality) {\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    }\n\n    /** The associated overlay reference. */\n    get overlayRef(): OverlayRef {\n        return this._overlayRef;\n    }\n\n    /** The element's layout direction. */\n    get dir(): Direction {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n\n    ngOnDestroy() {\n        this._destroyOverlay();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this._position) {\n            if (changes['positions']) { //tslint:disable-line\n                this._position.withPositions(this.positions);\n            }\n\n            if (changes['lockPosition']) { //tslint:disable-line\n                this._position.withLockedPosition(this.lockPosition);\n            }\n\n            if (changes['origin']) { //tslint:disable-line\n                this._position.setOrigin(this.origin.elementRef);\n\n                if (this.open) {\n                    this._position.apply();\n                }\n            }\n        }\n\n        if (changes['open']) { //tslint:disable-line\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n\n    /** Creates an overlay */\n    private _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n\n        this._overlayRef = this._overlay.create(this._buildConfig());\n    }\n\n    /** Builds the overlay config based on the directive's inputs */\n    private _buildConfig(): OverlayConfig {\n        const positionStrategy = this._position = this._createPositionStrategy();\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n\n        return overlayConfig;\n    }\n\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this.origin.elementRef)\n            .withFlexibleDimensions(this.flexibleDiemsions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition);\n\n        this._setPositions(strategy);\n        strategy.positionChanges.subscribe((position) => this.positionChange.emit(position));\n\n        return strategy;\n    }\n\n    /**\n     * Sets the primary and fallback positions of a positions strategy,\n     * based on the current directive inputs.\n     */\n    private _setPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n        const positions: IConnectedPosition[] = this.positions.map((pos) => ({\n            originX: pos.originX,\n            originY: pos.originY,\n            overlayX: pos.overlayX,\n            overlayY: pos.overlayY,\n            offsetX: pos.offsetX || this.offsetX,\n            offsetY: pos.offsetY || this.offsetY\n        }));\n\n        positionStrategy.withPositions(positions);\n    }\n\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    private _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n\n            this._overlayRef!.keydownEvents().subscribe((event: KeyboardEvent) => { //tslint:disable-line\n                if (event.keyCode === ESCAPE) {\n                    this._detachOverlay();\n                }\n            });\n        } else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight\n            });\n        }\n\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n            this.attach.emit();\n        }\n\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe((event) => {\n                this.backdropClick.emit(event);\n            });\n        }\n    }\n\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    private _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this.detach.emit();\n        }\n\n        this._backdropSubscription.unsubscribe();\n    }\n\n    /** Destroys the overlay created by this directive. */\n    private _destroyOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n\n        this._backdropSubscription.unsubscribe();\n    }\n}\n\n\n/** @docs-private */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n","import {NgModule, Provider} from '@angular/core';\nimport {BidiModule} from '@ptsecurity/cdk/bidi';\nimport {PortalModule} from '@ptsecurity/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@ptsecurity/cdk/scrolling';\n\nimport {OVERLAY_KEYBOARD_DISPATCHER_PROVIDER} from './keyboard/overlay-keyboard-dispatcher';\nimport {Overlay} from './overlay';\nimport {OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\nimport {\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    CdkConnectedOverlay,\n    CdkOverlayOrigin\n} from './overlay-directives';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\n\n\n@NgModule({\n    imports: [BidiModule, PortalModule, ScrollDispatchModule],\n    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollDispatchModule],\n    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n    providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER\n    ]\n})\nexport class OverlayModule {}\n\n\n/**\n * @deprecated Use `OverlayModule` instead.\n * @deletion-target 7.0.0\n */\nexport const OVERLAY_PROVIDERS: Provider[] = [\n    Overlay,\n    OverlayPositionBuilder,\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n    VIEWPORT_RULER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n","import {DOCUMENT} from '@angular/common';\nimport {Injectable, Inject, OnDestroy} from '@angular/core';\n\nimport {OverlayContainer} from './overlay-container';\n\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n@Injectable()\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\n  private _fullScreenEventName: string | undefined;\n  private _fullScreenListener: () => void;\n\n  constructor(@Inject(DOCUMENT) _document: any) {\n    super(_document);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement(): Element {\n        return this._document.fullscreenElement ||\n            this._document.webkitFullscreenElement ||\n            (this._document as any).mozFullScreenElement ||\n            (this._document as any).msFullscreenElement ||\n            null;\n    }\n\n  protected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n\n  private _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n\n    const fullscreenElement = this.getFullscreenElement();\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n\n  private _addFullscreenChangeListener(fn: () => void) {\n    const eventName = this._getEventName();\n\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n\n      this._document.addEventListener(eventName, fn);\n      this._fullScreenListener = fn;\n    }\n  }\n\n  private _getEventName(): string | undefined {\n    if (!this._fullScreenEventName) {\n      if (this._document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (this._document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if ((this._document as any).mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if ((this._document as any).msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n\n    return this._fullScreenEventName;\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {Optional} from '@angular/core';\n\n\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface IOriginConnectionPosition {\n    originX: HorizontalConnectionPos;\n    originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface IOverlayConnectionPosition {\n    overlayX: HorizontalConnectionPos;\n    overlayY: VerticalConnectionPos;\n}\n\n/** The points of the origin element and the overlay element to connect. */\nexport class ConnectionPositionPair {\n    /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n    originX: HorizontalConnectionPos;\n    /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n    originY: VerticalConnectionPos;\n    /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n    overlayX: HorizontalConnectionPos;\n    /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n    overlayY: VerticalConnectionPos;\n\n    constructor(\n        origin: IOriginConnectionPosition,\n        overlay: IOverlayConnectionPosition,\n        public offsetX?: number,\n        public offsetY?: number) {\n\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nexport class ScrollingVisibility {\n    isOriginClipped: boolean;\n    isOriginOutsideView: boolean;\n    isOverlayClipped: boolean;\n    isOverlayOutsideView: boolean;\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nexport class ConnectedOverlayPositionChange {\n    constructor(\n        /** The position used as a result of this change. */\n        public connectionPair: ConnectionPositionPair,\n        /** @docs-private */\n        @Optional() public scrollableViewProperties: ScrollingVisibility) {}\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n","import {IOverlayReference} from '../overlay-reference';\n\n\n/**\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\n */\nexport interface IScrollStrategy {\n  /** Enable this scroll strategy (called when the attached overlay is attached to a portal). */\n  enable(): void;\n\n  /** Disable this scroll strategy (called when the attached overlay is detached from a portal). */\n  disable(): void;\n\n  /** Attaches this `ScrollStrategy` to an overlay. */\n  attach(overlayRef: IOverlayReference): void;\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nexport function getMatScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n","/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nexport function isElementScrolledOutsideView(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some((containerBounds) => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nexport function isElementClippedByScrolling(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some((scrollContainerRect) => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n","import {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf\n} from '@angular/core';\n\nimport {OverlayRef} from '../overlay-ref';\n\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayKeyboardDispatcher implements OnDestroy {\n\n  /** Currently attached overlays in the order they were attached. */\n  _attachedOverlays: OverlayRef[] = [];\n\n  private _document: Document;\n  private _isAttached: boolean;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    this._detach();\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayRef): void {\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      this._document.body.addEventListener('keydown', this._keydownListener, true);\n      this._isAttached = true;\n    }\n\n    this._attachedOverlays.push(overlayRef);\n  }\n\n  /** Remove an overlay from the list of attached overlay refs. */\n  remove(overlayRef: OverlayRef): void {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this._detach();\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  private _detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener, true);\n      this._isAttached = false;\n    }\n  }\n\n  /** Keyboard event listener that will be attached to the body. */\n  private _keydownListener = (event: KeyboardEvent) => {\n    if (this._attachedOverlays.length) {\n      // Dispatch the keydown event to the top overlay. We want to target the most recent overlay,\n      // rather than trying to match where the event came from, because some components might open\n      // an overlay, but keep focus on a trigger element (e.g. for select and autocomplete).\n      this._attachedOverlays[this._attachedOverlays.length - 1]._keydownEvents.next(event);\n    }\n  }\n}\n\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(\n    dispatcher: OverlayKeyboardDispatcher, _document: any) {\n  return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n  // If there is already an OverlayKeyboardDispatcher available, use that.\n  // Otherwise, provide a new one.\n  provide: OverlayKeyboardDispatcher,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n\n    // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n    // of the type expected by Angular\n    DOCUMENT as InjectionToken<any>\n  ],\n  useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n","\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf\n} from '@angular/core';\n\n\n/** Container inside which all overlays will render. */\n@Injectable({providedIn: 'root'})\nexport class OverlayContainer implements OnDestroy {\n  protected _containerElement: HTMLElement;\n\n  constructor(@Inject(DOCUMENT) protected _document: any) {}\n\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    const container = this._document.createElement('div');\n\n    container.classList.add('cdk-overlay-container');\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer,\n                                                   _document: any) {\n  return parentContainer || new OverlayContainer(_document);\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayContainer],\n    DOCUMENT as InjectionToken<any> // We need to use the InjectionToken somewhere to keep TS happy\n  ],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n","import {ElementRef} from '@angular/core';\nimport {coerceCssPixelValue} from '@ptsecurity/cdk/coercion';\nimport {Platform} from '@ptsecurity/cdk/platform';\nimport {ViewportRuler, CdkScrollable} from '@ptsecurity/cdk/scrolling';\nimport {Observable, Subscription, Subject} from 'rxjs';\n\nimport {IOverlayReference} from '../overlay-reference';\n\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    ScrollingVisibility,\n    validateHorizontalPosition,\n    validateVerticalPosition\n} from './connected-position';\nimport {IPositionStrategy} from './position-strategy';\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\n\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class FlexibleConnectedPositionStrategy implements IPositionStrategy {\n\n    /** Ordered list of preferred positions, from most to least desirable. */\n    _preferredPositions: ConnectionPositionPair[] = [];\n\n    /** Observable sequence of position changes. */\n    positionChanges: Observable<ConnectedOverlayPositionChange> = Observable.create((observer) => {\n        const subscription = this._positionChanges.subscribe(observer);\n        this._positionChangeSubscriptions++;\n\n        return () => {\n            subscription.unsubscribe();\n            this._positionChangeSubscriptions--;\n        };\n    });\n\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n\n    /** The overlay to which this strategy is attached. */\n    private _overlayRef: IOverlayReference;\n\n    /** Whether we're performing the very first positioning of the overlay. */\n    private _isInitialRender = true;\n\n    /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n    private _lastBoundingBoxSize = {width: 0, height: 0};\n\n    /** Whether the overlay was pushed in a previous positioning. */\n    private _isPushed = false;\n\n    /** Whether the overlay can be pushed on-screen on the initial open. */\n    private _canPush = true;\n\n    /** Whether the overlay can grow via flexible width/height after the initial open. */\n    private _growAfterOpen = false;\n\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    private _hasFlexibleDimensions = true;\n\n    /** Whether the overlay position is locked. */\n    private _positionLocked = false;\n\n    /** Cached origin dimensions */\n    private _originRect: ClientRect;\n\n    /** Cached overlay dimensions */\n    private _overlayRect: ClientRect;\n\n    /** Cached viewport dimensions */\n    private _viewportRect: ClientRect;\n\n    /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n    private _viewportMargin = 0;\n\n    /** The Scrollable containers used to check scrollable view properties on position change. */\n    private scrollables: CdkScrollable[] = [];\n\n    /** The origin element against which the overlay will be positioned. */\n    private _origin: HTMLElement;\n\n    /** The overlay pane element. */\n    private _pane: HTMLElement;\n\n    /** Whether the strategy has been disposed of already. */\n    private _isDisposed: boolean;\n\n    /**\n     * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n     * within the viewport.\n     */\n    private _boundingBox: HTMLElement | null;\n\n    /** The last position to have been calculated as the best fit position. */\n    private _lastPosition: IConnectedPosition | null;\n\n    /** Subject that emits whenever the position changes. */\n    private _positionChanges = new Subject<ConnectedOverlayPositionChange>();\n\n    /** Subscription to viewport size changes. */\n    private _resizeSubscription = Subscription.EMPTY;\n\n    /** Default offset for the overlay along the x axis. */\n    private _offsetX = 0;\n\n    /** Default offset for the overlay along the y axis. */\n    private _offsetY = 0;\n\n    /** Selector to be used when finding the elements on which to set the transform origin. */\n    private _transformOriginSelector: string;\n\n    /** Amount of subscribers to the `positionChanges` stream. */\n    private _positionChangeSubscriptions = 0;\n\n    constructor(\n        connectedTo: ElementRef | HTMLElement,\n        private _viewportRuler: ViewportRuler,\n        private _document: Document,\n        // @deletion-target 7.0.0 `_platform` parameter to be made required.\n        private _platform?: Platform) {\n        this.setOrigin(connectedTo);\n    }\n\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef: IOverlayReference): void {\n        if (this._overlayRef && overlayRef !== this._overlayRef) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n\n        this._validatePositions();\n\n        overlayRef.hostElement.classList.add('cdk-overlay-connected-position-bounding-box');\n\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => this.apply());\n    }\n\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply(): void {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || (this._platform && !this._platform.isBrowser)) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n\n            return;\n        }\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._origin.getBoundingClientRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits: IFlexibleFit[] = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback: IFallbackPosition | undefined;\n\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) { //tslint:disable-line\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, pos); //tslint:disable-line\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos); //tslint:disable-line\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos); //tslint:disable-line\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n\n                continue;\n            }\n\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\n            }\n        }\n\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit: IFlexibleFit | null = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score =\n                    fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n\n            this._isPushed = false;\n            this._applyPosition(bestFit!.position, bestFit!.origin); //tslint:disable-line\n\n            return;\n        }\n\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            this._isPushed = true;\n            this._applyPosition(fallback!.position, fallback!.originPoint); //tslint:disable-line\n\n            return;\n        }\n\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback!.position, fallback!.originPoint); //tslint:disable-line\n    }\n\n    detach() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (!this._isDisposed) {\n            this.detach();\n            this._boundingBox = null;\n            this._positionChanges.complete();\n            this._isDisposed = true;\n        }\n    }\n\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition(): void {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._origin.getBoundingClientRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables: CdkScrollable[]) {\n        this.scrollables = scrollables;\n    }\n\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions: IConnectedPosition[]): this {\n        this._preferredPositions = positions;\n\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition!) === -1) { //tslint:disable-line\n            this._lastPosition = null;\n        }\n\n        this._validatePositions();\n\n        return this;\n    }\n\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin: number): this {\n        this._viewportMargin = margin;\n\n        return this;\n    }\n\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true): this {\n        this._hasFlexibleDimensions = flexibleDimensions;\n\n        return this;\n    }\n\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true): this {\n        this._growAfterOpen = growAfterOpen;\n\n        return this;\n    }\n\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true): this {\n        this._canPush = canPush;\n\n        return this;\n    }\n\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true): this {\n        this._positionLocked = isLocked;\n\n        return this;\n    }\n\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    setOrigin(origin: ElementRef | HTMLElement): this {\n        this._origin = origin instanceof ElementRef ? origin.nativeElement : origin;\n\n        return this;\n    }\n\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset: number): this {\n        this._offsetX = offset;\n\n        return this;\n    }\n\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset: number): this {\n        this._offsetY = offset;\n\n        return this;\n    }\n\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector: string): this {\n        this._transformOriginSelector = selector;\n\n        return this;\n    }\n\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    private _getOriginPoint(originRect: ClientRect, pos: IConnectedPosition): IPoint {\n        let x: number;\n        if (pos.originX === 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2); //tslint:disable-line\n        } else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX === 'start' ? startX : endX;\n        }\n\n        let y: number;\n        if (pos.originY === 'center') {\n            y = originRect.top + (originRect.height / 2); //tslint:disable-line\n        } else {\n            y = pos.originY === 'top' ? originRect.top : originRect.bottom;\n        }\n\n        return {x, y};\n    }\n\n\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    private _getOverlayPoint( //tslint:disable-line\n        originPoint: IPoint,\n        overlayRect: ClientRect,\n        pos: IConnectedPosition): IPoint {\n\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX: number;\n        if (pos.overlayX === 'center') {\n            overlayStartX = -overlayRect.width / 2; //tslint:disable-line\n        } else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        } else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n\n        let overlayStartY: number;\n        if (pos.overlayY === 'center') {\n            overlayStartY = -overlayRect.height / 2; //tslint:disable-line\n        } else {\n            overlayStartY = pos.overlayY === 'top' ? 0 : -overlayRect.height;\n        }\n\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY\n        };\n    }\n\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    private _getOverlayFit(point: IPoint, overlay: ClientRect, viewport: ClientRect,\n                           position: IConnectedPosition): IOverlayFit {\n\n        let {x, y} = point;\n        let offsetX = this._getOffset(position, 'x'); //tslint:disable-line\n        let offsetY = this._getOffset(position, 'y'); //tslint:disable-line\n\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n\n        if (offsetY) {\n            y += offsetY;\n        }\n\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x; //tslint:disable-line\n        let rightOverflow = (x + overlay.width) - viewport.width; //tslint:disable-line\n        let topOverflow = 0 - y; //tslint:disable-line\n        let bottomOverflow = (y + overlay.height) - viewport.height; //tslint:disable-line\n\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow); //tslint:disable-line\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow); //tslint:disable-line\n        let visibleArea = visibleWidth * visibleHeight; //tslint:disable-line\n\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth === overlay.width\n        };\n    }\n\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlat at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    private _canFitWithFlexibleDimensions(fit: IOverlayFit, point: IPoint, viewport: ClientRect) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = this._overlayRef.getConfig().minHeight;\n            const minWidth = this._overlayRef.getConfig().minWidth;\n\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n\n            return verticalFit && horizontalFit;\n        }\n    }\n\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start The starting point from which the overlay is pushed.\n     * @param overlay The overlay dimensions.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    private _pushOverlayOnScreen(start: IPoint, overlay: ClientRect): IPoint {\n        const viewport = this._viewportRect;\n\n        // Determine how much the overlay goes outside the viewport on each side, which we'll use to\n        // decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n        const overflowTop = Math.max(viewport.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - start.x, 0);\n\n        // Amount by which to push the overlay in each direction such that it remains on-screen.\n        let pushX, pushY = 0; //tslint:disable-line\n\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        } else {\n            pushX = viewport.left - start.x;\n        }\n\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        } else {\n            pushY = viewport.top - start.y;\n        }\n\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY\n        };\n    }\n\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    private _applyPosition(position: IConnectedPosition, originPoint: IPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChangeSubscriptions > 0) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n\n        this._isInitialRender = false;\n    }\n\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    private _setTransformOrigin(position: IConnectedPosition) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n\n        const elements: NodeListOf<HTMLElement> =\n            this._boundingBox!.querySelectorAll(this._transformOriginSelector); //tslint:disable-line\n        let xOrigin: 'left' | 'right' | 'center';\n        let yOrigin: 'top' | 'bottom' | 'center' = position.overlayY; //tslint:disable-line\n\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        } else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        } else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n\n        for (let i = 0; i < elements.length; i++) { //tslint:disable-line\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    private _calculateBoundingBoxRect(origin: IPoint, position: IConnectedPosition): IBoundingBoxRect {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom; //tslint:disable-line\n\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.bottom - origin.y;\n        } else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2; //tslint:disable-line\n            height = viewport.height - bottom + this._viewportMargin;\n        } else {\n            // If neither top nor bottom, it means that the overlay\n            // is vertically centered on the origin point.\n            const smallestDistanceToViewportEdge =\n                Math.min(viewport.bottom - origin.y, origin.y - viewport.left);\n            const previousHeight = this._lastBoundingBoxSize.height;\n\n            height = smallestDistanceToViewportEdge * 2; //tslint:disable-line\n            top = origin.y - smallestDistanceToViewportEdge;\n\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2); //tslint:disable-line\n            }\n        }\n\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge =\n            (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge =\n            (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n\n        let width, left, right; //tslint:disable-line\n\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.right - origin.x + this._viewportMargin;\n            width = origin.x - viewport.left;\n        } else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        } else {\n            // If neither start nor end, it means that the overlay\n            // is horizontally centered on the origin point.\n            const smallestDistanceToViewportEdge =\n                Math.min(viewport.right - origin.x, origin.x - viewport.top);\n            const previousWidth = this._lastBoundingBoxSize.width;\n\n            width = smallestDistanceToViewportEdge * 2; //tslint:disable-line\n            left = origin.x - smallestDistanceToViewportEdge;\n\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2); //tslint:disable-line\n            }\n        }\n\n        return {top, left, bottom, right, width, height};\n    }\n\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    private _setBoundingBoxStyles(origin: IPoint, position: IConnectedPosition): void {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n\n        const styles = {} as CSSStyleDeclaration;\n\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = '';\n            styles.width = styles.height = '100%';\n        } else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            } else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            } else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n\n        this._lastBoundingBoxSize = boundingBoxRect;\n\n        extendStyles(this._boundingBox!.style, styles); //tslint:disable-line\n    }\n\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    private _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox!.style, { //tslint:disable-line\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: ''\n        } as CSSStyleDeclaration);\n    }\n\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    private _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: ''\n        } as CSSStyleDeclaration);\n    }\n\n    /** Sets positioning styles to the overlay element. */\n    private _setOverlayElementStyles(originPoint: IPoint, position: IConnectedPosition): void {\n        const styles = {} as CSSStyleDeclaration;\n\n        if (this._hasExactPosition()) {\n            extendStyles(styles, this._getExactOverlayY(position, originPoint));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint));\n        } else {\n            styles.position = 'static';\n        }\n\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x'); //tslint:disable-line\n        let offsetY = this._getOffset(position, 'y'); //tslint:disable-line\n\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n\n        styles.transform = transformString.trim();\n\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n            styles.maxHeight = '';\n        }\n\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n            styles.maxWidth = '';\n        }\n\n        extendStyles(this._pane.style, styles);\n    }\n\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    private _getExactOverlayY(position: IConnectedPosition, originPoint: IPoint) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = {top: null, bottom: null} as CSSStyleDeclaration; //tslint:disable-line\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\n        }\n\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        } else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n\n        return styles;\n    }\n\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    private _getExactOverlayX(position: IConnectedPosition, originPoint: IPoint) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = {left: null, right: null} as CSSStyleDeclaration; //tslint:disable-line\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\n        }\n\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty: 'left' | 'right';\n\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        } else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        } else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n\n        return styles;\n    }\n\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    private _getScrollVisibility(): ScrollingVisibility {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._origin.getBoundingClientRect();\n        const overlayBounds =  this._pane.getBoundingClientRect();\n\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this.scrollables.map((scrollable) => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds)\n        };\n    }\n\n    /** Subtracts the amount that an element is overflowing on an axis from it's length. */\n    private _subtractOverflows(length: number, ...overflows: number[]): number {\n        return overflows.reduce((currentValue: number, currentOverflow: number) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    private _getNarrowedViewportRect(): ClientRect {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n        return {\n            top:    scrollPosition.top + this._viewportMargin,\n            left:   scrollPosition.left + this._viewportMargin,\n            right:  scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width:  width  - (2 * this._viewportMargin), //tslint:disable-line\n            height: height - (2 * this._viewportMargin) //tslint:disable-line\n        };\n    }\n\n    /** Whether the we're dealing with an RTL context */\n    private _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    private _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n\n    /** Retrieves the offset of a position along the x or y axis. */\n    private _getOffset(position: IConnectedPosition, axis: 'x' | 'y') {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n\n    /** Validates that the current position match the expected values. */\n    private _validatePositions(): void {\n        if (!this._preferredPositions.length) {\n            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        }\n\n        // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n        this._preferredPositions.forEach((pair) => {\n            validateHorizontalPosition('originX', pair.originX);\n            validateVerticalPosition('originY', pair.originY);\n            validateHorizontalPosition('overlayX', pair.overlayX);\n            validateVerticalPosition('overlayY', pair.overlayY);\n        });\n    }\n}\n\n/** A simple (x, y) coordinate. */\ninterface IPoint {\n    x: number;\n    y: number;\n}\n\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\ninterface IOverlayFit {\n    /** Whether the overlay fits completely in the viewport. */\n    isCompletelyWithinViewport: boolean;\n\n    /** Whether the overlay fits in the viewport on the y-axis. */\n    fitsInViewportVertically: boolean;\n\n    /** Whether the overlay fits in the viewport on the x-axis. */\n    fitsInViewportHorizontally: boolean;\n\n    /** The total visible area (in px^2) of the overlay inside the viewport. */\n    visibleArea: number;\n}\n\n/** Record of the measurments determining whether an overlay will fit in a specific position. */\ninterface IFallbackPosition {\n    position: IConnectedPosition;\n    originPoint: IPoint;\n    overlayPoint: IPoint;\n    overlayFit: IOverlayFit;\n    overlayRect: ClientRect;\n}\n\n/** Position and size of the overlay sizing wrapper for a specific position. */\ninterface IBoundingBoxRect {\n    top: number;\n    left: number;\n    bottom: number;\n    right: number;\n    height: number;\n    width: number;\n}\n\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\ninterface IFlexibleFit {\n    position: IConnectedPosition;\n    origin: IPoint;\n    overlayRect: ClientRect;\n    boundingBoxRect: IBoundingBoxRect;\n}\n\n/** A connected position as specified by the user. */\nexport interface IConnectedPosition {\n    originX: 'start' | 'center' | 'end';\n    originY: 'top' | 'center' | 'bottom';\n\n    overlayX: 'start' | 'center' | 'end';\n    overlayY: 'top' | 'center' | 'bottom';\n\n    weight?: number;\n    offsetX?: number;\n    offsetY?: number;\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(dest: CSSStyleDeclaration, source: CSSStyleDeclaration): CSSStyleDeclaration {\n    for (let key in source) { //tslint:disable-line\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n\n    return dest;\n}\n","import {IScrollStrategy} from './scroll-strategy';\n\n\n/** Scroll strategy that doesn't do anything. */\nexport class NoopScrollStrategy implements IScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() { } // tslint:disable-line\n  /** Does nothing, as this scroll strategy is a no-op. */\n  disable() { } // tslint:disable-line\n  /** Does nothing, as this scroll strategy is a no-op. */\n  attach() { } // tslint:disable-line\n}\n","import {Direction, Directionality} from '@ptsecurity/cdk/bidi';\n\nimport {IPositionStrategy} from './position/position-strategy';\nimport {NoopScrollStrategy} from './scroll/noop-scroll-strategy';\nimport {IScrollStrategy} from './scroll/scroll-strategy';\n\n\n/** Initial configuration used when creating an overlay. */\nexport class OverlayConfig {\n    /** Strategy with which to position the overlay. */\n    positionStrategy?: IPositionStrategy;\n\n    /** Strategy to be used when handling scroll events while the overlay is open. */\n    scrollStrategy?: IScrollStrategy = new NoopScrollStrategy();\n\n    /** Custom class to add to the overlay pane. */\n    panelClass?: string | string[] = '';\n\n    /** Whether the overlay has a backdrop. */\n    hasBackdrop?: boolean = false;\n\n    /** Custom class to add to the backdrop */\n    backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\n\n    /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n    width?: number | string;\n\n    /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n    height?: number | string;\n\n    /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n    minWidth?: number | string;\n\n    /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n    minHeight?: number | string;\n\n    /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n    maxWidth?: number | string;\n\n    /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n    maxHeight?: number | string;\n\n    /**\n     * Direction of the text in the overlay panel. If a `Directionality` instance\n     * is passed in, the overlay will handle changes to its value automatically.\n     */\n    direction?: Direction | Directionality;\n\n    constructor(config?: OverlayConfig) {\n        if (config) {\n            Object.keys(config)\n                .filter((key) => config[key] !== undefined)\n                .forEach((key) => this[key] = config[key]);\n        }\n    }\n}\n","import {coerceCssPixelValue} from '@ptsecurity/cdk/coercion';\nimport {ViewportRuler} from '@ptsecurity/cdk/scrolling';\n\nimport {IScrollStrategy} from './scroll-strategy';\n\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements IScrollStrategy {\n  private _previousHTMLStyles = { top: '', left: '' };\n  private _previousScrollPosition: { top: number, left: number };\n  private _isEnabled = false;\n  private _document: Document;\n\n  constructor(private _viewportRuler: ViewportRuler, document: any) {\n    this._document = document;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach() { } // tslint:disable-line\n\n  /** Blocks page-level scroll while the attached overlay is open. */\n  enable() { // tslint:disable-line\n\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n\n  /** Unblocks page-level scroll while the attached overlay is open. */\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement;\n      const body = this._document.body;\n      const previousHtmlScrollBehavior = html.style['scrollBehavior'] || ''; // tslint:disable-line\n      const previousBodyScrollBehavior = body.style['scrollBehavior'] || ''; // tslint:disable-line\n\n      this._isEnabled = false;\n\n      html.style.left = this._previousHTMLStyles.left;\n      html.style.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      html.style['scrollBehavior'] = body.style['scrollBehavior'] = 'auto'; // tslint:disable-line\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      html.style['scrollBehavior'] = previousHtmlScrollBehavior; // tslint:disable-line\n      body.style['scrollBehavior'] = previousBodyScrollBehavior; // tslint:disable-line\n    }\n  }\n\n  private _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n    const viewport = this._viewportRuler.getViewportSize();\n\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n","import {NgZone} from '@angular/core';\nimport {ScrollDispatcher, ViewportRuler} from '@ptsecurity/cdk/scrolling';\nimport {Subscription} from 'rxjs';\n\nimport {IOverlayReference} from '../overlay-reference';\n\nimport {IScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\n\n\n/**\n * Config options for the CloseScrollStrategy.\n */\nexport interface ICloseScrollStrategyConfig {\n    /** Amount of pixels the user has to scroll before the overlay is closed. */\n    threshold?: number;\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements IScrollStrategy {\n    private _scrollSubscription: Subscription|null = null;\n    private _overlayRef: IOverlayReference;\n    private _initialScrollPosition: number;\n\n    constructor(\n        private _scrollDispatcher: ScrollDispatcher,\n        private _ngZone: NgZone,\n        private _viewportRuler: ViewportRuler,\n        private _config?: ICloseScrollStrategyConfig) {}\n\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef: IOverlayReference) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n\n        this._overlayRef = overlayRef;\n    }\n\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n\n        const stream = this._scrollDispatcher.scrolled(0);\n\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) { //tslint:disable-line\n                    this._detach();\n                } else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        } else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n\n    /** Detaches the overlay ref and disables the scroll strategy. */\n    private _detach = () => {\n        this.disable();\n\n        if (this._overlayRef.hasAttached()) {\n            this._ngZone.run(() => this._overlayRef.detach());\n        }\n    }\n}\n","import {NgZone} from '@angular/core';\nimport {ScrollDispatcher, ViewportRuler} from '@ptsecurity/cdk/scrolling';\nimport {Subscription} from 'rxjs';\n\nimport {IOverlayReference} from '../overlay-reference';\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\n\nimport {IScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\n\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface IRepositionScrollStrategyConfig {\n    /** Time in milliseconds to throttle the scroll events. */\n    scrollThrottle?: number;\n\n    /** Whether to close the overlay once the user has scrolled away completely. */\n    autoClose?: boolean;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements IScrollStrategy {\n    private _scrollSubscription: Subscription|null = null;\n    private _overlayRef: IOverlayReference;\n\n    constructor(\n        private _scrollDispatcher: ScrollDispatcher,\n        private _viewportRuler: ViewportRuler,\n        private _ngZone: NgZone,\n        private _config?: IRepositionScrollStrategyConfig) { }\n\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef: IOverlayReference) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n\n        this._overlayRef = overlayRef;\n    }\n\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const {width, height} = this._viewportRuler.getViewportSize();\n\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\n\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n}\n","import {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {ScrollDispatcher, ViewportRuler} from '@ptsecurity/cdk/scrolling';\n\n\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {CloseScrollStrategy, ICloseScrollStrategyConfig} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {\n  RepositionScrollStrategy,\n  IRepositionScrollStrategyConfig\n} from './reposition-scroll-strategy';\n\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollStrategyOptions {\n  private _document: Document;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /** Do nothing on scroll. */\n  noop = () => new NoopScrollStrategy();\n\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n  close = (config?: ICloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher,\n      this._ngZone, this._viewportRuler, config)\n\n  /** Block scrolling. */\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n  reposition = (config?: IRepositionScrollStrategyConfig) => new RepositionScrollStrategy(\n      this._scrollDispatcher, this._viewportRuler, this._ngZone, config)\n}\n","\n\nimport {ComponentRef, EmbeddedViewRef, NgZone} from '@angular/core';\nimport {Direction, Directionality} from '@ptsecurity/cdk/bidi';\nimport {coerceCssPixelValue, coerceArray} from '@ptsecurity/cdk/coercion';\nimport {ComponentPortal, Portal, IPortalOutlet, TemplatePortal} from '@ptsecurity/cdk/portal';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\n\n\n/** An object where all of its properties cannot be written. */\nexport type ImmutableObject<T> = {\n    readonly [P in keyof T]: T[P];\n};\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements IPortalOutlet {\n    /** Stream of keydown events dispatched to this overlay. */\n    _keydownEvents = new Subject<KeyboardEvent>();\n\n    private _backdropElement: HTMLElement | null = null;\n    private _backdropClick: Subject<MouseEvent> = new Subject();\n    private _attachments = new Subject<void>();\n    private _detachments = new Subject<void>();\n\n    constructor(\n        private _portalOutlet: IPortalOutlet,\n        private _host: HTMLElement,\n        private _pane: HTMLElement,\n        private _config: ImmutableObject<OverlayConfig>,\n        private _ngZone: NgZone,\n        private _keyboardDispatcher: OverlayKeyboardDispatcher,\n        private _document: Document) {\n\n        if (_config.scrollStrategy) {\n            _config.scrollStrategy.attach(this);\n        }\n    }\n\n    /** The overlay's HTML element */\n    get overlayElement(): HTMLElement {\n        return this._pane;\n    }\n\n    /** The overlay's backdrop HTML element. */\n    get backdropElement(): HTMLElement | null {\n        return this._backdropElement;\n    }\n\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement(): HTMLElement {\n        return this._host;\n    }\n\n    attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n\n    attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n\n    attach(portal: any): any;\n\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal: Portal<any>): any {\n        let attachResult = this._portalOutlet.attach(portal); //tslint:disable-line\n\n        if (this._config.positionStrategy) {\n            this._config.positionStrategy.attach(this);\n        }\n\n        // Update the pane element with the given configuration.\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.enable();\n        }\n\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                // The overlay could've been detached before the zone has stabilized.\n                if (this.hasAttached()) {\n                    this.updatePosition();\n                }\n            });\n\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n\n        return attachResult;\n    }\n\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach(): any {\n        if (!this.hasAttached()) {\n            return;\n        }\n\n        this.detachBackdrop();\n\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n\n        if (this._config.positionStrategy && this._config.positionStrategy.detach) {\n            this._config.positionStrategy.detach();\n        }\n\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n\n        const detachmentResult = this._portalOutlet.detach();\n\n        // Only emit after everything is detached.\n        this._detachments.next();\n\n        // Remove this overlay from keyboard dispatcher tracking\n        this._keyboardDispatcher.remove(this);\n\n        return detachmentResult;\n    }\n\n    /** Cleans up the overlay from the DOM. */\n    dispose(): void {\n        const isAttached = this.hasAttached();\n\n        if (this._config.positionStrategy) {\n            this._config.positionStrategy.dispose();\n        }\n\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n\n        this.detachBackdrop();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = null!; //tslint:disable-line\n        }\n\n        this._pane = null!; //tslint:disable-line\n\n        if (isAttached) {\n            this._detachments.next();\n        }\n\n        this._detachments.complete();\n    }\n\n    /** Whether the overlay has attached content. */\n    hasAttached(): boolean {\n        return this._portalOutlet.hasAttached();\n    }\n\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick(): Observable<MouseEvent> {\n        return this._backdropClick.asObservable();\n    }\n\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments(): Observable<void> {\n        return this._attachments.asObservable();\n    }\n\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments(): Observable<void> {\n        return this._detachments.asObservable();\n    }\n\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents(): Observable<KeyboardEvent> {\n        return this._keydownEvents.asObservable();\n    }\n\n    /** Gets the the current overlay configuration, which is immutable. */\n    getConfig(): OverlayConfig {\n        return this._config;\n    }\n\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._config.positionStrategy) {\n            this._config.positionStrategy.apply();\n        }\n    }\n\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig: IOverlaySizeConfig) {\n        this._config = {...this._config, ...sizeConfig};\n        this._updateElementSize();\n    }\n\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir: Direction | Directionality) {\n        this._config = {...this._config, direction: dir};\n        this._updateElementDirection();\n    }\n\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection(): Direction {\n        const direction = this._config.direction;\n\n        if (!direction) {\n            return 'ltr';\n        }\n\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n\n    /** Updates the text direction of the overlay panel. */\n    private _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n\n    /** Updates the size of the overlay element based on the overlay config. */\n    private _updateElementSize() {\n        const style = this._pane.style;\n\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n\n    /** Toggles the pointer events for the overlay pane element. */\n    private _togglePointerEvents(enablePointer: boolean) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    }\n\n    /** Attaches a backdrop for this overlay. */\n    private _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement!.insertBefore(this._backdropElement, this._host); //tslint:disable-line\n\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click',\n            (event: MouseEvent) => this._backdropClick.next(event));\n\n        // Add class to fade-in the backdrop after one frame.\n        if (requestAnimationFrame !== undefined) {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        } else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    private _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode!.appendChild(this._host); //tslint:disable-line\n        }\n    }\n\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop(): void {\n        let backdropToDetach = this._backdropElement; //tslint:disable-line\n\n        if (backdropToDetach) {\n            let finishDetach = () => { //tslint:disable-line\n                // It may not be attached to anything in certain cases (e.g. unit tests).\n                if (backdropToDetach && backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n\n                // It is possible that a new portal has been attached to this overlay since we started\n                // removing the backdrop. If that is the case, only clear the backdrop reference if it\n                // is still the same instance that we started to remove.\n                if (this._backdropElement === backdropToDetach) {\n                    this._backdropElement = null;\n                }\n            };\n\n            backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n\n            backdropToDetach.addEventListener('transitionend', finishDetach);\n\n            // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n            // In this case we make it unclickable and we try to remove it after a delay.\n            backdropToDetach.style.pointerEvents = 'none';\n\n            // Run this outside the Angular zone because there's nothing that Angular cares about.\n            // If it were to run inside the Angular zone, every test that used Overlay would have to be\n            // either async or fakeAsync.\n            this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500)); //tslint:disable-line\n        }\n    }\n\n    /** Toggles a single CSS class or an array of classes on an element. */\n    private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\n        const classList = element.classList;\n\n        coerceArray(cssClasses).forEach((cssClass) => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n        });\n    }\n}\n\n\n/** Size properties for an overlay. */\nexport interface IOverlaySizeConfig {\n    width?: number | string;\n    height?: number | string;\n    minWidth?: number | string;\n    minHeight?: number | string;\n    maxWidth?: number | string;\n    maxHeight?: number | string;\n}\n","import {ElementRef} from '@angular/core';\nimport {Direction} from '@ptsecurity/cdk/bidi';\nimport {Platform} from '@ptsecurity/cdk/platform';\nimport {CdkScrollable, ViewportRuler} from '@ptsecurity/cdk/scrolling';\nimport {Observable} from 'rxjs';\n\nimport {IOverlayReference} from '../overlay-reference';\n\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    IOriginConnectionPosition,\n    IOverlayConnectionPosition,\n} from './connected-position';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {IPositionStrategy} from './position-strategy';\n\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @deletion-target 7.0.0\n */\nexport class ConnectedPositionStrategy implements IPositionStrategy {\n    /**\n     * Reference to the underlying position strategy to which all the API calls are proxied.\n     * @docs-private\n     */\n    _positionStrategy: FlexibleConnectedPositionStrategy;\n\n    /** Ordered list of preferred positions, from most to least desirable. */\n    _preferredPositions: ConnectionPositionPair[] = [];\n\n    /** The overlay to which this strategy is attached. */\n    private _overlayRef: IOverlayReference;\n\n    private _direction: Direction | null;\n\n    /** Whether the we're dealing with an RTL context */\n    get _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n\n    /** Emits an event when the connection point changes. */\n    get onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n        return this._positionStrategy.positionChanges;\n    }\n\n    constructor(\n        originPos: IOriginConnectionPosition,\n        overlayPos: IOverlayConnectionPosition,\n        connectedTo: ElementRef,\n        viewportRuler: ViewportRuler,\n        document: Document,\n        // @deletion-target 7.0.0 `platform` parameter to be made required.\n        platform?: Platform) {\n\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy =\n            new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform)\n                .withFlexibleDimensions(false)\n                .withPush(false)\n                .withViewportMargin(0);\n\n        this.withFallbackPosition(originPos, overlayPos);\n    }\n\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions(): ConnectionPositionPair[] {\n        return this._preferredPositions;\n    }\n\n    /** Attach this position strategy to an overlay. */\n    attach(overlayRef: IOverlayReference): void {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n\n    /** Disposes all resources used by the position strategy. */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n\n    /** @docs-private */\n    detach() {\n        this._positionStrategy.detach();\n    }\n\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * @docs-private\n     */\n    apply(): void {\n        this._positionStrategy.apply();\n    }\n\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    recalculateLastPosition(): void {\n        this._positionStrategy.reapplyLastPosition();\n    }\n\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables: CdkScrollable[]) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n\n    /**\n     * Adds a new preferred fallback position.\n     * @param originPos\n     * @param overlayPos\n     */\n    withFallbackPosition(\n        originPos: IOriginConnectionPosition,\n        overlayPos: IOverlayConnectionPosition,\n        offsetX?: number,\n        offsetY?: number): this {\n\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n\n        return this;\n    }\n\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param dir New layout direction.\n     */\n    withDirection(dir: 'ltr' | 'rtl'): this {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        } else {\n            this._direction = dir;\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param offset New offset in the X axis.\n     */\n    withOffsetX(offset: number): this {\n        this._positionStrategy.withDefaultOffsetX(offset);\n\n        return this;\n    }\n\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param  offset New offset in the Y axis.\n     */\n    withOffsetY(offset: number): this {\n        this._positionStrategy.withDefaultOffsetY(offset);\n\n        return this;\n    }\n\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked: boolean): this {\n        this._positionStrategy.withLockedPosition(isLocked);\n\n        return this;\n    }\n\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param positions Position pairs to be set on the strategy.\n     */\n    withPositions(positions: ConnectionPositionPair[]): this {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n\n        return this;\n    }\n\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    setOrigin(origin: ElementRef): this {\n        this._positionStrategy.setOrigin(origin);\n\n        return this;\n    }\n}\n","import {IOverlayReference} from '../overlay-reference';\n\nimport {IPositionStrategy} from './position-strategy';\n\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements IPositionStrategy {\n    /** The overlay to which this strategy is attached. */\n    private _overlayRef: IOverlayReference;\n    private _cssPosition: string = 'static';\n    private _topOffset: string = '';\n    private _bottomOffset: string = '';\n    private _leftOffset: string = '';\n    private _rightOffset: string = '';\n    private _alignItems: string = '';\n    private _justifyContent: string = '';\n    private _width: string = '';\n    private _height: string = '';\n\n    attach(overlayRef: IOverlayReference): void {\n        const config = overlayRef.getConfig();\n\n        this._overlayRef = overlayRef;\n\n        if (this._width && !config.width) {\n            overlayRef.updateSize({width: this._width});\n        }\n\n        if (this._height && !config.height) {\n            overlayRef.updateSize({height: this._height});\n        }\n\n        overlayRef.hostElement.classList.add('cdk-global-overlay-wrapper');\n    }\n\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value: string = ''): this {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n\n        return this;\n    }\n\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value: string = ''): this {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n\n        return this;\n    }\n\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value: string = ''): this {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n\n        return this;\n    }\n\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value: string = ''): this {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n\n        return this;\n    }\n\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @deletion-target 7.0.0\n     */\n    width(value: string = ''): this {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({width: value});\n        } else {\n            this._width = value;\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @deletion-target 7.0.0\n     */\n    height(value: string = ''): this {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({height: value});\n        } else {\n            this._height = value;\n        }\n\n        return this;\n    }\n\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset: string = ''): this {\n        this.left(offset);\n        this._justifyContent = 'center';\n\n        return this;\n    }\n\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset: string = ''): this {\n        this.top(offset);\n        this._alignItems = 'center';\n\n        return this;\n    }\n\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply(): void {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef.hasAttached()) {\n            return;\n        }\n\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n\n        styles.position = this._cssPosition;\n        styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n        styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n\n        if (config.width === '100%') {\n            parentStyles.justifyContent = 'flex-start';\n        } else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            } else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        } else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n\n        parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n    }\n\n    /**\n     * Noop implemented as a part of the IPositionStrategy interface.\n     * @docs-private\n     */\n    dispose(): void { } //tslint:disable-line\n}\n","import {DOCUMENT} from '@angular/common';\nimport {ElementRef, Inject, Injectable, Optional} from '@angular/core';\nimport {Platform} from '@ptsecurity/cdk/platform';\nimport {ViewportRuler} from '@ptsecurity/cdk/scrolling';\n\nimport {IOriginConnectionPosition, IOverlayConnectionPosition} from './connected-position';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {GlobalPositionStrategy} from './global-position-strategy';\n\n\n/** Builder for overlay position strategy. */\n@Injectable({providedIn: 'root'})\nexport class OverlayPositionBuilder {\n    constructor(\n        private _viewportRuler: ViewportRuler,\n        @Inject(DOCUMENT) private _document: any,\n        // @deletion-target 7.0.0 `_platform` parameter to be made required.\n        @Optional() private _platform?: Platform) { }\n\n    /**\n     * Creates a global position strategy.\n     */\n    global(): GlobalPositionStrategy {\n        return new GlobalPositionStrategy();\n    }\n\n    /**\n     * Creates a relative position strategy.\n     * @param elementRef\n     * @param originPos\n     * @param overlayPos\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * @deletion-target 7.0.0\n     */\n    connectedTo(\n        elementRef: ElementRef,\n        originPos: IOriginConnectionPosition,\n        overlayPos: IOverlayConnectionPosition): ConnectedPositionStrategy {\n\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler,\n            this._document);\n    }\n\n    /**\n     * Creates a flexible position strategy.\n     * @param elementRef\n     */\n    flexibleConnectedTo(elementRef: ElementRef | HTMLElement): FlexibleConnectedPositionStrategy {\n        return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document,\n            this._platform);\n    }\n\n}\n"],"names":["type","ScrollStrategyOptions","OverlayContainer","ComponentFactoryResolver","OverlayPositionBuilder","OverlayKeyboardDispatcher","Injector","NgZone","undefined","decorators","Inject","args","DOCUMENT","Directionality","Overlay","defaultPositionList","originX","originY","overlayX","overlayY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","InjectionToken","CdkOverlayOrigin","elementRef","this","Directive","selector","exportAs","ElementRef","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","_scrollStrategy","_dir","viewportMargin","scrollStrategy","open","backdropClick","EventEmitter","positionChange","attach","detach","_hasBackdrop","_lockPosition","_growAfterOpen","_flexibleDimensions","_push","_backdropSubscription","Subscription","EMPTY","_templatePortal","TemplatePortal","Object","defineProperty","prototype","_offsetX","offsetX","_position","_setPositions","_offsetY","offsetY","value","coerceBooleanProperty","_overlayRef","ngOnDestroy","_destroyOverlay","ngOnChanges","changes","withPositions","positions","withLockedPosition","lockPosition","setOrigin","origin","apply","_attachOverlay","_detachOverlay","_createOverlay","length","create","_buildConfig","positionStrategy","_createPositionStrategy","overlayConfig","OverlayConfig","direction","hasBackdrop","width","height","minWidth","minHeight","backdropClass","strategy","position","flexibleConnectedTo","withFlexibleDimensions","flexibleDiemsions","withPush","push","withGrowAfterOpen","growAfterOpen","withViewportMargin","positionChanges","subscribe","_this","emit","map","pos","updateSize","keydownEvents","event","keyCode","ESCAPE","hasAttached","unsubscribe","dispose","TemplateRef","ViewContainerRef","Optional","Input","Output","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","OverlayModule","NgModule","imports","BidiModule","PortalModule","ScrollDispatchModule","exports","declarations","providers","OVERLAY_PROVIDERS","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER","VIEWPORT_RULER_PROVIDER","OVERLAY_CONTAINER_PROVIDER","FullscreenOverlayContainer","_document","_super","call","tslib_1.__extends","_fullScreenEventName","_fullScreenListener","removeEventListener","getFullscreenElement","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","_createContainer","_adjustParentForFullscreenChange","_addFullscreenChangeListener","_containerElement","body","appendChild","fn","eventName","_getEventName","addEventListener","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","Injectable","__extends","d","b","__","constructor","extendStatics","validateVerticalPosition","property","Error","validateHorizontalPosition","getMatScrollStrategyAlreadyAttachedError","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","top","outsideBelow","outsideLeft","right","left","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY","dispatcher","OVERLAY_CONTAINER_PROVIDER_FACTORY","parentContainer","extendStyles","dest","source","key","hasOwnProperty","overlay","scrollStrategies","reposition","setPrototypeOf","__proto__","Array","p","__assign","assign","t","s","i","n","arguments","NoopScrollStrategy","enable","disable","config","panelClass","keys","filter","forEach","ConnectionPositionPair","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","BlockScrollStrategy","_viewportRuler","document","_previousHTMLStyles","_isEnabled","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","coerceCssPixelValue","classList","add","html","previousHtmlScrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","scrollWidth","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","Math","abs","updatePosition","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","_a","noop","close","block","providedIn","ScrollDispatcher","ViewportRuler","_attachedOverlays","_keydownListener","_keydownEvents","next","_isAttached","index","indexOf","splice","SkipSelf","parentNode","removeChild","getContainerElement","container","createElement","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","Subject","_backdropElement","_backdropClick","_attachments","_detachments","portal","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","asObservable","pipe","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","isAttached","complete","attachments","detachments","getConfig","sizeConfig","tslib_1.__assign","setDirection","dir","getDirection","setAttribute","maxWidth","maxHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","finishDetach_1","setTimeout","cssClasses","isAdd","coerceArray","cssClass","FlexibleConnectedPositionStrategy","connectedTo","_platform","_preferredPositions","Observable","observer","subscription","_positionChanges","_positionChangeSubscriptions","_isInitialRender","_lastBoundingBoxSize","_isPushed","_canPush","_hasFlexibleDimensions","_positionLocked","_viewportMargin","scrollables","_resizeSubscription","_validatePositions","hostElement","_boundingBox","change","_isDisposed","isBrowser","_lastPosition","reapplyLastPosition","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_origin","_overlayRect","fallback","originRect","viewportRect","flexibleFits","_i","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","_b","flexibleFits_1","fit_1","score","weight","lastPosition","withScrollableContainers","margin","flexibleDimensions","canPush","isLocked","nativeElement","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","fit","availableHeight","availableWidth","verticalFit","horizontalFit","_pushOverlayOnScreen","start","pushX","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_getScrollVisibility","changeEvent","xOrigin","elements","querySelectorAll","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","styles","_hasExactPosition","alignItems","justifyContent","_getExactOverlayY","_getExactOverlayX","transformString","transform","trim","documentHeight","clientHeight","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","_positionStrategy","withFallbackPosition","_direction","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","slice","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","marginLeft","marginTop","marginBottom","marginRight","global","Platform","nextUniqueId","_overlayContainer","_componentFactoryResolver","_positionBuilder","_injector","_directionality","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","id","_appRef","get","ApplicationRef","DomPortalOutlet"],"mappings":"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"}