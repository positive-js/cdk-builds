{"version":3,"file":"cdk-portal.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../packages/cdk/portal/portal-errors.ts","../../packages/cdk/portal/portal.ts","../../packages/cdk/portal/dom-portal-outlet.ts","../../packages/cdk/portal/portal-directives.ts","../../packages/cdk/portal/portal-injector.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nexport function throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nexport function throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nexport function throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nexport function throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nexport function throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nexport function throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n","\nimport {\n    TemplateRef,\n    ViewContainerRef,\n    ElementRef,\n    ComponentRef,\n    EmbeddedViewRef,\n    Injector, ComponentFactoryResolver\n} from '@angular/core';\n\nimport {\n    throwNullPortalOutletError,\n    throwPortalAlreadyAttachedError,\n    throwNoPortalAttachedError,\n    throwNullPortalError,\n    throwPortalOutletAlreadyDisposedError,\n    throwUnknownPortalTypeError\n} from './portal-errors';\n\n\n/** Interface that can be used to generically type a class. */\nexport interface IComponentType<T> {\n  new (...args: any[]): T;\n}\n\n/** A `PortalOutlet` is an space that can contain a single `Portal`. */\nexport interface IPortalOutlet {\n    /** Attaches a portal to this outlet. */\n    attach(portal: Portal<any>): any;\n\n    /** Detaches the currently attached portal from this outlet. */\n    detach(): any;\n\n    /** Performs cleanup before the outlet is destroyed. */\n    dispose(): void;\n\n    /** Whether there is currently a portal attached to this outlet. */\n    hasAttached(): boolean;\n}\n\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nexport abstract class Portal<T> {\n    private _attachedHost: IPortalOutlet | null;\n\n    /** Attach this portal to a host. */\n    attach(host: IPortalOutlet): T {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n\n        this._attachedHost = host;\n\n        return <T> host.attach(this);\n    }\n\n    /** Detach this portal from its host */\n    detach(): void {\n        let host = this._attachedHost; //tslint:disable-line\n\n        if (host == null) {\n            throwNoPortalAttachedError();\n        } else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    }\n\n    /** Whether this portal is attached to a host. */\n    get isAttached(): boolean {\n        return this._attachedHost != null;\n    }\n\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host: IPortalOutlet | null) {\n        this._attachedHost = host;\n    }\n}\n\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n    /** The type of the component that will be instantiated for attachment. */\n    component: IComponentType<T>;\n\n    /**\n     * [Optional] Where the attached component should live in Angular's *logical* component tree.\n     * This is different from where the component *renders*, which is determined by the PortalOutlet.\n     * The origin is necessary when the host is outside of the Angular application context.\n     */\n    viewContainerRef?: ViewContainerRef | null;\n\n    /** [Optional] Injector used for the instantiation of the component. */\n    injector?: Injector | null;\n\n    /**\n     * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n     * Defaults to using the resolver from the outlet that the portal is attached to.\n     */\n    componentFactoryResolver?: ComponentFactoryResolver | null;\n\n    constructor(\n        component: IComponentType<T>,\n        viewContainerRef?: ViewContainerRef | null,\n        injector?: Injector | null,\n        componentFactoryResolver?: ComponentFactoryResolver | null) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal<C = any> extends Portal<C> {\n    /** The embedded template that will be used to instantiate an embedded View in the host. */\n    templateRef: TemplateRef<C>;\n\n    /** Reference to the ViewContainer into which the template will be stamped out. */\n    viewContainerRef: ViewContainerRef;\n\n    /** Contextual data to be passed in to the embedded view. */\n    context: C | undefined;\n\n    constructor(template: TemplateRef<C>, viewContainerRef: ViewContainerRef, context?: C) {\n        super();\n        this.templateRef = template;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n    }\n\n    get origin(): ElementRef {\n        return this.templateRef.elementRef;\n    }\n\n    /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    attach(host: IPortalOutlet, context: C | undefined = this.context): C {\n        this.context = context;\n\n        return super.attach(host);\n    }\n\n    detach(): void {\n        this.context = undefined;\n\n        return super.detach(); //tslint:disable-line\n    }\n}\n\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nexport abstract class BasePortalOutlet implements IPortalOutlet {\n    /** The portal currently attached to the host. */\n    protected _attachedPortal: Portal<any> | null;\n\n    /** A function that will permanently dispose this host. */\n    private _disposeFn: (() => void) | null;\n\n    /** Whether this host has already been permanently disposed. */\n    private _isDisposed: boolean = false;\n\n    /** Whether this host has an attached portal. */\n    hasAttached(): boolean {\n        return !!this._attachedPortal;\n    }\n\n    attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n\n    attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n\n    attach(portal: any): any;\n\n    /** Attaches a portal. */\n    attach(portal: Portal<any>): any {\n        if (!portal) {\n            throwNullPortalError();\n        }\n\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n\n            return this.attachComponentPortal(portal);\n        } else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n\n            return this.attachTemplatePortal(portal);\n        }\n\n        throwUnknownPortalTypeError();\n    }\n\n    abstract attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n\n    abstract attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n\n    /** Detaches a previously attached portal. */\n    detach(): void {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n\n        this._invokeDisposeFn();\n    }\n\n    /** Permanently dispose of this portal host. */\n    dispose(): void {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n\n    /** @docs-private */\n    setDisposeFn(fn: () => void) {\n        this._disposeFn = fn;\n    }\n\n    private _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n","import {\n    ComponentFactoryResolver,\n    ComponentRef,\n    EmbeddedViewRef,\n    ApplicationRef,\n    Injector\n} from '@angular/core';\n\nimport { BasePortalOutlet, ComponentPortal, TemplatePortal } from './portal';\n\n\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nexport class DomPortalOutlet extends BasePortalOutlet {\n    constructor(\n        /** Element into which the content is projected. */\n        public outletElement: Element,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _defaultInjector: Injector) {\n        super();\n    }\n\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        let componentRef: ComponentRef<T>;\n\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(\n                componentFactory,\n                portal.viewContainerRef.length,\n                portal.injector || portal.viewContainerRef.injector);\n\n            this.setDisposeFn(() => componentRef.destroy());\n        } else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this.getComponentRootNode(componentRef));\n\n        return componentRef;\n    }\n\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n        let viewContainer = portal.viewContainerRef; //tslint:disable-line\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context); //tslint:disable-line\n        viewRef.detectChanges();\n\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach((rootNode) => this.outletElement.appendChild(rootNode));\n\n        this.setDisposeFn((() => {\n            let index = viewContainer.indexOf(viewRef); //tslint:disable-line\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        }));\n\n        return viewRef;\n    }\n\n    /**\n     * Clears out a portal from the DOM.\n     */\n    dispose(): void {\n        super.dispose();\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    }\n\n    /** Gets the root HTMLElement for an instantiated component. */\n    private getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n        return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n    }\n}\n","\nimport {\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    EmbeddedViewRef,\n    EventEmitter,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output,\n    TemplateRef,\n    ViewContainerRef\n} from '@angular/core';\n\nimport { BasePortalOutlet, ComponentPortal, Portal, TemplatePortal } from './portal';\n\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\n@Directive({\n    selector: '[cdk-portal], [cdkPortal], [portal]',\n    exportAs: 'cdkPortal'\n})\nexport class CdkPortal extends TemplatePortal {\n    constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\n\n/**\n * Possible attached references to the CdkPortalOutlet.\n */\nexport type CdkPortalOutletAttachedRef = ComponentRef<any> | EmbeddedViewRef<any> | null;\n\n\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\n@Directive({\n    selector: '[cdkPortalOutlet], [cdkPortalHost], [portalHost]',\n    exportAs: 'cdkPortalOutlet, cdkPortalHost',\n    inputs: ['portal: cdkPortalOutlet']\n})\nexport class CdkPortalOutlet extends BasePortalOutlet implements OnInit, OnDestroy {\n\n    @Output() attached: EventEmitter<CdkPortalOutletAttachedRef> =\n        new EventEmitter<CdkPortalOutletAttachedRef>();\n\n    /** Whether the portal component is initialized. */\n    private _isInitialized = false;\n\n    /** Reference to the currently-attached component/view ref. */\n    private _attachedRef: CdkPortalOutletAttachedRef;\n\n    constructor(\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _viewContainerRef: ViewContainerRef) {\n        super();\n    }\n\n    /** Portal associated with the Portal outlet. */\n    get portal(): Portal<any> | null {\n        return this._attachedPortal;\n    }\n\n    set portal(portal: Portal<any> | null) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n\n        if (this.hasAttached()) {\n            super.detach();\n        }\n\n        if (portal) {\n            super.attach(portal);\n        }\n\n        this._attachedPortal = portal;\n    }\n\n    /** Component or view reference that is attached to the portal. */\n    get attachedRef(): CdkPortalOutletAttachedRef {\n        return this._attachedRef;\n    }\n\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n        portal.setAttachedHost(this);\n\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        const viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        const ref = viewContainerRef.createComponent(\n            componentFactory, viewContainerRef.length,\n            portal.injector || viewContainerRef.injector);\n\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n\n        return ref;\n    }\n\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n        portal.setAttachedHost(this);\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n\n        return viewRef;\n    }\n}\n\n\n@NgModule({\n    exports: [CdkPortal, CdkPortalOutlet],\n    declarations: [CdkPortal, CdkPortalOutlet]\n})\nexport class PortalModule {}\n","import { Injector } from '@angular/core';\n\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n */\nexport class PortalInjector implements Injector {\n    constructor(\n        private _parentInjector: Injector,\n        private _customTokens: WeakMap<any, any>) {\n    }\n\n    get(token: any, notFoundValue?: any): any { // tslint:disable-line\n        const value = this._customTokens.get(token);\n\n        if (value !== undefined) {\n            return value;\n        }\n\n        return this._parentInjector.get<any>(token, notFoundValue);\n    }\n}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","throwNullPortalError","Error","throwPortalAlreadyAttachedError","throwPortalOutletAlreadyDisposedError","throwUnknownPortalTypeError","throwNullPortalOutletError","throwNoPortalAttachedError","setPrototypeOf","__proto__","Array","p","hasOwnProperty","Portal","attach","host","hasAttached","_attachedHost","detach","defineProperty","setAttachedHost","ComponentPortal","component","viewContainerRef","injector","componentFactoryResolver","_this","_super","call","tslib_1.__extends","TemplatePortal","template","context","templateRef","elementRef","undefined","BasePortalOutlet","_isDisposed","_attachedPortal","portal","attachComponentPortal","attachTemplatePortal","_invokeDisposeFn","dispose","setDisposeFn","fn","_disposeFn","DomPortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","componentRef","resolver","componentFactory","resolveComponentFactory","createComponent","length","destroy","attachView","hostView","detachView","appendChild","getComponentRootNode","viewContainer","viewRef","createEmbeddedView","detectChanges","rootNodes","forEach","rootNode","index","indexOf","remove","parentNode","removeChild","CdkPortal","type","Directive","args","selector","exportAs","TemplateRef","ViewContainerRef","CdkPortalOutlet","_viewContainerRef","attached","EventEmitter","_isInitialized","_attachedRef","ngOnInit","ngOnDestroy","ref","emit","clear","inputs","ComponentFactoryResolver","Output","PortalModule","NgModule","exports","declarations","PortalInjector","_parentInjector","_customTokens","get","token","notFoundValue","value"],"mappings":";;;;;;mTAuBA,SAAgBA,GAAUC,EAAGC,GAEzB,QAASC,KAAOC,KAAKC,YAAcJ,EADnCK,EAAcL,EAAGC,GAEjBD,EAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,ICtBnF,QAAgBO,KACZ,KAAMC,OAAM,mCAOhB,QAAgBC,KACZ,KAAMD,OAAM,sCAOhB,QAAgBE,KACZ,KAAMF,OAAM,+CAOhB,QAAgBG,KACZ,KAAMH,OAAM,uHAQhB,QAAgBI,KACZ,KAAMJ,OAAM,wDAOhB,QAAgBK,KACZ,KAAML,OAAM,gED9BhB,GAAIL,GAAgB,SAASL,EAAGC,GAI5B,OAHAI,EAAgBE,OAAOS,iBAChBC,uBAA2BC,QAAS,SAAUlB,EAAGC,GAAKD,EAAEiB,UAAYhB,IACvE,SAAUD,EAAGC,GAAK,IAAK,GAAIkB,KAAKlB,GAAOA,EAAEmB,eAAeD,KAAInB,EAAEmB,GAAKlB,EAAEkB,MACpDnB,EAAGC,iBEwB5B,QAAAoB,MA0CA,MAtCIA,GAAJf,UAAAgB,OAAI,SAAOC,GAWH,MAVY,OAARA,GACAT,IAGAS,EAAKC,eACLb,IAGJR,KAAKsB,cAAgBF,EAEVA,EAAKD,OAAOnB,OAI3BkB,EAAJf,UAAAoB,OAAI,WACJ,GAAYH,GAAOpB,KAAKsB,aAEJ,OAARF,EACAR,KAEAZ,KAAKsB,cAAgB,KACrBF,EAAKG,WAKbnB,OAAJoB,eAAQN,EAARf,UAAA,kBAAI,WACI,MAA6B,OAAtBH,KAAKsB,+CAOhBJ,EAAJf,UAAAsB,gBAAI,SAAgBL,GACZpB,KAAKsB,cAAgBF,GAE7BF,mBA0BI,QAAJQ,GACQC,EACAC,EACAC,EACAC,GAJJ,GAAJC,GAKQC,EALRC,KAAAjC,OAAAA,WAMQ+B,GAAKJ,UAAYA,EACjBI,EAAKH,iBAAmBA,EACxBG,EAAKF,SAAWA,EAChBE,EAAKD,yBAA2BA,IAExC,MA/BwCI,GAAxCR,EAAAM,GA+BAN,GA/BwCR,iBA8CpC,QAAJiB,GAAgBC,EAA0BR,EAAoCS,GAA1E,GAAJN,GACQC,EADRC,KAAAjC,OAAAA,WAEQ+B,GAAKO,YAAcF,EACnBL,EAAKH,iBAAmBA,EACxBG,EAAKM,QAAUA,IAuBvB,MArC6CH,GAA7CC,EAAAH,GAiBI5B,OAAJoB,eAAQW,EAARhC,UAAA,cAAI,WACI,MAAOH,MAAKsC,YAAYC,4CAQ5BJ,EAAJhC,UAAAgB,OAAI,SAAOC,EAAqBiB,GAGxB,WAHR,KAAAA,IAAgCA,EAAyBrC,KAAKqC,SACtDrC,KAAKqC,QAAUA,EAERL,EAAf7B,UAAqBgB,OAArBc,KAAAjC,KAA4BoB,IAGxBe,EAAJhC,UAAAoB,OAAI,WAGI,MAFAvB,MAAKqC,YAAUG,GAERR,EAAf7B,UAAqBoB,OAArBU,KAAAjC,OAEAmC,GArC6CjB,gBA2C7C,QAAAuB,KAQYzC,KAAZ0C,aAAmC,EA2EnC,MAxEID,GAAJtC,UAAAkB,YAAI,WACI,QAASrB,KAAK2C,iBAUlBF,EAAJtC,UAAAgB,OAAI,SAAOyB,GAaH,MAZKA,IACDtC,IAGAN,KAAKqB,eACLb,IAGAR,KAAK0C,aACLjC,IAGAmC,YAAkBlB,IAClB1B,KAAK2C,gBAAkBC,EAEhB5C,KAAK6C,sBAAsBD,IAC3BA,YAAkBT,IACzBnC,KAAK2C,gBAAkBC,EAEhB5C,KAAK8C,qBAAqBF,QAGrClC,MAQJ+B,EAAJtC,UAAAoB,OAAI,WACQvB,KAAK2C,kBACL3C,KAAK2C,gBAAgBlB,gBAAgB,MACrCzB,KAAK2C,gBAAkB,MAG3B3C,KAAK+C,oBAITN,EAAJtC,UAAA6C,QAAI,WACQhD,KAAKqB,eACLrB,KAAKuB,SAGTvB,KAAK+C,mBACL/C,KAAK0C,aAAc,GAIvBD,EAAJtC,UAAA8C,aAAI,SAAaC,GACTlD,KAAKmD,WAAaD,GAGdT,EAAZtC,UAAA4C,iBAAI,WACQ/C,KAAKmD,aACLnD,KAAKmD,aACLnD,KAAKmD,WAAa,OAG9BV,mBC9OI,QAAJW,GAEeC,EACCC,EACAC,EACAC,GALZ,GAAJzB,GAMQC,EANRC,KAAAjC,OAAAA,WAEe+B,GAAfsB,cAAeA,EACCtB,EAAhBuB,0BAAgBA,EACAvB,EAAhBwB,QAAgBA,EACAxB,EAAhByB,iBAAgBA,IAgFhB,MAtFqCtB,GAArCkB,EAAApB,GAeIoB,EAAJjD,UAAA0C,sBAAI,SAAyBD,GAAzB,GAGQa,GAHZ1B,EAAA/B,KACc0D,EAAWd,EAAOd,0BAA4B9B,KAAKsD,0BACnDK,EAAmBD,EAASE,wBAAwBhB,EAAOjB,UA0BjE,OAnBIiB,GAAOhB,kBACP6B,EAAeb,EAAOhB,iBAAiBiC,gBACnCF,EACAf,EAAOhB,iBAAiBkC,OACxBlB,EAAOf,UAAYe,EAAOhB,iBAAiBC,UAE/C7B,KAAKiD,aAAY,WAAO,MAAAQ,GAAaM,cAErCN,EAAeE,EAAiBtD,OAAOuC,EAAOf,UAAY7B,KAAKwD,kBAC/DxD,KAAKuD,QAAQS,WAAWP,EAAaQ,UACrCjE,KAAKiD,aAAY,WACblB,EAAKwB,QAAQW,WAAWT,EAAaQ,UACrCR,EAAaM,aAKrB/D,KAAKqD,cAAcc,YAAYnE,KAAKoE,qBAAqBX,IAElDA,GAQXL,EAAJjD,UAAA2C,qBAAI,SAAwBF,GAAxB,GAAJb,GAAA/B,KACYqE,EAAgBzB,EAAOhB,iBACvB0C,EAAUD,EAAcE,mBAAmB3B,EAAON,YAAaM,EAAOP,QAgB1E,OAfAiC,GAAQE,gBAMRF,EAAQG,UAAUC,QAAO,SAAEC,GAAa,MAAA5C,GAAKsB,cAAcc,YAAYQ,KAEvE3E,KAAKiD,aAAY,WACzB,GAAgB2B,GAAQP,EAAcQ,QAAQP,IACnB,IAAXM,GACAP,EAAcS,OAAOF,KAItBN,GAMXlB,EAAJjD,UAAA6C,QAAI,WACIhB,EAAR7B,UAAc6C,QAAdf,KAAAjC,MAC6C,MAAjCA,KAAKqD,cAAc0B,YACnB/E,KAAKqD,cAAc0B,WAAWC,YAAYhF,KAAKqD,gBAK/CD,EAAZjD,UAAAiE,qBAAI,SAA6BX,GACzB,MAAQA,GAAqB,SAA0BgB,UAAU,IAEzErB,GAtFqCX,GCOrCwC,EAAA,SAAAjD,GAKI,QAAJiD,GAAgB3C,EAA+BV,GAC/C,MAAQI,GAARC,KAAAjC,KAAcsC,EAAaV,IAA3B5B,KAEA,MAJ+BkC,GAA/B+C,EAAAjD,kBAJAkD,KAACC,EAAAA,UAADC,OACIC,SAAU,sCACVC,SAAU,oDAbdJ,KAAIK,EAAAA,cACJL,KAAIM,EAAAA,oBAkBJP,GAJ+B9C,GAmB/BsD,EAAA,SAAAzD,GAgBI,QAAJyD,GACgBnC,EACAoC,GAFZ,GAAJ3D,GAGQC,EAHRC,KAAAjC,OAAAA,WACgB+B,GAAhBuB,0BAAgBA,EACAvB,EAAhB2D,kBAAgBA,EAXF3D,EAAd4D,SACQ,GAAIC,GAAAA,aAGA7D,EAAZ8D,gBAA6B,IAiG7B,MAvGqC3D,GAArCuD,EAAAzD,GAkBI5B,OAAJoB,eAAQiE,EAARtF,UAAA,cAAI,WACI,MAAOH,MAAK2C,qBAGhB,SAAWC,KAKH5C,KAAKqB,eAAkBuB,GAAW5C,KAAK6F,kBAIvC7F,KAAKqB,eACLW,EAAZ7B,UAAkBoB,OAAlBU,KAAAjC,MAGY4C,GACAZ,EAAZ7B,UAAkBgB,OAAlBc,KAAAjC,KAAyB4C,GAGjB5C,KAAK2C,gBAAkBC,oCAI3BxC,OAAJoB,eAAQiE,EAARtF,UAAA,mBAAI,WACI,MAAOH,MAAK8F,8CAGhBL,EAAJtF,UAAA4F,SAAI,WACI/F,KAAK6F,gBAAiB,GAG1BJ,EAAJtF,UAAA6F,YAAI,WACIhE,EAAR7B,UAAc6C,QAAdf,KAAAjC,MACQA,KAAK2C,gBAAkB,KACvB3C,KAAK8F,aAAe,MASxBL,EAAJtF,UAAA0C,sBAAI,SAAyBD,GACrBA,EAAOnB,gBAAgBzB,KAI/B,IAAc4B,GAA8C,MAA3BgB,EAAOhB,iBAC5BgB,EAAOhB,iBACP5B,KAAK0F,kBAEHhC,EAAWd,EAAOd,0BAA4B9B,KAAKsD,0BAEnDK,EAAmBD,EAASE,wBAAwBhB,EAAOjB,WAC3DsE,EAAMrE,EAAiBiC,gBACzBF,EAAkB/B,EAAiBkC,OACnClB,EAAOf,UAAYD,EAAiBC,SAOxC,OALAG,GAAR7B,UAAc8C,aAAdhB,KAAAjC,KAAA,WAAiC,MAAAiG,GAAIlC,YAC7B/D,KAAK2C,gBAAkBC,EACvB5C,KAAK8F,aAAeG,EACpBjG,KAAK2F,SAASO,KAAKD,GAEZA,GAQXR,EAAJtF,UAAA2C,qBAAI,SAAwBF,GAAxB,GAAJb,GAAA/B,IACQ4C,GAAOnB,gBAAgBzB,KAC/B,IAAcsE,GAAUtE,KAAK0F,kBAAkBnB,mBAAmB3B,EAAON,YAAaM,EAAOP,QAOrF,OANAL,GAAR7B,UAAc8C,aAAdhB,KAAAjC,KAAA,WAAiC,MAAA+B,GAAK2D,kBAAkBS,UAEhDnG,KAAK2C,gBAAkBC,EACvB5C,KAAK8F,aAAexB,EACpBtE,KAAK2F,SAASO,KAAK5B,GAEZA,kBA1GfY,KAACC,EAAAA,UAADC,OACIC,SAAU,mDACVC,SAAU,iCACVc,QAAS,mEA9CblB,KAAImB,EAAAA,2BAUJnB,KAAIM,EAAAA,sCAwCJG,WAAAT,KAAKoB,EAAAA,UAqGLb,GAvGqChD,GA0GrC8D,EAAA,WAAA,QAAAA,MAI2B,sBAJ3BrB,KAACsB,EAAAA,SAADpB,OACIqB,SAAUxB,EAAWQ,GACrBiB,cAAezB,EAAWQ,OAE9Bc,kBCvJI,QAAJI,GACgBC,EACAC,GADA7G,KAAhB4G,gBAAgBA,EACA5G,KAAhB6G,cAAgBA,EAYhB,MATIF,GAAJxG,UAAA2G,IAAI,SAAIC,EAAYC,GACpB,GAAcC,GAAQjH,KAAK6G,cAAcC,IAAIC,EAErC,YAAcvE,KAAVyE,EACOA,EAGJjH,KAAK4G,gBAAgBE,IAASC,EAAOC,IAEpDL"}