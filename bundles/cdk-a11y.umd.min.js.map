{"version":3,"file":"cdk-a11y.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../packages/cdk/a11y/focus-monitor/focus-monitor.ts","../../packages/cdk/a11y/aria-describer/aria-reference.ts","../../packages/cdk/a11y/key-manager/list-key-manager.ts","../../packages/cdk/a11y/key-manager/activedescendant-key-manager.ts","../../packages/cdk/a11y/key-manager/focus-key-manager.ts","../../packages/cdk/a11y/aria-describer/aria-describer.ts","../../packages/cdk/a11y/a11y-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Platform, supportsPassiveEventListeners } from '@angular/cdk/platform';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Injectable,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    SkipSelf\n} from '@angular/core';\nimport { Observable, Subject, Subscription, of as observableOf } from 'rxjs';\n\n\n// Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n// tslint:disable-next-line naming-convention\ninterface MonitoredElementInfo {\n    checkChildren: boolean;\n    subject: Subject<FocusOrigin>;\n    unlisten(): void;\n}\n\n\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\n@Injectable({providedIn: 'root'})\nexport class FocusMonitor implements OnDestroy {\n    /** The focus origin that the next focus event is a result of. */\n    private origin: FocusOrigin = null;\n\n    /** The FocusOrigin of the last focus event tracked by the FocusMonitor. */\n    private lastFocusOrigin: FocusOrigin;\n\n    /** Whether the window has just been focused. */\n    private windowFocused = false;\n\n    /** The target of the last touch event. */\n    private lastTouchTarget: EventTarget | null;\n\n    /** The timeout id of the touch timeout, used to cancel timeout later. */\n    private touchTimeoutId: number;\n\n    /** The timeout id of the window focus timeout. */\n    private windowFocusTimeoutId: number;\n\n    /** The timeout id of the origin clearing timeout. */\n    private originTimeoutId: number;\n\n    /** Map of elements being monitored to their info. */\n    private elementInfo = new Map<HTMLElement, MonitoredElementInfo>();\n\n    /** The number of elements currently being monitored. */\n    private monitoredElementCount = 0;\n\n    constructor(private _ngZone: NgZone, private _platform: Platform) {}\n\n    /**\n     * Monitors focus on an element and applies appropriate CSS classes.\n     * @param element The element to monitor\n     * @param checkChildren Whether to count the element as focused when its children are focused.\n     * @returns An observable that emits when the focus state of the element changes.\n     *     When the element is blurred, null will be emitted.\n     */\n    monitor(element: HTMLElement, checkChildren: boolean = false): Observable<FocusOrigin> {\n        if (!this._platform.isBrowser) {\n            return observableOf(null);\n        }\n        // Check if we're already monitoring this element.\n        if (this.elementInfo.has(element)) {\n            const cachedInfo = this.elementInfo.get(element);\n            cachedInfo!.checkChildren = checkChildren;\n\n            return cachedInfo!.subject.asObservable();\n        }\n\n        // Create monitored element info.\n        const info: MonitoredElementInfo = {\n            unlisten: () => {}, // tslint:disable-line no-empty\n            checkChildren,\n            subject: new Subject<FocusOrigin>()\n        };\n        this.elementInfo.set(element, info);\n        this.incrementMonitoredElementCount();\n\n        // Start listening. We need to listen in capture phase since focus events don't bubble.\n        const focusListener = (event: FocusEvent) => this.onFocus(event, element);\n        const blurListener = (event: FocusEvent) => this._onBlur(event, element);\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('focus', focusListener, true);\n            element.addEventListener('blur', blurListener, true);\n        });\n\n        // Create an unlisten function for later.\n        info.unlisten = () => {\n            element.removeEventListener('focus', focusListener, true);\n            element.removeEventListener('blur', blurListener, true);\n        };\n\n        return info.subject.asObservable();\n    }\n\n    /**\n     * Stops monitoring an element and removes all focus classes.\n     * @param element The element to stop monitoring.\n     */\n    stopMonitoring(element: HTMLElement): void {\n        const elementInfo = this.elementInfo.get(element);\n\n        if (elementInfo) {\n            elementInfo.unlisten();\n            elementInfo.subject.complete();\n\n            this.setClasses(element);\n            this.elementInfo.delete(element);\n            this.decrementMonitoredElementCount();\n        }\n    }\n\n    /**\n     * Focuses the element via the specified focus origin.\n     * @param element The element to focus.\n     * @param origin The focus origin.\n     */\n    focusVia(element: HTMLElement, origin: FocusOrigin): void {\n        this.setOriginForCurrentEventQueue(origin);\n\n        // `focus` isn't available on the server\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    ngOnDestroy() {\n        this.elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n    }\n\n    /**\n     * Handles blur events on a registered element.\n     * @param event The blur event.\n     * @param element The monitored element.\n     */\n    // tslint:disable-next-line:naming-convention\n    _onBlur(event: FocusEvent, element: HTMLElement) {\n        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n        // order to focus another child of the monitored element.\n        const elementInfo = this.elementInfo.get(element);\n\n        if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n                element.contains(event.relatedTarget))) {\n            return;\n        }\n\n        this.setClasses(element);\n        elementInfo.subject.next(null);\n    }\n\n    /** A map of global objects to lists of current listeners. */\n    // tslint:disable-next-line no-empty\n    private unregisterGlobalListeners = () => {};\n\n    /** Register necessary event listeners on the document and window. */\n    private registerGlobalListeners() {\n        // Do nothing if we're not on the browser platform.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n\n        // On keydown record the origin and clear any touch event that may be in progress.\n        const documentKeydownListener = () => {\n            this.lastTouchTarget = null;\n            this.setOriginForCurrentEventQueue('keyboard');\n        };\n\n        // On mousedown record the origin only if there is not touch target, since a mousedown can\n        // happen as a result of a touch event.\n        const documentMousedownListener = () => {\n            if (!this.lastTouchTarget) {\n                this.setOriginForCurrentEventQueue('mouse');\n            }\n        };\n\n        // When the touchstart event fires the focus event is not yet in the event queue. This means\n        // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\n        // see if a focus happens.\n        const documentTouchstartListener = (event: TouchEvent) => {\n            if (this.touchTimeoutId != null) { clearTimeout(this.touchTimeoutId); }\n\n            this.lastTouchTarget = event.target;\n\n            this.touchTimeoutId = window.setTimeout(() => this.lastTouchTarget = null, TOUCH_BUFFER_MS);\n        };\n\n        // Make a note of when the window regains focus, so we can restore the origin info for the\n        // focused element.\n        const windowFocusListener = () => {\n            this.windowFocused = true;\n\n            this.windowFocusTimeoutId = window.setTimeout(() => this.windowFocused = false, 0);\n        };\n\n        // Note: we listen to events in the capture phase so we can detect them even if the user stops\n        // propagation.\n        this._ngZone.runOutsideAngular(() => {\n            document.addEventListener('keydown', documentKeydownListener, true);\n            document.addEventListener('mousedown', documentMousedownListener, true);\n            document.addEventListener('touchstart', documentTouchstartListener,\n                supportsPassiveEventListeners() ? ({ passive: true, capture: true } as any) : true);\n            window.addEventListener('focus', windowFocusListener);\n        });\n\n        this.unregisterGlobalListeners = () => {\n            document.removeEventListener('keydown', documentKeydownListener, true);\n            document.removeEventListener('mousedown', documentMousedownListener, true);\n            document.removeEventListener('touchstart', documentTouchstartListener,\n                supportsPassiveEventListeners() ? ({ passive: true, capture: true } as any) : true);\n            window.removeEventListener('focus', windowFocusListener);\n\n            // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n            clearTimeout(this.windowFocusTimeoutId);\n            clearTimeout(this.touchTimeoutId);\n            clearTimeout(this.originTimeoutId);\n        };\n    }\n\n    private toggleClass(element: Element, className: string, shouldSet: boolean) {\n        if (shouldSet) {\n            element.classList.add(className);\n        } else {\n            element.classList.remove(className);\n        }\n    }\n\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param element The element to update the classes on.\n     * @param origin The focus origin.\n     */\n    private setClasses(element: HTMLElement, origin?: FocusOrigin): void {\n        const elementInfo = this.elementInfo.get(element);\n\n        if (elementInfo) {\n            this.toggleClass(element, 'cdk-focused', !!origin);\n            this.toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n            this.toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n            this.toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n            this.toggleClass(element, 'cdk-program-focused', origin === 'program');\n        }\n    }\n\n    /**\n     * Sets the origin and schedules an async function to clear it at the end of the event queue.\n     * @param origin The origin to set.\n     */\n    private setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n        this._ngZone.runOutsideAngular(() => {\n            this.origin = origin;\n\n            this.originTimeoutId = window.setTimeout(() => this.origin = null);\n        });\n    }\n\n    /**\n     * Checks whether the given focus event was caused by a touchstart event.\n     * @param event The focus event to check.\n     * @returns Whether the event was caused by a touch.\n     */\n    private wasCausedByTouch(event: FocusEvent): boolean {\n        // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n        // Consider the following dom structure:\n        //\n        // <div #parent tabindex=\"0\" cdkFocusClasses>\n        //   <div #child (click)=\"#parent.focus()\"></div>\n        // </div>\n        //\n        // If the user touches the #child element and the #parent is programmatically focused as a\n        // result, this code will still consider it to have been caused by the touch event and will\n        // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n        // relatively small edge-case that can be worked around by using\n        // focusVia(parentEl, 'program') to focus the parent element.\n        //\n        // If we decide that we absolutely must handle this case correctly, we can do so by listening\n        // for the first focus event after the touchstart, and then the first blur event after that\n        // focus event. When that blur event fires we know that whatever follows is not a result of the\n        // touchstart.\n        const focusTarget = event.target;\n\n        return this.lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n            (focusTarget === this.lastTouchTarget || focusTarget.contains(this.lastTouchTarget));\n    }\n\n    /**\n     * Handles focus events on a registered element.\n     * @param event The focus event.\n     * @param element The monitored element.\n     */\n    private onFocus(event: FocusEvent, element: HTMLElement) {\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n        // focus event affecting the monitored element. If we want to use the origin of the first event\n        // instead we should check for the cdk-focused class here and return if the element already has\n        // it. (This only matters for elements that have includesChildren = true).\n\n        // If we are not counting child-element-focus as focused, make sure that the event target is the\n        // monitored element itself.\n        const elementInfo = this.elementInfo.get(element);\n        if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {\n            return;\n        }\n\n        // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n        // 1) The window has just regained focus, in which case we want to restore the focused state of\n        //    the element from before the window blurred.\n        // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n        // 3) The element was programmatically focused, in which case we should mark the origin as\n        //    'program'.\n        let origin = this.origin;\n        if (!origin) {\n            if (this.windowFocused && this.lastFocusOrigin) {\n                origin = this.lastFocusOrigin;\n            } else if (this.wasCausedByTouch(event)) {\n                origin = 'touch';\n            } else {\n                origin = 'program';\n            }\n        }\n\n        this.setClasses(element, origin);\n        this.emitOrigin(elementInfo.subject, origin);\n        this.lastFocusOrigin = origin;\n    }\n\n    private emitOrigin(subject: Subject<FocusOrigin>, origin: FocusOrigin) {\n        this._ngZone.run(() => subject.next(origin));\n    }\n\n    private incrementMonitoredElementCount() {\n        // Register global listeners when first element is monitored.\n        if (++this.monitoredElementCount === 1) {\n            this.registerGlobalListeners();\n        }\n    }\n\n    private decrementMonitoredElementCount() {\n        // Unregister global listeners when last element is unmonitored.\n        if (!--this.monitoredElementCount) {\n            this.unregisterGlobalListeners();\n            this.unregisterGlobalListeners = () => {};  // tslint:disable-line no-empty\n        }\n    }\n}\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n@Directive({\n    selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n})\nexport class CdkMonitorFocus implements OnDestroy {\n\n    @Output() cdkFocusChange = new EventEmitter<FocusOrigin>();\n\n    private monitorSubscription: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        this.monitorSubscription = this._focusMonitor.monitor(\n            this._elementRef.nativeElement,\n            this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n            .subscribe((origin) => this.cdkFocusChange.emit(origin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n        this.monitorSubscription.unsubscribe();\n    }\n}\n\n/** @docs-private @deprecated */\n// tslint:disable-next-line:naming-convention\nexport function FOCUS_MONITOR_PROVIDER_FACTORY(parentDispatcher: FocusMonitor, ngZone: NgZone, platform: Platform) {\n    return parentDispatcher || new FocusMonitor(ngZone, platform);\n}\n\n/** @docs-private */\nexport const FOCUS_MONITOR_PROVIDER = {\n    // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.\n    provide: FocusMonitor,\n    deps: [[new Optional(), new SkipSelf(), FocusMonitor], NgZone, Platform],\n    // tslint:disable-next-line:deprecation\n    useFactory: FOCUS_MONITOR_PROVIDER_FACTORY\n};\n","const ID_DELIMINATOR = ' ';\n\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function addAriaReferencedId(el: Element, attr: string, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n\n  if (ids.some((existingId) => existingId.trim() === id.trim())) { return; }\n  ids.push(id.trim());\n\n  el.setAttribute(attr, ids.join(ID_DELIMINATOR));\n}\n\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function removeAriaReferencedId(el: Element, attr: string, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  const filteredIds = ids.filter((val) => val !== id.trim());\n\n  el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));\n}\n\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function getAriaReferenceIds(el: Element, attr: string): string[] {\n  // Get string array of all individual ids (whitespace deliminated) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n","import { QueryList } from '@angular/core';\nimport {\n    UP_ARROW,\n    DOWN_ARROW,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    TAB,\n    A,\n    Z,\n    ZERO,\n    NINE\n} from '@ptsecurity/cdk/keycodes';\nimport { Subject, Subscription } from 'rxjs';\nimport { debounceTime, filter, map, tap } from 'rxjs/operators';\n\n\n// This interface is for items that can be passed to a ListKeyManager.\n// tslint:disable-next-line naming-convention\nexport interface ListKeyManagerOption {\n    // Whether the option is disabled.\n    disabled?: boolean;\n\n    // Gets the label for this option.\n    getLabel?(): string;\n}\n\n/* tslint:disable:member-ordering */\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n    tabOut: Subject<void> = new Subject<void>();\n\n    /** Stream that emits whenever the active item of the list manager changes. */\n    change = new Subject<number>();\n\n    previousActiveItemIndex = -1;\n\n    // Index of the currently active item.\n    get activeItemIndex(): number {\n        return this._activeItemIndex;\n    }\n\n    private _activeItemIndex = -1;\n\n    // The active item.\n    get activeItem(): T | null {\n        return this._activeItem;\n    }\n\n    private _activeItem: T;\n\n    private wrap: boolean = false;\n    private letterKeyStream = new Subject<string>();\n    private typeaheadSubscription = Subscription.EMPTY;\n    private vertical = true;\n    private horizontal: 'ltr' | 'rtl' | null;\n\n    private scrollSize: number = 0;\n\n    // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n    private pressedLetters: string[] = [];\n\n    constructor(private _items: QueryList<T>) {\n        if (_items instanceof QueryList) {\n\n            _items.changes.subscribe((newItems: QueryList<T>) => {\n\n                if (this._activeItem) {\n                    const itemArray = newItems.toArray();\n                    const newIndex = itemArray.indexOf(this._activeItem);\n\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n\n    withScrollSize(scrollSize: number): this {\n        this.scrollSize = scrollSize;\n\n        return this;\n    }\n\n    /**\n     * Turns on wrapping mode, which ensures that the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     */\n\n    withWrap(): this {\n        this.wrap = true;\n\n        return this;\n    }\n\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled: boolean = true): this {\n        this.vertical = enabled;\n\n        return this;\n    }\n\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n        this.horizontal = direction;\n\n        return this;\n    }\n\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param searchLetterIndex letter index for incremental search, if is -1 search is disabled\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval: number = 200, searchLetterIndex: number = 0): this {\n        if (this._items.length && this._items.some((item) => typeof item.getLabel !== 'function')) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n\n        this.typeaheadSubscription.unsubscribe();\n\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters and convert those\n        // letters back into a string. Afterwards find the first item that starts with that string and select it.\n        this.typeaheadSubscription = this.letterKeyStream.pipe(\n            tap((keyCode) => this.pressedLetters.push(keyCode)),\n            debounceTime(debounceInterval),\n            filter(() => this.pressedLetters.length > 0),\n            map(() => this.pressedLetters.join(''))\n        ).subscribe((inputString) => {\n            if (searchLetterIndex === -1) {\n                this.pressedLetters = [];\n\n                return;\n            }\n\n            const items = this._items.toArray();\n\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                const index = (this._activeItemIndex + i) % items.length;\n                const item = items[index];\n\n                if (\n                    !item.disabled &&\n                    item.getLabel!().toUpperCase().trim().indexOf(inputString) === searchLetterIndex\n                ) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n\n            this.pressedLetters = [];\n        });\n\n        return this;\n    }\n\n    /**\n     * Sets the active item to the item at the index specified.\n     * @param index The index of the item to be set as active or item The item to be set as active.\n     */\n    setActiveItem(index: number | T): void;\n\n    /**\n     * Sets the active item to the item at the index specified.\n     * @param item The index of the item to be set as active.\n     */\n    setActiveItem(item: any): void {\n        this.previousActiveItemIndex = this._activeItemIndex;\n\n        this.updateActiveItem(item);\n\n        if (this._activeItemIndex !== this.previousActiveItemIndex) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    onKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n\n                return;\n\n            case DOWN_ARROW:\n                if (this.vertical) {\n                    this.setNextItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case UP_ARROW:\n                if (this.vertical) {\n                    this.setPreviousItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case RIGHT_ARROW:\n                if (this.horizontal === 'ltr') {\n                    this.setNextItemActive();\n                    break;\n                } else if (this.horizontal === 'rtl') {\n                    this.setPreviousItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case LEFT_ARROW:\n                if (this.horizontal === 'ltr') {\n                    this.setPreviousItemActive();\n                    break;\n                } else if (this.horizontal === 'rtl') {\n                    this.setNextItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            default:\n                // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                if (event.key && event.key.length === 1) {\n                    this.letterKeyStream.next(event.key.toLocaleUpperCase());\n                } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                    this.letterKeyStream.next(String.fromCharCode(keyCode));\n                }\n\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n\n        this.pressedLetters = [];\n        event.preventDefault();\n    }\n\n    // Sets the active item to the first enabled item in the list.\n    setFirstItemActive(): void {\n        this.setActiveItemByIndex(0, 1);\n    }\n\n    // Sets the active item to the last enabled item in the list.\n    setLastItemActive(): void {\n        this.setActiveItemByIndex(this._items.length - 1, -1);\n    }\n\n    // Sets the active item to the next enabled item in the list.\n    setNextItemActive(): void {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this.setActiveItemByDelta(1);\n    }\n\n    // Sets the active item to a previous enabled item in the list.\n    setPreviousItemActive(): void {\n        this._activeItemIndex < 0 && this.wrap ? this.setLastItemActive()\n            : this.setActiveItemByDelta(-1);\n    }\n\n    setNextPageItemActive(delta: number = this.scrollSize): void {\n        const nextItemIndex = this._activeItemIndex + delta;\n\n        if (nextItemIndex >= this._items.length) {\n            this.setLastItemActive();\n        } else {\n            this.setActiveItemByDelta(delta);\n        }\n    }\n\n    setPreviousPageItemActive(delta: number = this.scrollSize): void {\n        const nextItemIndex = this._activeItemIndex - delta;\n\n        if (nextItemIndex <= 0) {\n            this.setFirstItemActive();\n        } else {\n            this.setActiveItemByDelta(-delta);\n        }\n    }\n\n    /**\n     * Allows setting the active without any other effects.\n     * @param index Index of the item to be set as active.\n     */\n    updateActiveItem(index: number): void;\n\n    /**\n     * Allows setting the active item without any other effects.\n     * @param item Item to be set as active or index Index of the item to be set as active..\n     */\n    // tslint:disable-next-line:unified-signatures\n    updateActiveItem(item: number | T): void;\n\n    updateActiveItem(item: any): void {\n        const itemArray = this._items.toArray();\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n\n        this._activeItemIndex = index;\n        this._activeItem = itemArray[index];\n    }\n\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n    private skipPredicateFn = (item: T) => item.disabled;\n\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    private setActiveItemByDelta(delta: number): void {\n        this.wrap ? this.setActiveInWrapMode(delta) : this.setActiveInDefaultMode(delta);\n    }\n\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    private setActiveInWrapMode(delta: number): void {\n        const items = this.getItemsArray();\n\n        for (let i = 1; i <= items.length; i++) {\n            const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n            const item = items[index];\n\n            if (!this.skipPredicateFn(item)) {\n                this.setActiveItem(index);\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    private setActiveInDefaultMode(delta: number): void {\n        this.setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    private setActiveItemByIndex(index: number, fallbackDelta: number): void {\n        const items = this.getItemsArray();\n\n        if (!items[index]) { return; }\n\n        let curIndex = index;\n        while (this.skipPredicateFn(items[curIndex])) {\n            curIndex += fallbackDelta;\n\n            if (!items[curIndex]) { return; }\n        }\n\n        this.setActiveItem(curIndex);\n    }\n\n    /** Returns the items as an array. */\n    private getItemsArray(): T[] {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n\n/* tslint:enable:member-ordering */\n","\nimport { ListKeyManager, ListKeyManagerOption } from './list-key-manager';\n\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\n// tslint:disable-next-line naming-convention\nexport interface Highlightable extends ListKeyManagerOption {\n    // Applies the styles for an active item to this item.\n    setActiveStyles(): void;\n\n    // Applies the styles for an inactive item to this item.\n    setInactiveStyles(): void;\n}\n\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<Highlightable & T> {\n\n    /**\n     * Sets the active item to the item at the specified index and adds the\n     * active styles to the newly active item. Also removes active styles\n     * from the previously active item.\n     * @param index Index of the item to be set as active.\n     */\n    setActiveItem(index: number): void;\n\n    /**\n     * Sets the active item to the item to the specified one and adds the\n     * active styles to the it. Also removes active styles from the\n     * previously active item.\n     * @param item Item to be set as active.\n     */\n    setActiveItem(item: T): void;\n\n    /**\n     * This method sets the active item to the item at the specified index.\n     * It also adds active styles to the newly active item and removes active\n     * styles from the previously active item.\n     */\n    setActiveItem(index: any): void {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n\n        super.setActiveItem(index);\n\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n","import { FocusOrigin } from '../focus-monitor/focus-monitor';\n\nimport { ListKeyManager, ListKeyManagerOption } from './list-key-manager';\n\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply it's label.\n */\nexport interface IFocusableOption extends ListKeyManagerOption {\n    // Focuses the `FocusableOption`. */\n    focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<IFocusableOption & T> {\n    private origin: FocusOrigin = 'program';\n\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin: FocusOrigin): this {\n        this.origin = origin;\n\n        return this;\n    }\n\n    /**\n     * Sets the active item or index to the item that is specified and focuses it.\n     * @param item Item to be set as active.\n     */\n    setActiveItem(item: number | T): void;\n\n    setActiveItem(item: any): void {\n        super.setActiveItem(item);\n\n        if (this.activeItem) {\n            this.activeItem.focus(this.origin);\n        }\n    }\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    Inject,\n    Injectable,\n    OnDestroy\n} from '@angular/core';\n\nimport { addAriaReferencedId, getAriaReferenceIds, removeAriaReferencedId } from './aria-reference';\n\n\n/**\n * Interface used to register message elements and keep a count of how many registrations have\n * the sa me  messag'rxjs'the reference to the message element used for the `aria-describedby`.\n */\n// tslint:disable-next-line naming-convention\nexport interface RegisteredMessage {\n    /** The element containing the message. */\n    messageElement: Element;\n\n    /** The number of elements that reference this message element via `aria-describedby`. */\n    referenceCount: number;\n}\n\n/** ID used for the body container where all messages are appended. */\nexport const MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n\n/** ID prefix used for each created message element. */\nexport const CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n\n/** Attribute given to each host element that is described by a message element. */\nexport const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n\n/** Global map of all registered message elements that have been placed into the document. */\nconst messageRegistry = new Map<string, RegisteredMessage>();\n\n/** Container for all registered messages. */\nlet messagesContainer: HTMLElement | null = null;\n\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class AriaDescriber implements OnDestroy {\n    private document: Document;\n\n    constructor(@Inject(DOCUMENT) document: any) {\n        this.document = document;\n    }\n\n    /**\n     * Adds to the host element an aria-describedby reference to a hidden element that contains\n     * the message. If the same message has already been registered, then it will reuse the created\n     * message element.\n     */\n    describe(hostElement: Element, message: string) {\n        if (!this.canBeDescribed(hostElement, message)) {\n            return;\n        }\n\n        if (!messageRegistry.has(message)) {\n            this.createMessageElement(message);\n        }\n\n        if (!this.isElementDescribedByMessage(hostElement, message)) {\n            this.addMessageReference(hostElement, message);\n        }\n    }\n\n    /** Removes the host element's aria-describedby reference to the message element. */\n    removeDescription(hostElement: Element, message: string) {\n        if (!this.isElementNode(hostElement)) {\n            return;\n        }\n\n        if (this.isElementDescribedByMessage(hostElement, message)) {\n            this.removeMessageReference(hostElement, message);\n        }\n\n        const registeredMessage = messageRegistry.get(message);\n        if (registeredMessage && registeredMessage.referenceCount === 0) {\n            this.deleteMessageElement(message);\n        }\n\n        if (messagesContainer && messagesContainer.childNodes.length === 0) {\n            this.deleteMessagesContainer();\n        }\n    }\n\n    /** Unregisters all created message elements and removes the message container. */\n    ngOnDestroy() {\n        const describedElements =\n            Array.from(this.document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`));\n\n        describedElements.forEach((element) => {\n            this.removeCdkDescribedByReferenceIds(element);\n            element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n        });\n\n        if (messagesContainer) {\n            this.deleteMessagesContainer();\n        }\n\n        messageRegistry.clear();\n    }\n\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     */\n    private createMessageElement(message: string) {\n        const messageElement = this.document.createElement('div');\n        messageElement.setAttribute('id', `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`);\n        messageElement.appendChild(this.document.createTextNode(message));\n\n        this.createMessagesContainer();\n        messagesContainer!.appendChild(messageElement);\n\n        messageRegistry.set(message, {messageElement, referenceCount: 0});\n    }\n\n    /** Deletes the message element from the global messages container. */\n    private deleteMessageElement(message: string) {\n        const registeredMessage = messageRegistry.get(message);\n        const messageElement = registeredMessage && registeredMessage.messageElement;\n        if (messagesContainer && messageElement) {\n            messagesContainer.removeChild(messageElement);\n        }\n        messageRegistry.delete(message);\n    }\n\n    /** Creates the global container for all aria-describedby messages. */\n    private createMessagesContainer() {\n        if (!messagesContainer) {\n            const preExistingContainer = this.document.getElementById(MESSAGES_CONTAINER_ID);\n\n            // When going from the server to the client, we may end up in a situation where there's\n            // already a container on the page, but we don't have a reference to it. Clear the\n            // old container so we don't get duplicates. Doing this, instead of emptying the previous\n            // container, should be slightly faster.\n            if (preExistingContainer) {\n                preExistingContainer.parentNode!.removeChild(preExistingContainer);\n            }\n\n            messagesContainer = this.document.createElement('div');\n            messagesContainer.id = MESSAGES_CONTAINER_ID;\n            messagesContainer.setAttribute('aria-hidden', 'true');\n            messagesContainer.style.display = 'none';\n            this.document.body.appendChild(messagesContainer);\n        }\n    }\n\n    /** Deletes the global messages container. */\n    private deleteMessagesContainer() {\n        if (messagesContainer && messagesContainer.parentNode) {\n            messagesContainer.parentNode.removeChild(messagesContainer);\n            messagesContainer = null;\n        }\n    }\n\n    /** Removes all cdk-describedby messages that are hosted through the element. */\n    private removeCdkDescribedByReferenceIds(element: Element) {\n        // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n        const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\n            .filter((id) => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) !== 0);\n        element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     */\n    private addMessageReference(element: Element, message: string) {\n        const registeredMessage = messageRegistry.get(message)!;\n\n        // Add the aria-describedby reference and set the\n        // describedby_host attribute to mark the element.\n        addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n\n        registeredMessage.referenceCount++;\n    }\n\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     */\n    private removeMessageReference(element: Element, message: string) {\n        const registeredMessage = messageRegistry.get(message)!;\n        registeredMessage.referenceCount--;\n\n        removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n\n    /** Returns true if the element has been described by the provided message ID. */\n    private isElementDescribedByMessage(element: Element, message: string): boolean {\n        const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n        const registeredMessage = messageRegistry.get(message);\n        const messageId = registeredMessage && registeredMessage.messageElement.id;\n\n        return !!messageId && referenceIds.indexOf(messageId) !== -1;\n    }\n\n    /** Determines whether a message can be described on a particular element. */\n    private canBeDescribed(element: Element, message: string): boolean {\n        if (!this.isElementNode(element)) {\n            return false;\n        }\n\n        const trimmedMessage = message == null ? '' : `${message}`.trim();\n        const ariaLabel = element.getAttribute('aria-label');\n\n        // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the element,\n        // because screen readers will end up reading out the same text twice in a row.\n        return trimmedMessage ? (!ariaLabel || ariaLabel.trim() !== trimmedMessage) : false;\n    }\n\n    /** Checks whether a node is an Element node. */\n    private isElementNode(element: Node): element is Element {\n        return element.nodeType === this.document.ELEMENT_NODE;\n    }\n}\n","import { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { CdkMonitorFocus, FOCUS_MONITOR_PROVIDER } from './focus-monitor/focus-monitor';\n\n\n@NgModule({\n  imports: [CommonModule, PlatformModule],\n  declarations: [CdkMonitorFocus],\n  exports: [CdkMonitorFocus],\n  providers: [\n    FOCUS_MONITOR_PROVIDER\n  ]\n})\nexport class A11yModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","FOCUS_MONITOR_PROVIDER_FACTORY","parentDispatcher","ngZone","platform","FocusMonitor","addAriaReferencedId","el","attr","id","ids","getAriaReferenceIds","some","existingId","trim","push","setAttribute","join","ID_DELIMINATOR","removeAriaReferencedId","filteredIds","filter","val","getAttribute","match","setPrototypeOf","__proto__","Array","p","hasOwnProperty","ListKeyManager","_items","_this","tabOut","Subject","change","previousActiveItemIndex","_activeItemIndex","wrap","letterKeyStream","typeaheadSubscription","Subscription","EMPTY","vertical","scrollSize","pressedLetters","skipPredicateFn","item","disabled","QueryList","changes","subscribe","newItems","_activeItem","itemArray","toArray","newIndex","indexOf","defineProperty","withScrollSize","withWrap","withVerticalOrientation","enabled","withHorizontalOrientation","direction","horizontal","withTypeAhead","debounceInterval","searchLetterIndex","length","getLabel","Error","unsubscribe","pipe","tap","keyCode","debounceTime","map","inputString","items","i","index","toUpperCase","setActiveItem","updateActiveItem","next","onKeydown","event","TAB","DOWN_ARROW","setNextItemActive","UP_ARROW","setPreviousItemActive","RIGHT_ARROW","LEFT_ARROW","key","toLocaleUpperCase","A","Z","ZERO","NINE","String","fromCharCode","preventDefault","setFirstItemActive","setActiveItemByIndex","setLastItemActive","setActiveItemByDelta","setNextPageItemActive","delta","setPreviousPageItemActive","setActiveInWrapMode","setActiveInDefaultMode","getItemsArray","fallbackDelta","curIndex","ActiveDescendantKeyManager","tslib_1.__extends","_super","activeItem","setInactiveStyles","call","setActiveStyles","FocusKeyManager","apply","arguments","origin","setFocusOrigin","focus","_ngZone","_platform","windowFocused","elementInfo","Map","monitoredElementCount","unregisterGlobalListeners","monitor","element","checkChildren","isBrowser","observableOf","has","cachedInfo","get","subject","asObservable","info","unlisten","set","incrementMonitoredElementCount","focusListener","onFocus","blurListener","_onBlur","runOutsideAngular","addEventListener","removeEventListener","stopMonitoring","complete","setClasses","delete","decrementMonitoredElementCount","focusVia","setOriginForCurrentEventQueue","ngOnDestroy","forEach","_info","relatedTarget","Node","contains","registerGlobalListeners","documentKeydownListener","lastTouchTarget","documentMousedownListener","documentTouchstartListener","touchTimeoutId","clearTimeout","target","window","setTimeout","windowFocusListener","windowFocusTimeoutId","document","supportsPassiveEventListeners","passive","capture","originTimeoutId","toggleClass","className","shouldSet","classList","add","remove","wasCausedByTouch","focusTarget","lastFocusOrigin","emitOrigin","run","type","Injectable","args","providedIn","NgZone","Platform","CdkMonitorFocus","_elementRef","_focusMonitor","cdkFocusChange","EventEmitter","monitorSubscription","nativeElement","hasAttribute","emit","Directive","selector","ElementRef","Output","FOCUS_MONITOR_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","nextId","messageRegistry","messagesContainer","AriaDescriber","describe","hostElement","message","canBeDescribed","createMessageElement","isElementDescribedByMessage","addMessageReference","removeDescription","isElementNode","removeMessageReference","registeredMessage","referenceCount","deleteMessageElement","childNodes","deleteMessagesContainer","from","querySelectorAll","removeCdkDescribedByReferenceIds","removeAttribute","clear","messageElement","createElement","CDK_DESCRIBEDBY_ID_PREFIX","appendChild","createTextNode","createMessagesContainer","removeChild","preExistingContainer","getElementById","style","display","body","parentNode","originalReferenceIds","referenceIds","messageId","trimmedMessage","ariaLabel","nodeType","ELEMENT_NODE","undefined","decorators","Inject","DOCUMENT","A11yModule","NgModule","imports","CommonModule","PlatformModule","declarations","exports","providers"],"mappings":";;;;;;onBAuBO,SAASA,GAAUC,EAAGC,GAEzB,QAASC,KAAOC,KAAKC,YAAcJ,EADnCK,EAAcL,EAAGC,GAEjBD,EAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IC2WnF,QAAgBO,GAA+BC,EAAgCC,EAAgBC,GAC3F,MAAOF,IAAoB,GAAIG,GAAaF,EAAQC,GChYxD,QAAgBE,GAAoBC,EAAaC,EAAcC,GAC/D,GAAQC,GAAMC,EAAoBJ,EAAIC,EAEhCE,GAAIE,KAAI,SAAEC,GAAe,MAAAA,GAAWC,SAAWL,EAAGK,WACtDJ,EAAIK,KAAKN,EAAGK,QAEZP,EAAGS,aAAaR,EAAME,EAAIO,KAAKC,KAOjC,QAAgBC,GAAuBZ,EAAaC,EAAcC,GAClE,GAAQC,GAAMC,EAAoBJ,EAAIC,GAC9BY,EAAcV,EAAIW,OAAM,SAAEC,GAAQ,MAAAA,KAAQb,EAAGK,QAEnDP,GAAGS,aAAaR,EAAMY,EAAYH,KAAKC,IAOzC,QAAgBP,GAAoBJ,EAAaC,GAE/C,OAAQD,EAAGgB,aAAaf,IAAS,IAAIgB,MAAM,YFhB7C,GAAI3B,GAAgB,SAASL,EAAGC,GAI5B,OAHAI,EAAgBE,OAAO0B,iBAChBC,uBAA2BC,QAAS,SAAUnC,EAAGC,GAAKD,EAAEkC,UAAYjC,IACvE,SAAUD,EAAGC,GAAK,IAAK,GAAImC,KAAKnC,GAAOA,EAAEoC,eAAeD,KAAIpC,EAAEoC,GAAKnC,EAAEmC,MACpDpC,EAAGC,iBGgDxB,QAAJqC,GAAwBC,GAApB,GAAJC,GAAArC,IAAwBA,MAAxBoC,OAAwBA,EAhCpBpC,KAAJsC,OAA4B,GAAIC,GAAAA,QAG5BvC,KAAJwC,OAAa,GAAID,GAAAA,QAEbvC,KAAJyC,yBAA+B,EAOnBzC,KAAZ0C,kBAAgC,EASpB1C,KAAZ2C,MAA4B,EAChB3C,KAAZ4C,gBAA8B,GAAIL,GAAAA,QACtBvC,KAAZ6C,sBAAoCC,EAAAA,aAAaC,MACrC/C,KAAZgD,UAAuB,EAGXhD,KAAZiD,WAAiC,EAGrBjD,KAAZkD,kBAsQYlD,KAAZmD,gBAA2B,SAAIC,GAAY,MAAAA,GAAKC,UAnQpCjB,YAAkBkB,GAAAA,WAElBlB,EAAOmB,QAAQC,UAAS,SAAEC,GAEtB,GAAIpB,EAAKqB,YAAa,CACtC,GAA0BC,GAAYF,EAASG,UACrBC,EAAWF,EAAUG,QAAQzB,EAAKqB,YAEpCG,IAAY,GAAKA,IAAaxB,EAAKK,mBACnCL,EAAKK,iBAAmBmB,MA0ThD,MA5VIzD,QAAJ2D,eAAQ5B,EAARhC,UAAA,uBAAI,WACI,MAAOH,MAAK0C,kDAMhBtC,OAAJ2D,eAAQ5B,EAARhC,UAAA,kBAAI,WACI,MAAOH,MAAK0D,6CAiChBvB,EAAJhC,UAAA6D,eAAI,SAAef,GAGX,MAFA,MAAKA,WAAaA,EAElB,MAQJd,EAAJhC,UAAA8D,SAAI,WAGI,MAFA,MAAKtB,MAAO,EAEZ,MAOJR,EAAJhC,UAAA+D,wBAAI,SAAwBC,GAGpB,WAHR,KAAAA,IAA4BA,GAA5B,GACQ,KAAKnB,SAAWmB,EAEhB,MAQJhC,EAAJhC,UAAAiE,0BAAI,SAA0BC,GAGtB,MAFA,MAAKC,WAAaD,EAElB,MAQJlC,EAAJhC,UAAAoE,cAAI,SAAcC,EAAgCC,GAA9C,GAAJpC,GAAArC,IACQ,QADR,KAAAwE,IAAkBA,EAAlB,SAAA,KAAAC,IAAkDA,EAAlD,GACY,KAAKrC,OAAOsC,QAAU,KAAKtC,OAAOnB,KAAI,SAAEmC,GAAS,MAAyB,kBAAlBA,GAAKuB,WAC7D,KAAMC,OAAM,+EAuChB,OApCA,MAAK/B,sBAAsBgC,cAI3B,KAAKhC,sBAAwB,KAAKD,gBAAgBkC,KAC9CC,EAAAA,IAAG,SAAEC,GAAY,MAAA,GAAK9B,eAAe9B,KAAK4D,KAC1CC,EAAAA,aAAaT,GACb9C,EAAAA,OAAM,WAAO,MAAA,GAAKwB,eAAewB,OAAS,IAC1CQ,EAAAA,IAAG,WAAO,MAAA,GAAKhC,eAAe5B,KAAK,OACrCkC,UAAS,SAAE2B,GACT,IAA2B,IAAvBV,EAGA,YAFA,EAAKvB,kBAST,KAAK,GAJCkC,GAAQ,EAAKhD,OAAOwB,UAIjByB,EAAI,EAAGA,EAAID,EAAMV,OAAS,EAAGW,IAAK,CACvD,GAAsBC,IAAS,EAAK5C,iBAAmB2C,GAAKD,EAAMV,OAC5CtB,EAAOgC,EAAME,EAEnB,KACKlC,EAAKC,UACND,EAAa,WAAImC,cAAcpE,OAAO2C,QAAQqB,KAAiBV,EACjE,CACE,EAAKe,cAAcF,EACnB,QAIR,EAAKpC,oBAGT,MAaJf,EAAJhC,UAAAqF,cAAI,SAAcpC,GACVpD,KAAKyC,wBAA0BzC,KAAK0C,iBAEpC1C,KAAKyF,iBAAiBrC,GAElBpD,KAAK0C,mBAAqB1C,KAAKyC,yBAC/BzC,KAAKwC,OAAOkD,KAAK1F,KAAK0C,mBAQ9BP,EAAJhC,UAAAwF,UAAI,SAAUC,GAEd,GAAcZ,GAAUY,EAAMZ,OAEtB,QAAQA,GACJ,IAAKa,GAAAA,IAGD,WAFA7F,MAAKsC,OAAOoD,MAIhB,KAAKI,GAAAA,WACD,GAAI9F,KAAKgD,SAAU,CACfhD,KAAK+F,mBACL,OAEA,MAGR,KAAKC,GAAAA,SACD,GAAIhG,KAAKgD,SAAU,CACfhD,KAAKiG,uBACL,OAEA,MAGR,KAAKC,GAAAA,YACD,GAAwB,QAApBlG,KAAKsE,WAAsB,CAC3BtE,KAAK+F,mBACL,OACG,GAAwB,QAApB/F,KAAKsE,WAAsB,CAClCtE,KAAKiG,uBACL,OAEA,MAGR,KAAKE,GAAAA,WACD,GAAwB,QAApBnG,KAAKsE,WAAsB,CAC3BtE,KAAKiG,uBACL,OACG,GAAwB,QAApBjG,KAAKsE,WAAsB,CAClCtE,KAAK+F,mBACL,OAEA,MAGR,SAWI,YARIH,EAAMQ,KAA4B,IAArBR,EAAMQ,IAAI1B,OACvB1E,KAAK4C,gBAAgB8C,KAAKE,EAAMQ,IAAIC,sBAC5BrB,GAAWsB,EAAAA,GAAKtB,GAAWuB,EAAAA,GAAOvB,GAAWwB,EAAAA,MAAQxB,GAAWyB,EAAAA,OACxEzG,KAAK4C,gBAAgB8C,KAAKgB,OAAOC,aAAa3B,KAQ1DhF,KAAKkD,kBACL0C,EAAMgB,kBAIVzE,EAAJhC,UAAA0G,mBAAI,WACI7G,KAAK8G,qBAAqB,EAAG,IAIjC3E,EAAJhC,UAAA4G,kBAAI,WACI/G,KAAK8G,qBAAqB9G,KAAKoC,OAAOsC,OAAS,GAAI,IAIvDvC,EAAJhC,UAAA4F,kBAAI,WACI/F,KAAK0C,iBAAmB,EAAI1C,KAAK6G,qBAAuB7G,KAAKgH,qBAAqB,IAItF7E,EAAJhC,UAAA8F,sBAAI,WACIjG,KAAK0C,iBAAmB,GAAK1C,KAAK2C,KAAO3C,KAAK+G,oBACxC/G,KAAKgH,sBAAsB,IAGrC7E,EAAJhC,UAAA8G,sBAAI,SAAsBC,OAA1B,KAAAA,IAA0BA,EAAgBlH,KAAKiD,YACjBjD,KAAK0C,iBAAmBwE,GAEzBlH,KAAKoC,OAAOsC,OAC7B1E,KAAK+G,oBAEL/G,KAAKgH,qBAAqBE,IAIlC/E,EAAJhC,UAAAgH,0BAAI,SAA0BD,OAA9B,KAAAA,IAA8BA,EAAgBlH,KAAKiD,YACrBjD,KAAK0C,iBAAmBwE,GAEzB,EACjBlH,KAAK6G,qBAEL7G,KAAKgH,sBAAsBE,IAiBnC/E,EAAJhC,UAAAsF,iBAAI,SAAiBrC,GACrB,GAAcO,GAAY3D,KAAKoC,OAAOwB,UACxB0B,EAAwB,gBAATlC,GAAoBA,EAAOO,EAAUG,QAAQV,EAElEpD,MAAK0C,iBAAmB4C,EACxBtF,KAAK0D,YAAcC,EAAU2B,IAczBnD,EAAZhC,UAAA6G,qBAAI,SAA6BE,GACzBlH,KAAK2C,KAAO3C,KAAKoH,oBAAoBF,GAASlH,KAAKqH,uBAAuBH,IAQtE/E,EAAZhC,UAAAiH,oBAAI,SAA4BF,GAGxB,IAAK,GAFC9B,GAAQpF,KAAKsH,gBAEVjC,EAAI,EAAGA,GAAKD,EAAMV,OAAQW,IAAK,CAChD,GAAkBC,IAAStF,KAAK0C,iBAAoBwE,EAAQ7B,EAAKD,EAAMV,QAAUU,EAAMV,OACrEtB,EAAOgC,EAAME,EAEnB,KAAKtF,KAAKmD,gBAAgBC,GAGtB,WAFApD,MAAKwF,cAAcF,KAYvBnD,EAAZhC,UAAAkH,uBAAI,SAA+BH,GAC3BlH,KAAK8G,qBAAqB9G,KAAK0C,iBAAmBwE,EAAOA,IAQrD/E,EAAZhC,UAAA2G,qBAAI,SAA6BxB,EAAeiC,GAChD,GAAcnC,GAAQpF,KAAKsH,eAEnB,IAAKlC,EAAME,GAAX,CAGA,IADR,GAAYkC,GAAWlC,EACRtF,KAAKmD,gBAAgBiC,EAAMoC,KAG9B,GAFAA,GAAYD,GAEPnC,EAAMoC,GAAa,MAG5BxH,MAAKwF,cAAcgC,KAIfrF,EAAZhC,UAAAmH,cAAI,WACI,MAAOtH,MAAKoC,iBAAkBkB,GAAAA,UAAYtD,KAAKoC,OAAOwB,UAAY5D,KAAKoC,QAE/ED,mBCtXA,QAAAsF,oDAkCA,MAlCmDC,GAAnDD,EAAAE,GAuBIF,EAAJtH,UAAAqF,cAAI,SAAcF,GACNtF,KAAK4H,YACL5H,KAAK4H,WAAWC,oBAGpBF,EAARxH,UAAcqF,cAAdsC,KAAA9H,KAA4BsF,GAEhBtF,KAAK4H,YACL5H,KAAK4H,WAAWG,mBAG5BN,GAlCmDtF,iBCHnD,QAAA6F,KAAA,GAAA3F,GAAA,OAAAsF,GAAAA,EAAAM,MAAAjI,KAAAkI,YAAAlI,WACYqC,GAAZ8F,OAAkC,YAyBlC,MA1BwCT,GAAxCM,EAAAL,GAOIK,EAAJ7H,UAAAiI,eAAI,SAAeD,GAGX,MAFA,MAAKA,OAASA,EAEd,MASJH,EAAJ7H,UAAAqF,cAAI,SAAcpC,GACVuE,EAARxH,UAAcqF,cAAdsC,KAAA9H,KAA4BoD,GAEhBpD,KAAK4H,YACL5H,KAAK4H,WAAWS,MAAMrI,KAAKmI,SAGvCH,GA1BwC7F,GJgBxCzB,EAAA,WA6BI,QAAJA,GAAwB4H,EAAyBC,GAAzBvI,KAAxBsI,QAAwBA,EAAyBtI,KAAjDuI,UAAiDA,EA1BrCvI,KAAZmI,OAAkC,KAMtBnI,KAAZwI,eAA4B,EAehBxI,KAAZyI,YAA0B,GAAIC,KAGlB1I,KAAZ2I,sBAAoC,EA0GxB3I,KAAZ4I,0BAAqC,aApKrC,MAqEIlI,GAAJP,UAAA0I,QAAI,SAAQC,EAAsBC,GAA9B,GAAJ1G,GAAArC,IACQ,QADR,KAAA+I,IAAkCA,GAAlC,IACa/I,KAAKuI,UAAUS,UAChB,MAAOC,GAAAA,GAAa,KAGxB,IAAIjJ,KAAKyI,YAAYS,IAAIJ,GAAU,CAC3C,GAAkBK,GAAanJ,KAAKyI,YAAYW,IAAIN,EAGxC,OAFA,GAAYC,cAAgBA,EAErB,EAAYM,QAAQC,eAIvC,GAAcC,IACFC,SAAQ,aACRT,cAAZA,EACYM,QAAS,GAAI9G,GAAAA,QAEjBvC,MAAKyI,YAAYgB,IAAIX,EAASS,GAC9BvJ,KAAK0J,gCAGb,IAAcC,GAAa,SAAI/D,GAAsB,MAAAvD,GAAKuH,QAAQhE,EAAOkD,IAC3De,EAAY,SAAIjE,GAAsB,MAAAvD,GAAKyH,QAAQlE,EAAOkD,GAYhE,OAXA9I,MAAKsI,QAAQyB,kBAAiB,WAC1BjB,EAAQkB,iBAAiB,QAASL,GAAe,GACjDb,EAAQkB,iBAAiB,OAAQH,GAAc,KAInDN,EAAKC,SAAQ,WACTV,EAAQmB,oBAAoB,QAASN,GAAe,GACpDb,EAAQmB,oBAAoB,OAAQJ,GAAc,IAG/CN,EAAKF,QAAQC,gBAOxB5I,EAAJP,UAAA+J,eAAI,SAAepB,GACnB,GAAcL,GAAczI,KAAKyI,YAAYW,IAAIN,EAErCL,KACAA,EAAYe,WACZf,EAAYY,QAAQc,WAEpBnK,KAAKoK,WAAWtB,GAChB9I,KAAKyI,YAAY4B,OAAOvB,GACxB9I,KAAKsK,mCASb5J,EAAJP,UAAAoK,SAAI,SAASzB,EAAsBX,GAC3BnI,KAAKwK,8BAA8BrC,GAGN,kBAAlBW,GAAQT,OACfS,EAAQT,SAIhB3H,EAAJP,UAAAsK,YAAI,WAAA,GAAJpI,GAAArC,IACQA,MAAKyI,YAAYiC,QAAO,SAAEC,EAAO7B,GAAY,MAAAzG,GAAK6H,eAAepB,MASrEpI,EAAJP,UAAA2J,QAAI,SAAQlE,EAAmBkD,GAG/B,GAAcL,GAAczI,KAAKyI,YAAYW,IAAIN,IAEpCL,GAAgBA,EAAYM,eAAiBnD,EAAMgF,wBAAyBC,OACzE/B,EAAQgC,SAASlF,EAAMgF,iBAI/B5K,KAAKoK,WAAWtB,GAChBL,EAAYY,QAAQ3D,KAAK,QAQrBhF,EAAZP,UAAA4K,wBAAI,WAAA,GAAJ1I,GAAArC,IAEQ,IAAKA,KAAKuI,UAAUS,UAApB,CAKR,GAAcgC,GAAuB,WACzB3I,EAAK4I,gBAAkB,KACvB5I,EAAKmI,8BAA8B,aAKjCU,EAAyB,WACtB7I,EAAK4I,iBACN5I,EAAKmI,8BAA8B,UAOrCW,EAA0B,SAAIvF,GACL,MAAvBvD,EAAK+I,gBAA0BC,aAAahJ,EAAK+I,gBAErD/I,EAAK4I,gBAAkBrF,EAAM0F,OAE7BjJ,EAAK+I,eAAiBG,OAAOC,WAAU,WAAO,MAAAnJ,GAAK4I,gBAAkB,MAlLlD,MAuLjBQ,EAAmB,WACrBpJ,EAAKmG,eAAgB,EAErBnG,EAAKqJ,qBAAuBH,OAAOC,WAAU,WAAO,MAAAnJ,GAAKmG,eAAgB,GAAO,GAKpFxI,MAAKsI,QAAQyB,kBAAiB,WAC1B4B,SAAS3B,iBAAiB,UAAWgB,GAAyB,GAC9DW,SAAS3B,iBAAiB,YAAakB,GAA2B,GAClES,SAAS3B,iBAAiB,aAAcmB,GACpCS,EAAAA,kCAAqCC,SAAS,EAAMC,SAAS,IACjEP,OAAOvB,iBAAiB,QAASyB,KAGrCzL,KAAK4I,0BAAyB,WAC1B+C,SAAS1B,oBAAoB,UAAWe,GAAyB,GACjEW,SAAS1B,oBAAoB,YAAaiB,GAA2B,GACrES,SAAS1B,oBAAoB,aAAckB,GACvCS,EAAAA,kCAAqCC,SAAS,EAAMC,SAAS,IACjEP,OAAOtB,oBAAoB,QAASwB,GAGpCJ,aAAahJ,EAAKqJ,sBAClBL,aAAahJ,EAAK+I,gBAClBC,aAAahJ,EAAK0J,oBAIlBrL,EAAZP,UAAA6L,YAAI,SAAoBlD,EAAkBmD,EAAmBC,GACjDA,EACApD,EAAQqD,UAAUC,IAAIH,GAEtBnD,EAAQqD,UAAUE,OAAOJ,IASzBvL,EAAZP,UAAAiK,WAAI,SAAmBtB,EAAsBX,GACjBnI,KAAKyI,YAAYW,IAAIN,KAGrC9I,KAAKgM,YAAYlD,EAAS,gBAAiBX,GAC3CnI,KAAKgM,YAAYlD,EAAS,oBAAgC,UAAXX,GAC/CnI,KAAKgM,YAAYlD,EAAS,uBAAmC,aAAXX,GAClDnI,KAAKgM,YAAYlD,EAAS,oBAAgC,UAAXX,GAC/CnI,KAAKgM,YAAYlD,EAAS,sBAAkC,YAAXX,KAQjDzH,EAAZP,UAAAqK,8BAAI,SAAsCrC,GAAtC,GAAJ9F,GAAArC,IACQA,MAAKsI,QAAQyB,kBAAiB,WAC1B1H,EAAK8F,OAASA,EAEd9F,EAAK0J,gBAAkBR,OAAOC,WAAU,WAAO,MAAAnJ,GAAK8F,OAAS,UAS7DzH,EAAZP,UAAAmM,iBAAI,SAAyB1G,GAkB7B,GAAc2G,GAAc3G,EAAM0F,MAE1B,OAAOtL,MAAKiL,0BAA2BJ,OAAQ0B,YAAuB1B,QACjE0B,IAAgBvM,KAAKiL,iBAAmBsB,EAAYzB,SAAS9K,KAAKiL,mBAQnEvK,EAAZP,UAAAyJ,QAAI,SAAgBhE,EAAmBkD,GAQvC,GAAcL,GAAczI,KAAKyI,YAAYW,IAAIN,EACzC,IAAKL,IAAiBA,EAAYM,eAAiBD,IAAYlD,EAAM0F,QAArE,CAUR,GAAYnD,GAASnI,KAAKmI,MACbA,KAEGA,EADAnI,KAAKwI,eAAiBxI,KAAKwM,gBAClBxM,KAAKwM,gBACPxM,KAAKsM,iBAAiB1G,GACpB,QAEA,WAIjB5F,KAAKoK,WAAWtB,EAASX,GACzBnI,KAAKyM,WAAWhE,EAAYY,QAASlB,GACrCnI,KAAKwM,gBAAkBrE,IAGnBzH,EAAZP,UAAAsM,WAAI,SAAmBpD,EAA+BlB,GAC9CnI,KAAKsI,QAAQoE,IAAG,WAAO,MAAArD,GAAQ3D,KAAKyC,MAGhCzH,EAAZP,UAAAuJ,+BAAI,WAEyC,KAA/B1J,KAAK2I,uBACP3I,KAAK+K,2BAILrK,EAAZP,UAAAmK,+BAAI,aAEWtK,KAAK2I,wBACR3I,KAAK4I,4BACL5I,KAAK4I,0BAAyB,8BAhU1C+D,KAACC,EAAAA,WAADC,OAAaC,WAAY,+CAzBzBH,KAAII,EAAAA,SANJJ,KAASK,EAAAA,uKAATtM,KA6WAuM,EAAA,WASI,QAAJA,GAAwBC,EAAiCC,GAArD,GAAJ9K,GAAArC,IAAwBA,MAAxBkN,YAAwBA,EAAiClN,KAAzDmN,cAAyDA,EAJ3CnN,KAAdoN,eAA+B,GAAIC,GAAAA,aAK3BrN,KAAKsN,oBAAsBtN,KAAKmN,cAActE,QAC1C7I,KAAKkN,YAAYK,cACjBvN,KAAKkN,YAAYK,cAAcC,aAAa,2BAC3ChK,UAAS,SAAE2E,GAAW,MAAA9F,GAAK+K,eAAeK,KAAKtF,KAO5D,MAJI8E,GAAJ9M,UAAAsK,YAAI,WACIzK,KAAKmN,cAAcjD,eAAelK,KAAKkN,YAAYK,eACnDvN,KAAKsN,oBAAoBzI,8BAlBjC8H,KAACe,EAAAA,UAADb,OACIc,SAAU,6FA3WdhB,KAAIiB,EAAAA,aAmXJjB,KAAwEjM,uBAJxE0M,iBAAAT,KAAKkB,EAAAA,UAeLZ,KASaa,GAETC,QAASrN,EACTsN,OAAQ,GAAIC,GAAAA,SAAY,GAAIC,GAAAA,SAAYxN,GAAeqM,EAAAA,OAAQC,EAAAA,UAE/DmB,WAAY7N,GC/YViB,EAAiB,IIiCnB6M,EAAS,EAGPC,EAAkB,GAAI3F,KAGxB4F,EAAwC,KAQ5CC,EAAA,WAII,QAAJA,GAAkC5C,GAC1B3L,KAAK2L,SAAWA,EApDxB,MA4DI4C,GAAJpO,UAAAqO,SAAI,SAASC,EAAsBC,GACtB1O,KAAK2O,eAAeF,EAAaC,KAIjCL,EAAgBnF,IAAIwF,IACrB1O,KAAK4O,qBAAqBF,GAGzB1O,KAAK6O,4BAA4BJ,EAAaC,IAC/C1O,KAAK8O,oBAAoBL,EAAaC,KAK9CH,EAAJpO,UAAA4O,kBAAI,SAAkBN,EAAsBC,GACpC,GAAK1O,KAAKgP,cAAcP,GAAxB,CAIIzO,KAAK6O,4BAA4BJ,EAAaC,IAC9C1O,KAAKiP,uBAAuBR,EAAaC,EAGrD,IAAcQ,GAAoBb,EAAgBjF,IAAIsF,EAC1CQ,IAA0D,IAArCA,EAAkBC,gBACvCnP,KAAKoP,qBAAqBV,GAG1BJ,GAA6D,IAAxCA,EAAkBe,WAAW3K,QAClD1E,KAAKsP,4BAKbf,EAAJpO,UAAAsK,YAAI,WAAA,GAAJpI,GAAArC,IAEYgC,OAAMuN,KAAKvP,KAAK2L,SAAS6D,iBAAiB,2BAE5B9E,QAAO,SAAE5B,GACvBzG,EAAKoN,iCAAiC3G,GACtCA,EAAQ4G,gBAvE0B,0BA0ElCpB,GACAtO,KAAKsP,0BAGTjB,EAAgBsB,SAOZpB,EAAZpO,UAAAyO,qBAAI,SAA6BF,GACjC,GAAckB,GAAiB5P,KAAK2L,SAASkE,cAAc,MACnDD,GAAevO,aAAa,KAASyO,2BAA6B1B,KAClEwB,EAAeG,YAAY/P,KAAK2L,SAASqE,eAAetB,IAExD1O,KAAKiQ,0BACL,EAAmBF,YAAYH,GAE/BvB,EAAgB5E,IAAIiF,GAAUkB,eAAtCA,EAAsDT,eAAgB,KAI1DZ,EAAZpO,UAAAiP,qBAAI,SAA6BV,GACjC,GAAcQ,GAAoBb,EAAgBjF,IAAIsF,GACxCkB,EAAiBV,GAAqBA,EAAkBU,cAC1DtB,IAAqBsB,GACrBtB,EAAkB4B,YAAYN,GAElCvB,EAAgBhE,OAAOqE,IAInBH,EAAZpO,UAAA8P,wBAAI,WACI,IAAK3B,EAAmB,CAChC,GAAkB6B,GAAuBnQ,KAAK2L,SAASyE,eAnHlB,oCAyHrBD,IACAA,EAA+B,WAAED,YAAYC,GAGjD7B,EAAoBtO,KAAK2L,SAASkE,cAAc,OAChDvB,EAAkBxN,GA9HO,oCA+HzBwN,EAAkBjN,aAAa,cAAe,QAC9CiN,EAAkB+B,MAAMC,QAAU,OAClCtQ,KAAK2L,SAAS4E,KAAKR,YAAYzB,KAK/BC,EAAZpO,UAAAmP,wBAAI,WACQhB,GAAqBA,EAAkBkC,aACvClC,EAAkBkC,WAAWN,YAAY5B,GACzCA,EAAoB,OAKpBC,EAAZpO,UAAAsP,iCAAI,SAAyC3G,GAE7C,GAAc2H,GAAuBzP,EAAoB8H,EAAS,oBACrDpH,OAAM,SAAEZ,GAAO,MAA0C,KAA1CA,EAAGgD,QA9IU,4BA+IjCgF,GAAQzH,aAAa,mBAAoBoP,EAAqBnP,KAAK,OAO/DiN,EAAZpO,UAAA2O,oBAAI,SAA4BhG,EAAkB4F,GAClD,GAAcQ,GAAoBb,EAAgBjF,IAAIsF,EAI9C/N,GAAoBmI,EAAS,mBAAoBoG,EAAkBU,eAAe9O,IAClFgI,EAAQzH,aAzJ8B,uBAyJe,IAErD6N,EAAkBC,kBAOdZ,EAAZpO,UAAA8O,uBAAI,SAA+BnG,EAAkB4F,GACrD,GAAcQ,GAAoBb,EAAgBjF,IAAIsF,EAC9CQ,GAAkBC,iBAElB3N,EAAuBsH,EAAS,mBAAoBoG,EAAkBU,eAAe9O,IACrFgI,EAAQ4G,gBAvK8B,yBA2KlCnB,EAAZpO,UAAA0O,4BAAI,SAAoC/F,EAAkB4F,GAC1D,GAAcgC,GAAe1P,EAAoB8H,EAAS,oBAC5CoG,EAAoBb,EAAgBjF,IAAIsF,GACxCiC,EAAYzB,GAAqBA,EAAkBU,eAAe9O,EAExE,SAAS6P,IAAkD,IAArCD,EAAa5M,QAAQ6M,IAIvCpC,EAAZpO,UAAAwO,eAAI,SAAuB7F,EAAkB4F,GACrC,IAAK1O,KAAKgP,cAAclG,GACpB,OAAO,CAGnB,IAAc8H,GAA4B,MAAXlC,EAAkB,IAAK,GAAGA,GAAUvN,OACrD0P,EAAY/H,EAAQlH,aAAa,aAIvC,SAAOgP,KAAmBC,GAAaA,EAAU1P,SAAWyP,IAIxDrC,EAAZpO,UAAA6O,cAAI,SAAsBlG,GAClB,MAAOA,GAAQgI,WAAa9Q,KAAK2L,SAASoF,6BAlLlDpE,KAACC,EAAAA,WAADC,OAAaC,WAAY,+CAIzBH,SAAAqE,GAAAC,aAAAtE,KAAiBuE,EAAAA,OAAjBrE,MAAwBsE,EAAAA,kJAnDxB5C,KCOA6C,EAAA,WAAA,QAAAA,MAQyB,sBARzBzE,KAAC0E,EAAAA,SAADxE,OACEyE,SAAUC,EAAAA,aAAcC,EAAAA,gBACxBC,cAAexE,GACfyE,SAAUzE,GACV0E,WACE7D,OAGJsD,sGDe8C,mDAHL,4LAHJ,sDLPN"}