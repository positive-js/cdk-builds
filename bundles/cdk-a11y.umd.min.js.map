{"version":3,"file":"cdk-a11y.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../packages/cdk/a11y/focus-monitor/focus-monitor.ts","../../packages/cdk/a11y/aria-describer/aria-reference.ts","../../packages/cdk/a11y/key-manager/list-key-manager.ts","../../packages/cdk/a11y/key-manager/activedescendant-key-manager.ts","../../packages/cdk/a11y/key-manager/focus-key-manager.ts","../../packages/cdk/a11y/aria-describer/aria-describer.ts","../../packages/cdk/a11y/a11y-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Platform, supportsPassiveEventListeners } from '@angular/cdk/platform';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Injectable,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    SkipSelf\n} from '@angular/core';\nimport { Observable, Subject, Subscription, of as observableOf } from 'rxjs';\n\n\n// Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n// tslint:disable-next-line naming-convention\ninterface MonitoredElementInfo {\n    checkChildren: boolean;\n    subject: Subject<FocusOrigin>;\n    unlisten(): void;\n}\n\n\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\n@Injectable({providedIn: 'root'})\nexport class FocusMonitor implements OnDestroy {\n    /** The focus origin that the next focus event is a result of. */\n    private _origin: FocusOrigin = null;\n\n    /** The FocusOrigin of the last focus event tracked by the FocusMonitor. */\n    private _lastFocusOrigin: FocusOrigin;\n\n    /** Whether the window has just been focused. */\n    private _windowFocused = false;\n\n    /** The target of the last touch event. */\n    private _lastTouchTarget: EventTarget | null;\n\n    /** The timeout id of the touch timeout, used to cancel timeout later. */\n    private _touchTimeoutId: number;\n\n    /** The timeout id of the window focus timeout. */\n    private _windowFocusTimeoutId: number;\n\n    /** The timeout id of the origin clearing timeout. */\n    private _originTimeoutId: number;\n\n    /** Map of elements being monitored to their info. */\n    private _elementInfo = new Map<HTMLElement, MonitoredElementInfo>();\n\n    /** The number of elements currently being monitored. */\n    private _monitoredElementCount = 0;\n\n    constructor(private _ngZone: NgZone, private _platform: Platform) {}\n\n    /**\n     * Monitors focus on an element and applies appropriate CSS classes.\n     * @param element The element to monitor\n     * @param checkChildren Whether to count the element as focused when its children are focused.\n     * @returns An observable that emits when the focus state of the element changes.\n     *     When the element is blurred, null will be emitted.\n     */\n    monitor(element: HTMLElement, checkChildren: boolean = false): Observable<FocusOrigin> {\n        if (!this._platform.isBrowser) {\n            return observableOf(null);\n        }\n        // Check if we're already monitoring this element.\n        if (this._elementInfo.has(element)) {\n            const cachedInfo = this._elementInfo.get(element);\n            cachedInfo!.checkChildren = checkChildren;\n\n            return cachedInfo!.subject.asObservable();\n        }\n\n        // Create monitored element info.\n        const info: MonitoredElementInfo = {\n            unlisten: () => {}, // tslint:disable-line no-empty\n            checkChildren,\n            subject: new Subject<FocusOrigin>()\n        };\n        this._elementInfo.set(element, info);\n        this._incrementMonitoredElementCount();\n\n        // Start listening. We need to listen in capture phase since focus events don't bubble.\n        const focusListener = (event: FocusEvent) => this._onFocus(event, element);\n        const blurListener = (event: FocusEvent) => this._onBlur(event, element);\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('focus', focusListener, true);\n            element.addEventListener('blur', blurListener, true);\n        });\n\n        // Create an unlisten function for later.\n        info.unlisten = () => {\n            element.removeEventListener('focus', focusListener, true);\n            element.removeEventListener('blur', blurListener, true);\n        };\n\n        return info.subject.asObservable();\n    }\n\n    /**\n     * Stops monitoring an element and removes all focus classes.\n     * @param element The element to stop monitoring.\n     */\n    stopMonitoring(element: HTMLElement): void {\n        const elementInfo = this._elementInfo.get(element);\n\n        if (elementInfo) {\n            elementInfo.unlisten();\n            elementInfo.subject.complete();\n\n            this._setClasses(element);\n            this._elementInfo.delete(element);\n            this._decrementMonitoredElementCount();\n        }\n    }\n\n    /**\n     * Focuses the element via the specified focus origin.\n     * @param element The element to focus.\n     * @param origin The focus origin.\n     */\n    focusVia(element: HTMLElement, origin: FocusOrigin): void {\n        this._setOriginForCurrentEventQueue(origin);\n\n        // `focus` isn't available on the server\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    ngOnDestroy() {\n        this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n    }\n\n    /**\n     * Handles blur events on a registered element.\n     * @param event The blur event.\n     * @param element The monitored element.\n     */\n    _onBlur(event: FocusEvent, element: HTMLElement) {\n        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n        // order to focus another child of the monitored element.\n        const elementInfo = this._elementInfo.get(element);\n\n        if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n                element.contains(event.relatedTarget))) {\n            return;\n        }\n\n        this._setClasses(element);\n        elementInfo.subject.next(null);\n    }\n\n    /** A map of global objects to lists of current listeners. */\n    private _unregisterGlobalListeners = () => {};  // tslint:disable-line no-empty\n\n    /** Register necessary event listeners on the document and window. */\n    private _registerGlobalListeners() {\n        // Do nothing if we're not on the browser platform.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n\n        // On keydown record the origin and clear any touch event that may be in progress.\n        const documentKeydownListener = () => {\n            this._lastTouchTarget = null;\n            this._setOriginForCurrentEventQueue('keyboard');\n        };\n\n        // On mousedown record the origin only if there is not touch target, since a mousedown can\n        // happen as a result of a touch event.\n        const documentMousedownListener = () => {\n            if (!this._lastTouchTarget) {\n                this._setOriginForCurrentEventQueue('mouse');\n            }\n        };\n\n        // When the touchstart event fires the focus event is not yet in the event queue. This means\n        // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\n        // see if a focus happens.\n        const documentTouchstartListener = (event: TouchEvent) => {\n            if (this._touchTimeoutId != null) { clearTimeout(this._touchTimeoutId); }\n\n            this._lastTouchTarget = event.target;\n\n            this._touchTimeoutId = window.setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n        };\n\n        // Make a note of when the window regains focus, so we can restore the origin info for the\n        // focused element.\n        const windowFocusListener = () => {\n            this._windowFocused = true;\n\n            this._windowFocusTimeoutId = window.setTimeout(() => this._windowFocused = false, 0);\n        };\n\n        // Note: we listen to events in the capture phase so we can detect them even if the user stops\n        // propagation.\n        this._ngZone.runOutsideAngular(() => {\n            document.addEventListener('keydown', documentKeydownListener, true);\n            document.addEventListener('mousedown', documentMousedownListener, true);\n            document.addEventListener('touchstart', documentTouchstartListener,\n                supportsPassiveEventListeners() ? ({ passive: true, capture: true } as any) : true);\n            window.addEventListener('focus', windowFocusListener);\n        });\n\n        this._unregisterGlobalListeners = () => {\n            document.removeEventListener('keydown', documentKeydownListener, true);\n            document.removeEventListener('mousedown', documentMousedownListener, true);\n            document.removeEventListener('touchstart', documentTouchstartListener,\n                supportsPassiveEventListeners() ? ({ passive: true, capture: true } as any) : true);\n            window.removeEventListener('focus', windowFocusListener);\n\n            // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n            clearTimeout(this._windowFocusTimeoutId);\n            clearTimeout(this._touchTimeoutId);\n            clearTimeout(this._originTimeoutId);\n        };\n    }\n\n    private _toggleClass(element: Element, className: string, shouldSet: boolean) {\n        if (shouldSet) {\n            element.classList.add(className);\n        } else {\n            element.classList.remove(className);\n        }\n    }\n\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param element The element to update the classes on.\n     * @param origin The focus origin.\n     */\n    private _setClasses(element: HTMLElement, origin?: FocusOrigin): void {\n        const elementInfo = this._elementInfo.get(element);\n\n        if (elementInfo) {\n            this._toggleClass(element, 'cdk-focused', !!origin);\n            this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n            this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n            this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n            this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n        }\n    }\n\n    /**\n     * Sets the origin and schedules an async function to clear it at the end of the event queue.\n     * @param origin The origin to set.\n     */\n    private _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n        this._ngZone.runOutsideAngular(() => {\n            this._origin = origin;\n\n            this._originTimeoutId = window.setTimeout(() => this._origin = null);\n        });\n    }\n\n    /**\n     * Checks whether the given focus event was caused by a touchstart event.\n     * @param event The focus event to check.\n     * @returns Whether the event was caused by a touch.\n     */\n    private _wasCausedByTouch(event: FocusEvent): boolean {\n        // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n        // Consider the following dom structure:\n        //\n        // <div #parent tabindex=\"0\" cdkFocusClasses>\n        //   <div #child (click)=\"#parent.focus()\"></div>\n        // </div>\n        //\n        // If the user touches the #child element and the #parent is programmatically focused as a\n        // result, this code will still consider it to have been caused by the touch event and will\n        // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n        // relatively small edge-case that can be worked around by using\n        // focusVia(parentEl, 'program') to focus the parent element.\n        //\n        // If we decide that we absolutely must handle this case correctly, we can do so by listening\n        // for the first focus event after the touchstart, and then the first blur event after that\n        // focus event. When that blur event fires we know that whatever follows is not a result of the\n        // touchstart.\n        const focusTarget = event.target;\n\n        return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n            (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n    }\n\n    /**\n     * Handles focus events on a registered element.\n     * @param event The focus event.\n     * @param element The monitored element.\n     */\n    private _onFocus(event: FocusEvent, element: HTMLElement) {\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n        // focus event affecting the monitored element. If we want to use the origin of the first event\n        // instead we should check for the cdk-focused class here and return if the element already has\n        // it. (This only matters for elements that have includesChildren = true).\n\n        // If we are not counting child-element-focus as focused, make sure that the event target is the\n        // monitored element itself.\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {\n            return;\n        }\n\n        // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n        // 1) The window has just regained focus, in which case we want to restore the focused state of\n        //    the element from before the window blurred.\n        // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n        // 3) The element was programmatically focused, in which case we should mark the origin as\n        //    'program'.\n        let origin = this._origin;\n        if (!origin) {\n            if (this._windowFocused && this._lastFocusOrigin) {\n                origin = this._lastFocusOrigin;\n            } else if (this._wasCausedByTouch(event)) {\n                origin = 'touch';\n            } else {\n                origin = 'program';\n            }\n        }\n\n        this._setClasses(element, origin);\n        this._emitOrigin(elementInfo.subject, origin);\n        this._lastFocusOrigin = origin;\n    }\n\n    private _emitOrigin(subject: Subject<FocusOrigin>, origin: FocusOrigin) {\n        this._ngZone.run(() => subject.next(origin));\n    }\n\n    private _incrementMonitoredElementCount() {\n        // Register global listeners when first element is monitored.\n        if (++this._monitoredElementCount === 1) {\n            this._registerGlobalListeners();\n        }\n    }\n\n    private _decrementMonitoredElementCount() {\n        // Unregister global listeners when last element is unmonitored.\n        if (!--this._monitoredElementCount) {\n            this._unregisterGlobalListeners();\n            this._unregisterGlobalListeners = () => {};  // tslint:disable-line no-empty\n        }\n    }\n}\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n@Directive({\n    selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n})\nexport class CdkMonitorFocus implements OnDestroy {\n\n    @Output() cdkFocusChange = new EventEmitter<FocusOrigin>();\n\n    private _monitorSubscription: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        this._monitorSubscription = this._focusMonitor.monitor(\n            this._elementRef.nativeElement,\n            this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n            .subscribe((origin) => this.cdkFocusChange.emit(origin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n        this._monitorSubscription.unsubscribe();\n    }\n}\n\n/** @docs-private @deprecated */\nexport function FOCUS_MONITOR_PROVIDER_FACTORY(parentDispatcher: FocusMonitor, ngZone: NgZone, platform: Platform) {\n    return parentDispatcher || new FocusMonitor(ngZone, platform);\n}\n\n/** @docs-private */\nexport const FOCUS_MONITOR_PROVIDER = {\n    // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.\n    provide: FocusMonitor,\n    deps: [[new Optional(), new SkipSelf(), FocusMonitor], NgZone, Platform],\n    useFactory: FOCUS_MONITOR_PROVIDER_FACTORY\n};\n","const ID_DELIMINATOR = ' ';\n\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function addAriaReferencedId(el: Element, attr: string, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n\n  if (ids.some((existingId) => existingId.trim() === id.trim())) { return; }\n  ids.push(id.trim());\n\n  el.setAttribute(attr, ids.join(ID_DELIMINATOR));\n}\n\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function removeAriaReferencedId(el: Element, attr: string, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  const filteredIds = ids.filter((val) => val !== id.trim());\n\n  el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));\n}\n\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function getAriaReferenceIds(el: Element, attr: string): string[] {\n  // Get string array of all individual ids (whitespace deliminated) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n","import { QueryList } from '@angular/core';\nimport {\n    UP_ARROW,\n    DOWN_ARROW,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    TAB,\n    A,\n    Z,\n    ZERO,\n    NINE\n} from '@ptsecurity/cdk/keycodes';\nimport { Subject, Subscription } from 'rxjs';\nimport { debounceTime, filter, map, tap } from 'rxjs/operators';\n\n\n// This interface is for items that can be passed to a ListKeyManager.\n// tslint:disable-next-line naming-convention\nexport interface ListKeyManagerOption {\n    // Whether the option is disabled.\n    disabled?: boolean;\n\n    // Gets the label for this option.\n    getLabel?(): string;\n}\n\n/* tslint:disable:member-ordering */\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n    tabOut: Subject<void> = new Subject<void>();\n\n    /** Stream that emits whenever the active item of the list manager changes. */\n    change = new Subject<number>();\n\n    previousActiveItemIndex = -1;\n    private _activeItemIndex = -1;\n    private _activeItem: T;\n    private _wrap: boolean = false;\n    private _letterKeyStream = new Subject<string>();\n    private _typeaheadSubscription = Subscription.EMPTY;\n    private _vertical = true;\n    private _horizontal: 'ltr' | 'rtl' | null;\n\n    private _scrollSize: number = 0;\n\n    // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n    private _pressedLetters: string[] = [];\n\n    constructor(private _items: QueryList<T>) {\n        if (_items instanceof QueryList) {\n\n            _items.changes.subscribe((newItems: QueryList<T>) => {\n\n                if (this._activeItem) {\n                    const itemArray = newItems.toArray();\n                    const newIndex = itemArray.indexOf(this._activeItem);\n\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n\n    withScrollSize(scrollSize: number): this {\n        this._scrollSize = scrollSize;\n\n        return this;\n    }\n\n    /**\n     * Turns on wrapping mode, which ensures that the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     */\n\n    withWrap(): this {\n        this._wrap = true;\n\n        return this;\n    }\n\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled: boolean = true): this {\n        this._vertical = enabled;\n\n        return this;\n    }\n\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n        this._horizontal = direction;\n\n        return this;\n    }\n\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param searchLetterIndex letter index for incremental search, if is -1 search is disabled\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval: number = 200, searchLetterIndex: number = 0): this {\n        if (this._items.length && this._items.some((item) => typeof item.getLabel !== 'function')) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n\n        this._typeaheadSubscription.unsubscribe();\n\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters and convert those\n        // letters back into a string. Afterwards find the first item that starts with that string and select it.\n        this._typeaheadSubscription = this._letterKeyStream.pipe(\n            tap((keyCode) => this._pressedLetters.push(keyCode)),\n            debounceTime(debounceInterval),\n            filter(() => this._pressedLetters.length > 0),\n            map(() => this._pressedLetters.join(''))\n        ).subscribe((inputString) => {\n            if (searchLetterIndex === -1) {\n                this._pressedLetters = [];\n\n                return;\n            }\n\n            const items = this._items.toArray();\n\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                const index = (this._activeItemIndex + i) % items.length;\n                const item = items[index];\n\n                if (\n                    !item.disabled &&\n                    item.getLabel!().toUpperCase().trim().indexOf(inputString) === searchLetterIndex\n                ) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n\n            this._pressedLetters = [];\n        });\n\n        return this;\n    }\n\n    /**\n     * Sets the active item to the item at the index specified.\n     * @param index The index of the item to be set as active or item The item to be set as active.\n     */\n    setActiveItem(index: number | T): void;\n\n    /**\n     * Sets the active item to the item at the index specified.\n     * @param item The index of the item to be set as active.\n     */\n    setActiveItem(item: any): void {\n        this.previousActiveItemIndex = this._activeItemIndex;\n\n        this.updateActiveItem(item);\n\n        if (this._activeItemIndex !== this.previousActiveItemIndex) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    onKeydown(event: KeyboardEvent): void {\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n\n                return;\n\n            case DOWN_ARROW:\n                if (this._vertical) {\n                    this.setNextItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case UP_ARROW:\n                if (this._vertical) {\n                    this.setPreviousItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case RIGHT_ARROW:\n                if (this._horizontal === 'ltr') {\n                    this.setNextItemActive();\n                    break;\n                } else if (this._horizontal === 'rtl') {\n                    this.setPreviousItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case LEFT_ARROW:\n                if (this._horizontal === 'ltr') {\n                    this.setPreviousItemActive();\n                    break;\n                } else if (this._horizontal === 'rtl') {\n                    this.setNextItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            default:\n                // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                if (event.key && event.key.length === 1) {\n                    this._letterKeyStream.next(event.key.toLocaleUpperCase());\n                } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                    this._letterKeyStream.next(String.fromCharCode(keyCode));\n                }\n\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n\n        this._pressedLetters = [];\n        event.preventDefault();\n    }\n\n    // Index of the currently active item.\n    get activeItemIndex(): number {\n        return this._activeItemIndex;\n    }\n\n    // The active item.\n    get activeItem(): T | null {\n        return this._activeItem;\n    }\n\n    // Sets the active item to the first enabled item in the list.\n    setFirstItemActive(): void {\n        this._setActiveItemByIndex(0, 1);\n    }\n\n    // Sets the active item to the last enabled item in the list.\n    setLastItemActive(): void {\n        this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n\n    // Sets the active item to the next enabled item in the list.\n    setNextItemActive(): void {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n\n    // Sets the active item to a previous enabled item in the list.\n    setPreviousItemActive(): void {\n        this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\n            : this._setActiveItemByDelta(-1);\n    }\n\n    setNextPageItemActive(delta: number = this._scrollSize): void {\n        const nextItemIndex = this._activeItemIndex + delta;\n\n        if (nextItemIndex >= this._items.length) {\n            this.setLastItemActive();\n        } else {\n            this._setActiveItemByDelta(delta);\n        }\n    }\n\n    setPreviousPageItemActive(delta: number = this._scrollSize): void {\n        const nextItemIndex = this._activeItemIndex - delta;\n\n        if (nextItemIndex <= 0) {\n            this.setFirstItemActive();\n        } else {\n            this._setActiveItemByDelta(-delta);\n        }\n    }\n\n    /**\n     * Allows setting the active without any other effects.\n     * @param index Index of the item to be set as active.\n     */\n    updateActiveItem(index: number): void;\n\n    /**\n     * Allows setting the active item without any other effects.\n     * @param item Item to be set as active or index Index of the item to be set as active..\n     */\n    updateActiveItem(item: number | T): void;\n\n    updateActiveItem(item: any): void {\n        const itemArray = this._items.toArray();\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n\n        this._activeItemIndex = index;\n        this._activeItem = itemArray[index];\n    }\n\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n    private _skipPredicateFn = (item: T) => item.disabled;\n\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    private _setActiveItemByDelta(delta: number): void {\n        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    private _setActiveInWrapMode(delta: number): void {\n        const items = this._getItemsArray();\n\n        for (let i = 1; i <= items.length; i++) {\n            const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n            const item = items[index];\n\n            if (!this._skipPredicateFn(item)) {\n                this.setActiveItem(index);\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    private _setActiveInDefaultMode(delta: number): void {\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    private _setActiveItemByIndex(index: number, fallbackDelta: number): void {\n        const items = this._getItemsArray();\n\n        if (!items[index]) { return; }\n\n        let curIndex = index;\n        while (this._skipPredicateFn(items[curIndex])) {\n            curIndex += fallbackDelta;\n\n            if (!items[curIndex]) { return; }\n        }\n\n        this.setActiveItem(curIndex);\n    }\n\n    /** Returns the items as an array. */\n    private _getItemsArray(): T[] {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n\n/* tslint:enable:member-ordering */\n","\nimport { ListKeyManager, ListKeyManagerOption } from './list-key-manager';\n\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\n// tslint:disable-next-line naming-convention\nexport interface Highlightable extends ListKeyManagerOption {\n    // Applies the styles for an active item to this item.\n    setActiveStyles(): void;\n\n    // Applies the styles for an inactive item to this item.\n    setInactiveStyles(): void;\n}\n\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<Highlightable & T> {\n\n    /**\n     * Sets the active item to the item at the specified index and adds the\n     * active styles to the newly active item. Also removes active styles\n     * from the previously active item.\n     * @param index Index of the item to be set as active.\n     */\n    setActiveItem(index: number): void;\n\n    /**\n     * Sets the active item to the item to the specified one and adds the\n     * active styles to the it. Also removes active styles from the\n     * previously active item.\n     * @param item Item to be set as active.\n     */\n    setActiveItem(item: T): void;\n\n    /**\n     * This method sets the active item to the item at the specified index.\n     * It also adds active styles to the newly active item and removes active\n     * styles from the previously active item.\n     */\n    setActiveItem(index: any): void {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n\n        super.setActiveItem(index);\n\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n","import { FocusOrigin } from '../focus-monitor/focus-monitor';\n\nimport { ListKeyManager, ListKeyManagerOption } from './list-key-manager';\n\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply it's label.\n */\nexport interface IFocusableOption extends ListKeyManagerOption {\n    // Focuses the `FocusableOption`. */\n    focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<IFocusableOption & T> {\n    private _origin: FocusOrigin = 'program';\n\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin: FocusOrigin): this {\n        this._origin = origin;\n\n        return this;\n    }\n\n    /**\n     * Sets the active item or index to the item that is specified and focuses it.\n     * @param item Item to be set as active.\n     */\n    setActiveItem(item: number | T): void;\n\n    setActiveItem(item: any): void {\n        super.setActiveItem(item);\n\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    Inject,\n    Injectable,\n    OnDestroy\n} from '@angular/core';\nimport {of} from \"rxjs\";\n\nimport { addAriaReferencedId, getAriaReferenceIds, removeAriaReferencedId } from './aria-reference';\n\n\n/**\n * Interface used to register message elements and keep a count of how many registrations have\n * the sa me  messag'rxjs'the reference to the message element used for the `aria-describedby`.\n */\n// tslint:disable-next-line naming-convention\nexport interface RegisteredMessage {\n    /** The element containing the message. */\n    messageElement: Element;\n\n    /** The number of elements that reference this message element via `aria-describedby`. */\n    referenceCount: number;\n}\n\n/** ID used for the body container where all messages are appended. */\nexport const MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n\n/** ID prefix used for each created message element. */\nexport const CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n\n/** Attribute given to each host element that is described by a message element. */\nexport const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n\n/** Global map of all registered message elements that have been placed into the document. */\nconst messageRegistry = new Map<string, RegisteredMessage>();\n\n/** Container for all registered messages. */\nlet messagesContainer: HTMLElement | null = null;\n\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class AriaDescriber implements OnDestroy {\n    private _document: Document;\n\n    constructor(@Inject(DOCUMENT) _document: any) {\n        this._document = _document;\n    }\n\n    /**\n     * Adds to the host element an aria-describedby reference to a hidden element that contains\n     * the message. If the same message has already been registered, then it will reuse the created\n     * message element.\n     */\n    describe(hostElement: Element, message: string) {\n        if (!this._canBeDescribed(hostElement, message)) {\n            return;\n        }\n\n        if (!messageRegistry.has(message)) {\n            this._createMessageElement(message);\n        }\n\n        if (!this._isElementDescribedByMessage(hostElement, message)) {\n            this._addMessageReference(hostElement, message);\n        }\n    }\n\n    /** Removes the host element's aria-describedby reference to the message element. */\n    removeDescription(hostElement: Element, message: string) {\n        if (!this._isElementNode(hostElement)) {\n            return;\n        }\n\n        if (this._isElementDescribedByMessage(hostElement, message)) {\n            this._removeMessageReference(hostElement, message);\n        }\n\n        const registeredMessage = messageRegistry.get(message);\n        if (registeredMessage && registeredMessage.referenceCount === 0) {\n            this._deleteMessageElement(message);\n        }\n\n        if (messagesContainer && messagesContainer.childNodes.length === 0) {\n            this._deleteMessagesContainer();\n        }\n    }\n\n    /** Unregisters all created message elements and removes the message container. */\n    ngOnDestroy() {\n        const describedElements =\n            this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n\n        for (let i = 0; i < describedElements.length; i++) {\n            this._removeCdkDescribedByReferenceIds(describedElements[i]);\n            describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n        }\n\n        if (messagesContainer) {\n            this._deleteMessagesContainer();\n        }\n\n        messageRegistry.clear();\n    }\n\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     */\n    private _createMessageElement(message: string) {\n        const messageElement = this._document.createElement('div');\n        messageElement.setAttribute('id', `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`);\n        messageElement.appendChild(this._document.createTextNode(message));\n\n        this._createMessagesContainer();\n        messagesContainer!.appendChild(messageElement);\n\n        messageRegistry.set(message, {messageElement, referenceCount: 0});\n    }\n\n    /** Deletes the message element from the global messages container. */\n    private _deleteMessageElement(message: string) {\n        const registeredMessage = messageRegistry.get(message);\n        const messageElement = registeredMessage && registeredMessage.messageElement;\n        if (messagesContainer && messageElement) {\n            messagesContainer.removeChild(messageElement);\n        }\n        messageRegistry.delete(message);\n    }\n\n    /** Creates the global container for all aria-describedby messages. */\n    private _createMessagesContainer() {\n        if (!messagesContainer) {\n            const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);\n\n            // When going from the server to the client, we may end up in a situation where there's\n            // already a container on the page, but we don't have a reference to it. Clear the\n            // old container so we don't get duplicates. Doing this, instead of emptying the previous\n            // container, should be slightly faster.\n            if (preExistingContainer) {\n                preExistingContainer.parentNode!.removeChild(preExistingContainer);\n            }\n\n            messagesContainer = this._document.createElement('div');\n            messagesContainer.id = MESSAGES_CONTAINER_ID;\n            messagesContainer.setAttribute('aria-hidden', 'true');\n            messagesContainer.style.display = 'none';\n            this._document.body.appendChild(messagesContainer);\n        }\n    }\n\n    /** Deletes the global messages container. */\n    private _deleteMessagesContainer() {\n        if (messagesContainer && messagesContainer.parentNode) {\n            messagesContainer.parentNode.removeChild(messagesContainer);\n            messagesContainer = null;\n        }\n    }\n\n    /** Removes all cdk-describedby messages that are hosted through the element. */\n    private _removeCdkDescribedByReferenceIds(element: Element) {\n        // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n        const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\n            .filter((id) => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) !== 0);\n        element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     */\n    private _addMessageReference(element: Element, message: string) {\n        const registeredMessage = messageRegistry.get(message)!;\n\n        // Add the aria-describedby reference and set the\n        // describedby_host attribute to mark the element.\n        addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n\n        registeredMessage.referenceCount++;\n    }\n\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     */\n    private _removeMessageReference(element: Element, message: string) {\n        const registeredMessage = messageRegistry.get(message)!;\n        registeredMessage.referenceCount--;\n\n        removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n\n    /** Returns true if the element has been described by the provided message ID. */\n    private _isElementDescribedByMessage(element: Element, message: string): boolean {\n        const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n        const registeredMessage = messageRegistry.get(message);\n        const messageId = registeredMessage && registeredMessage.messageElement.id;\n\n        return !!messageId && referenceIds.indexOf(messageId) !== -1;\n    }\n\n    /** Determines whether a message can be described on a particular element. */\n    private _canBeDescribed(element: Element, message: string): boolean {\n        if (!this._isElementNode(element)) {\n            return false;\n        }\n\n        const trimmedMessage = message == null ? '' : `${message}`.trim();\n        const ariaLabel = element.getAttribute('aria-label');\n\n        // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the element,\n        // because screen readers will end up reading out the same text twice in a row.\n        return trimmedMessage ? (!ariaLabel || ariaLabel.trim() !== trimmedMessage) : false;\n    }\n\n    /** Checks whether a node is an Element node. */\n    private _isElementNode(element: Node): element is Element {\n        return element.nodeType === this._document.ELEMENT_NODE;\n    }\n}\n","import { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { CdkMonitorFocus, FOCUS_MONITOR_PROVIDER } from './focus-monitor/focus-monitor';\n\n\n@NgModule({\n  imports: [CommonModule, PlatformModule],\n  declarations: [CdkMonitorFocus],\n  exports: [CdkMonitorFocus],\n  providers: [\n    FOCUS_MONITOR_PROVIDER\n  ]\n})\nexport class A11yModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","FOCUS_MONITOR_PROVIDER_FACTORY","parentDispatcher","ngZone","platform","FocusMonitor","addAriaReferencedId","el","attr","id","ids","getAriaReferenceIds","some","existingId","trim","push","setAttribute","join","ID_DELIMINATOR","removeAriaReferencedId","filteredIds","filter","val","getAttribute","match","setPrototypeOf","__proto__","Array","p","hasOwnProperty","ListKeyManager","_items","_this","tabOut","Subject","change","previousActiveItemIndex","_activeItemIndex","_wrap","_letterKeyStream","_typeaheadSubscription","Subscription","EMPTY","_vertical","_scrollSize","_pressedLetters","_skipPredicateFn","item","disabled","QueryList","changes","subscribe","newItems","_activeItem","itemArray","toArray","newIndex","indexOf","withScrollSize","scrollSize","withWrap","withVerticalOrientation","enabled","withHorizontalOrientation","direction","_horizontal","withTypeAhead","debounceInterval","searchLetterIndex","length","getLabel","Error","unsubscribe","pipe","tap","keyCode","debounceTime","map","inputString","items","i","index","toUpperCase","setActiveItem","updateActiveItem","next","onKeydown","event","TAB","DOWN_ARROW","setNextItemActive","UP_ARROW","setPreviousItemActive","RIGHT_ARROW","LEFT_ARROW","key","toLocaleUpperCase","A","Z","ZERO","NINE","String","fromCharCode","preventDefault","defineProperty","setFirstItemActive","_setActiveItemByIndex","setLastItemActive","_setActiveItemByDelta","setNextPageItemActive","delta","setPreviousPageItemActive","_setActiveInWrapMode","_setActiveInDefaultMode","_getItemsArray","fallbackDelta","curIndex","ActiveDescendantKeyManager","tslib_1.__extends","_super","activeItem","setInactiveStyles","call","setActiveStyles","FocusKeyManager","apply","arguments","_origin","setFocusOrigin","origin","focus","_ngZone","_platform","_windowFocused","_elementInfo","Map","_monitoredElementCount","_unregisterGlobalListeners","monitor","element","checkChildren","isBrowser","observableOf","has","cachedInfo","get","subject","asObservable","info","unlisten","set","_incrementMonitoredElementCount","focusListener","_onFocus","blurListener","_onBlur","runOutsideAngular","addEventListener","removeEventListener","stopMonitoring","elementInfo","complete","_setClasses","delete","_decrementMonitoredElementCount","focusVia","_setOriginForCurrentEventQueue","ngOnDestroy","forEach","_info","relatedTarget","Node","contains","_registerGlobalListeners","documentKeydownListener","_lastTouchTarget","documentMousedownListener","documentTouchstartListener","_touchTimeoutId","clearTimeout","target","window","setTimeout","windowFocusListener","_windowFocusTimeoutId","document","supportsPassiveEventListeners","passive","capture","_originTimeoutId","_toggleClass","className","shouldSet","classList","add","remove","_wasCausedByTouch","focusTarget","_lastFocusOrigin","_emitOrigin","run","type","Injectable","args","providedIn","NgZone","Platform","CdkMonitorFocus","_elementRef","_focusMonitor","cdkFocusChange","EventEmitter","_monitorSubscription","nativeElement","hasAttribute","emit","Directive","selector","ElementRef","Output","FOCUS_MONITOR_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","nextId","messageRegistry","messagesContainer","AriaDescriber","_document","describe","hostElement","message","_canBeDescribed","_createMessageElement","_isElementDescribedByMessage","_addMessageReference","removeDescription","_isElementNode","_removeMessageReference","registeredMessage","referenceCount","_deleteMessageElement","childNodes","_deleteMessagesContainer","describedElements","querySelectorAll","_removeCdkDescribedByReferenceIds","removeAttribute","clear","messageElement","createElement","CDK_DESCRIBEDBY_ID_PREFIX","appendChild","createTextNode","_createMessagesContainer","removeChild","preExistingContainer","getElementById","style","display","body","parentNode","originalReferenceIds","referenceIds","messageId","trimmedMessage","ariaLabel","nodeType","ELEMENT_NODE","undefined","decorators","Inject","DOCUMENT","A11yModule","NgModule","imports","CommonModule","PlatformModule","declarations","exports","providers"],"mappings":"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"}