{"version":3,"file":"cdk-a11y.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/cdk/a11y/focus-monitor/focus-monitor.ts","../../src/cdk/a11y/key-manager/list-key-manager.ts","../../src/cdk/a11y/key-manager/activedescendant-key-manager.ts","../../src/cdk/a11y/key-manager/focus-key-manager.ts","../../src/cdk/a11y/a11y-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Injectable,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    Renderer2,\n    SkipSelf\n} from '@angular/core';\n\nimport { Observable, Subject, Subscription, of as observableOf } from 'rxjs';\n\nimport { Platform, supportsPassiveEventListeners } from '@ptsecurity/cdk/platform';\n\n\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n\ntype MonitoredElementInfo = {\n    unlisten: Function,\n    checkChildren: boolean,\n    subject: Subject<FocusOrigin>\n};\n\n\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\n@Injectable()\nexport class FocusMonitor implements OnDestroy {\n    /** The focus origin that the next focus event is a result of. */\n    private _origin: FocusOrigin = null;\n\n    /** The FocusOrigin of the last focus event tracked by the FocusMonitor. */\n    private _lastFocusOrigin: FocusOrigin;\n\n    /** Whether the window has just been focused. */\n    private _windowFocused = false;\n\n    /** The target of the last touch event. */\n    private _lastTouchTarget: EventTarget | null;\n\n    /** The timeout id of the touch timeout, used to cancel timeout later. */\n    private _touchTimeoutId: number;\n\n    /** The timeout id of the window focus timeout. */\n    private _windowFocusTimeoutId: number;\n\n    /** The timeout id of the origin clearing timeout. */\n    private _originTimeoutId: number;\n\n    /** Map of elements being monitored to their info. */\n    private _elementInfo = new Map<HTMLElement, MonitoredElementInfo>();\n\n    /** A map of global objects to lists of current listeners. */\n    private _unregisterGlobalListeners = () => {};\n\n    /** The number of elements currently being monitored. */\n    private _monitoredElementCount = 0;\n\n    constructor(private _ngZone: NgZone, private _platform: Platform) {}\n\n    /**\n     * @docs-private\n     * @deprecated renderer param no longer needed.\n     * @deletion-target 6.0.0\n     */\n    monitor(element: HTMLElement, renderer: Renderer2, checkChildren: boolean): Observable<FocusOrigin>;\n    /**\n     * Monitors focus on an element and applies appropriate CSS classes.\n     * @param element The element to monitor\n     * @param checkChildren Whether to count the element as focused when its children are focused.\n     * @returns An observable that emits when the focus state of the element changes.\n     *     When the element is blurred, null will be emitted.\n     */\n    monitor(element: HTMLElement, checkChildren?: boolean): Observable<FocusOrigin>;\n\n    monitor(element: HTMLElement, renderer?: Renderer2 | boolean, checkChildren?: boolean): Observable<FocusOrigin> {\n        // TODO(mmalerba): clean up after deprecated signature is removed.\n        if (!(renderer instanceof Renderer2)) {\n            checkChildren = renderer;\n        }\n\n        checkChildren = !!checkChildren;\n\n        if (!this._platform.isBrowser) { return observableOf(null); }\n\n        // Check if we're already monitoring this element.\n        if (this._elementInfo.has(element)) {\n            let cachedInfo = this._elementInfo.get(element);\n            cachedInfo!.checkChildren = checkChildren;\n            return cachedInfo!.subject.asObservable();\n        }\n\n        // Create monitored element info.\n        let info: MonitoredElementInfo = {\n            unlisten: () => {\n            },\n            checkChildren: checkChildren,\n            subject: new Subject<FocusOrigin>()\n        };\n        this._elementInfo.set(element, info);\n        this._incrementMonitoredElementCount();\n\n        // Start listening. We need to listen in capture phase since focus events don't bubble.\n        let focusListener = (event: FocusEvent) => this._onFocus(event, element);\n        let blurListener = (event: FocusEvent) => this._onBlur(event, element);\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('focus', focusListener, true);\n            element.addEventListener('blur', blurListener, true);\n        });\n\n        // Create an unlisten function for later.\n        info.unlisten = () => {\n            element.removeEventListener('focus', focusListener, true);\n            element.removeEventListener('blur', blurListener, true);\n        };\n\n        return info.subject.asObservable();\n    }\n\n    /**\n     * Stops monitoring an element and removes all focus classes.\n     * @param element The element to stop monitoring.\n     */\n    stopMonitoring(element: HTMLElement): void {\n        const elementInfo = this._elementInfo.get(element);\n\n        if (elementInfo) {\n            elementInfo.unlisten();\n            elementInfo.subject.complete();\n\n            this._setClasses(element);\n            this._elementInfo.delete(element);\n            this._decrementMonitoredElementCount();\n        }\n    }\n\n    /**\n     * Focuses the element via the specified focus origin.\n     * @param element The element to focus.\n     * @param origin The focus origin.\n     */\n    focusVia(element: HTMLElement, origin: FocusOrigin): void {\n        this._setOriginForCurrentEventQueue(origin);\n        element.focus();\n    }\n\n    ngOnDestroy() {\n        this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n    }\n\n    /** Register necessary event listeners on the document and window. */\n    private _registerGlobalListeners() {\n        // Do nothing if we're not on the browser platform.\n        if (!this._platform.isBrowser) { return; }\n\n        // On keydown record the origin and clear any touch event that may be in progress.\n        let documentKeydownListener = () => {\n            this._lastTouchTarget = null;\n            this._setOriginForCurrentEventQueue('keyboard');\n        };\n\n        // On mousedown record the origin only if there is not touch target, since a mousedown can\n        // happen as a result of a touch event.\n        let documentMousedownListener = () => {\n            if (!this._lastTouchTarget) {\n                this._setOriginForCurrentEventQueue('mouse');\n            }\n        };\n\n        // When the touchstart event fires the focus event is not yet in the event queue. This means\n        // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\n        // see if a focus happens.\n        let documentTouchstartListener = (event: TouchEvent) => {\n            if (this._touchTimeoutId != null) {\n                clearTimeout(this._touchTimeoutId);\n            }\n            this._lastTouchTarget = event.target;\n            this._touchTimeoutId = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n        };\n\n        // Make a note of when the window regains focus, so we can restore the origin info for the\n        // focused element.\n        let windowFocusListener = () => {\n            this._windowFocused = true;\n            this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false, 0);\n        };\n\n        // Note: we listen to events in the capture phase so we can detect them even if the user stops\n        // propagation.\n        this._ngZone.runOutsideAngular(() => {\n            document.addEventListener('keydown', documentKeydownListener, true);\n            document.addEventListener('mousedown', documentMousedownListener, true);\n            document.addEventListener('touchstart', documentTouchstartListener,\n                supportsPassiveEventListeners() ? ({ passive: true, capture: true } as any) : true);\n            window.addEventListener('focus', windowFocusListener);\n        });\n\n        this._unregisterGlobalListeners = () => {\n            document.removeEventListener('keydown', documentKeydownListener, true);\n            document.removeEventListener('mousedown', documentMousedownListener, true);\n            document.removeEventListener('touchstart', documentTouchstartListener,\n                supportsPassiveEventListeners() ? ({ passive: true, capture: true } as any) : true);\n            window.removeEventListener('focus', windowFocusListener);\n\n            // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n            clearTimeout(this._windowFocusTimeoutId);\n            clearTimeout(this._touchTimeoutId);\n            clearTimeout(this._originTimeoutId);\n        };\n    }\n\n    private _toggleClass(element: Element, className: string, shouldSet: boolean) {\n        if (shouldSet) {\n            element.classList.add(className);\n        } else {\n            element.classList.remove(className);\n        }\n    }\n\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param element The element to update the classes on.\n     * @param origin The focus origin.\n     */\n    private _setClasses(element: HTMLElement, origin?: FocusOrigin): void {\n        const elementInfo = this._elementInfo.get(element);\n\n        if (elementInfo) {\n            this._toggleClass(element, 'cdk-focused', !!origin);\n            this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n            this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n            this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n            this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n        }\n    }\n\n    /**\n     * Sets the origin and schedules an async function to clear it at the end of the event queue.\n     * @param origin The origin to set.\n     */\n    private _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n        this._origin = origin;\n        this._originTimeoutId = setTimeout(() => this._origin = null, 0);\n    }\n\n    /**\n     * Checks whether the given focus event was caused by a touchstart event.\n     * @param event The focus event to check.\n     * @returns Whether the event was caused by a touch.\n     */\n    private _wasCausedByTouch(event: FocusEvent): boolean {\n        // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n        // Consider the following dom structure:\n        //\n        // <div #parent tabindex=\"0\" cdkFocusClasses>\n        //   <div #child (click)=\"#parent.focus()\"></div>\n        // </div>\n        //\n        // If the user touches the #child element and the #parent is programmatically focused as a\n        // result, this code will still consider it to have been caused by the touch event and will\n        // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n        // relatively small edge-case that can be worked around by using\n        // focusVia(parentEl, 'program') to focus the parent element.\n        //\n        // If we decide that we absolutely must handle this case correctly, we can do so by listening\n        // for the first focus event after the touchstart, and then the first blur event after that\n        // focus event. When that blur event fires we know that whatever follows is not a result of the\n        // touchstart.\n        let focusTarget = event.target;\n        return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n            (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n    }\n\n    /**\n     * Handles focus events on a registered element.\n     * @param event The focus event.\n     * @param element The monitored element.\n     */\n    private _onFocus(event: FocusEvent, element: HTMLElement) {\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n        // focus event affecting the monitored element. If we want to use the origin of the first event\n        // instead we should check for the cdk-focused class here and return if the element already has\n        // it. (This only matters for elements that have includesChildren = true).\n\n        // If we are not counting child-element-focus as focused, make sure that the event target is the\n        // monitored element itself.\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {\n            return;\n        }\n\n        // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n        // 1) The window has just regained focus, in which case we want to restore the focused state of\n        //    the element from before the window blurred.\n        // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n        // 3) The element was programmatically focused, in which case we should mark the origin as\n        //    'program'.\n        if (!this._origin) {\n            if (this._windowFocused && this._lastFocusOrigin) {\n                this._origin = this._lastFocusOrigin;\n            } else if (this._wasCausedByTouch(event)) {\n                this._origin = 'touch';\n            } else {\n                this._origin = 'program';\n            }\n        }\n\n        this._setClasses(element, this._origin);\n        elementInfo.subject.next(this._origin);\n        this._lastFocusOrigin = this._origin;\n        this._origin = null;\n    }\n\n    /**\n     * Handles blur events on a registered element.\n     * @param event The blur event.\n     * @param element The monitored element.\n     */\n    _onBlur(event: FocusEvent, element: HTMLElement) {\n        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n        // order to focus another child of the monitored element.\n        const elementInfo = this._elementInfo.get(element);\n\n        if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n                element.contains(event.relatedTarget))) {\n            return;\n        }\n\n        this._setClasses(element);\n        elementInfo.subject.next(null);\n    }\n\n    private _incrementMonitoredElementCount() {\n        // Register global listeners when first element is monitored.\n        if (++this._monitoredElementCount === 1) {\n            this._registerGlobalListeners();\n        }\n    }\n\n    private _decrementMonitoredElementCount() {\n        // Unregister global listeners when last element is unmonitored.\n        if (!--this._monitoredElementCount) {\n            this._unregisterGlobalListeners();\n            this._unregisterGlobalListeners = () => {};\n        }\n    }\n}\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n@Directive({\n    selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n})\nexport class CdkMonitorFocus implements OnDestroy {\n    private _monitorSubscription: Subscription;\n    @Output() cdkFocusChange = new EventEmitter<FocusOrigin>();\n\n    constructor(private _elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        this._monitorSubscription = this._focusMonitor.monitor(\n            this._elementRef.nativeElement,\n            this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n            .subscribe(origin => this.cdkFocusChange.emit(origin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n        this._monitorSubscription.unsubscribe();\n    }\n}\n\n/** @docs-private */\nexport function FOCUS_MONITOR_PROVIDER_FACTORY(parentDispatcher: FocusMonitor, ngZone: NgZone, platform: Platform) {\n    return parentDispatcher || new FocusMonitor(ngZone, platform);\n}\n\n/** @docs-private */\nexport const FOCUS_MONITOR_PROVIDER = {\n    // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.\n    provide: FocusMonitor,\n    deps: [[new Optional(), new SkipSelf(), FocusMonitor], NgZone, Platform],\n    useFactory: FOCUS_MONITOR_PROVIDER_FACTORY\n};\n","import { QueryList } from '@angular/core';\n\nimport { Subject, Subscription } from 'rxjs';\nimport { debounceTime, filter, map, tap } from 'rxjs/operators';\n\nimport {\n    UP_ARROW,\n    DOWN_ARROW,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    TAB,\n    A,\n    Z,\n    ZERO,\n    NINE\n} from '@ptsecurity/cdk/keycodes';\n\n\n// This interface is for items that can be passed to a ListKeyManager.\nexport interface IListKeyManagerOption {\n    // Whether the option is disabled.\n    disabled?: boolean;\n\n    // Gets the label for this option.\n    getLabel?(): string;\n}\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends IListKeyManagerOption> {\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n    tabOut: Subject<void> = new Subject<void>();\n\n    /** Stream that emits whenever the active item of the list manager changes. */\n    change = new Subject<number>();\n\n    private _activeItemIndex = -1;\n    private _activeItem: T;\n    private _wrap: boolean = false;\n    private _scrollSize: number = 0;\n    private _letterKeyStream = new Subject<string>();\n    private _typeaheadSubscription = Subscription.EMPTY;\n    private _vertical = true;\n    private _horizontal: 'ltr' | 'rtl' | null;\n\n    // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n    private _pressedLetters: string[] = [];\n\n    constructor(private _items: QueryList<T>) {\n        _items.changes.subscribe((newItems: QueryList<T>) => {\n            if (this._activeItem) {\n                const itemArray = newItems.toArray();\n                const newIndex = itemArray.indexOf(this._activeItem);\n\n                if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                    this._activeItemIndex = newIndex;\n                }\n            }\n        });\n    }\n\n    /**\n     * Turns on wrapping mode, which ensures that the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     */\n    withWrap(): this {\n        this._wrap = true;\n\n        return this;\n    }\n\n    setScrollSize(size: number): this {\n        this._scrollSize = size;\n\n        return this;\n    }\n\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled: boolean = true): this {\n        this._vertical = enabled;\n\n        return this;\n    }\n\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n        this._horizontal = direction;\n\n        return this;\n    }\n\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval: number = 200): this {\n        if (this._items.length && this._items.some(item => typeof item.getLabel !== 'function')) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n\n        this._typeaheadSubscription.unsubscribe();\n\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters and convert those\n        // letters back into a string. Afterwards find the first item that starts with that string and select it.\n        this._typeaheadSubscription = this._letterKeyStream.pipe(\n            tap((keyCode) => this._pressedLetters.push(keyCode)),\n            debounceTime(debounceInterval),\n            filter(() => this._pressedLetters.length > 0),\n            map(() => this._pressedLetters.join(''))\n        ).subscribe((inputString) => {\n            const items = this._items.toArray();\n\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                const index = (this._activeItemIndex + i) % items.length;\n                const item = items[index];\n\n                if (!item.disabled && item.getLabel!().toUpperCase().trim().indexOf(inputString) === 0) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n\n            this._pressedLetters = [];\n        });\n\n        return this;\n    }\n\n    /**\n     * Sets the active item to the item at the index specified.\n     * @param index The index of the item to be set as active.\n     */\n    setActiveItem(index: number): void {\n        const previousIndex = this._activeItemIndex;\n\n        this._activeItemIndex = index;\n        this._activeItem = this._items.toArray()[index];\n\n        if (this._activeItemIndex !== previousIndex) {\n            this.change.next(index);\n        }\n    }\n\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    onKeydown(event: KeyboardEvent): void {\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n\n                return;\n\n            case DOWN_ARROW:\n                if (this._vertical) {\n                    this.setNextItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case UP_ARROW:\n                if (this._vertical) {\n                    this.setPreviousItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case RIGHT_ARROW:\n                if (this._horizontal === 'ltr') {\n                    this.setNextItemActive();\n                    break;\n                } else if (this._horizontal === 'rtl') {\n                    this.setPreviousItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case LEFT_ARROW:\n                if (this._horizontal === 'ltr') {\n                    this.setPreviousItemActive();\n                    break;\n                } else if (this._horizontal === 'rtl') {\n                    this.setNextItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            default:\n                // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                if (event.key && event.key.length === 1) {\n                    this._letterKeyStream.next(event.key.toLocaleUpperCase());\n                } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                    this._letterKeyStream.next(String.fromCharCode(keyCode));\n                }\n\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n\n        this._pressedLetters = [];\n        event.preventDefault();\n    }\n\n    // Index of the currently active item.\n    get activeItemIndex(): number | null {\n        return this._activeItemIndex;\n    }\n\n    // The active item.\n    get activeItem(): T | null {\n        return this._activeItem;\n    }\n\n    // Sets the active item to the first enabled item in the list.\n    setFirstItemActive(): void {\n        this._setActiveItemByIndex(0, 1);\n    }\n\n    // Sets the active item to the last enabled item in the list.\n    setLastItemActive(): void {\n        this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n\n    // Sets the active item to the next enabled item in the list.\n    setNextItemActive(): void {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n\n    // Sets the active item to a previous enabled item in the list.\n    setPreviousItemActive(): void {\n        this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\n            : this._setActiveItemByDelta(-1);\n    }\n\n    setNextPageItemActive(): void {\n        const nextItemIndex = this._activeItemIndex + this._scrollSize;\n\n        if (nextItemIndex >= this._items.length) {\n            this.setLastItemActive();\n        } else {\n            this._setActiveItemByDelta(this._scrollSize);\n        }\n    }\n\n    setPreviousPageItemActive(): void {\n        const nextItemIndex = this._activeItemIndex - this._scrollSize;\n\n        if (nextItemIndex <= 0) {\n            this.setFirstItemActive();\n        } else {\n            this._setActiveItemByDelta(-this._scrollSize);\n        }\n    }\n\n    /**\n     * Allows setting of the activeItemIndex without any other effects.\n     * @param index The new activeItemIndex.\n     */\n    updateActiveItemIndex(index: number) {\n        this._activeItemIndex = index;\n    }\n\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    private _setActiveItemByDelta(delta: number, items = this._items.toArray()): void {\n        this._wrap ? this._setActiveInWrapMode(delta, items)\n            : this._setActiveInDefaultMode(delta, items);\n    }\n\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    private _setActiveInWrapMode(delta: number, items: T[]): void {\n        // when active item would leave menu, wrap to beginning or end\n        this._activeItemIndex =\n            (this._activeItemIndex + delta + items.length) % items.length;\n\n        // skip all disabled menu items recursively until an enabled one is reached\n        if (items[this._activeItemIndex].disabled) {\n            this._setActiveInWrapMode(delta, items);\n        } else {\n            this.setActiveItem(this._activeItemIndex);\n        }\n    }\n\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    private _setActiveInDefaultMode(delta: number, items: T[]): void {\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta, items);\n    }\n\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    private _setActiveItemByIndex(_index: number, fallbackDelta: number, items = this._items.toArray()): void {\n        let index = _index;\n\n        if (!items[index]) { return; }\n\n        while (items[index].disabled) {\n            index += fallbackDelta;\n\n            if (!items[index]) { return; }\n        }\n\n        this.setActiveItem(index);\n    }\n}\n","\nimport { ListKeyManager, IListKeyManagerOption } from './list-key-manager';\n\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface IHighlightable extends IListKeyManagerOption {\n    // Applies the styles for an active item to this item.\n    setActiveStyles(): void;\n\n    // Applies the styles for an inactive item to this item.\n    setInactiveStyles(): void;\n}\n\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<IHighlightable & T> {\n\n    /**\n     * This method sets the active item to the item at the specified index.\n     * It also adds active styles to the newly active item and removes active\n     * styles from the previously active item.\n     */\n    setActiveItem(index: number): void {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n        super.setActiveItem(index);\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n\n}\n","import { FocusOrigin } from '../focus-monitor/focus-monitor';\n\nimport { ListKeyManager, IListKeyManagerOption } from './list-key-manager';\n\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply it's label.\n */\nexport interface IFocusableOption extends IListKeyManagerOption {\n    // Focuses the `FocusableOption`. */\n    focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<IFocusableOption & T> {\n    private _origin: FocusOrigin = 'program';\n\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin: FocusOrigin): this {\n        this._origin = origin;\n\n        return this;\n    }\n\n    /**\n     * This method sets the active item to the item at the specified index.\n     * It also adds focuses the newly active item.\n     */\n    setActiveItem(index: number): void {\n        super.setActiveItem(index);\n\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n","\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {CdkMonitorFocus, FOCUS_MONITOR_PROVIDER} from './focus-monitor/focus-monitor';\nimport {PlatformModule} from '@ptsecurity/cdk/platform';\n\n\n@NgModule({\n  imports: [CommonModule, PlatformModule],\n  declarations: [CdkMonitorFocus],\n  exports: [CdkMonitorFocus],\n  providers: [\n    FOCUS_MONITOR_PROVIDER,\n  ]\n})\nexport class A11yModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","FOCUS_MONITOR_PROVIDER_FACTORY","parentDispatcher","ngZone","platform","FocusMonitor","setPrototypeOf","__proto__","Array","p","hasOwnProperty","ListKeyManager","_items","_this","tabOut","Subject","change","_activeItemIndex","_wrap","_scrollSize","_letterKeyStream","_typeaheadSubscription","Subscription","EMPTY","_vertical","_pressedLetters","changes","subscribe","newItems","_activeItem","itemArray","toArray","newIndex","indexOf","withWrap","setScrollSize","size","withVerticalOrientation","enabled","withHorizontalOrientation","direction","_horizontal","withTypeAhead","debounceInterval","length","some","item","getLabel","Error","unsubscribe","pipe","tap","keyCode","push","debounceTime","filter","map","join","inputString","items","i","index","disabled","toUpperCase","trim","setActiveItem","previousIndex","next","onKeydown","event","TAB","DOWN_ARROW","setNextItemActive","UP_ARROW","setPreviousItemActive","RIGHT_ARROW","LEFT_ARROW","key","toLocaleUpperCase","A","Z","ZERO","NINE","String","fromCharCode","preventDefault","defineProperty","setFirstItemActive","_setActiveItemByIndex","setLastItemActive","_setActiveItemByDelta","setNextPageItemActive","setPreviousPageItemActive","updateActiveItemIndex","delta","_setActiveInWrapMode","_setActiveInDefaultMode","_index","fallbackDelta","ActiveDescendantKeyManager","_super","tslib_1.__extends","activeItem","setInactiveStyles","call","setActiveStyles","FocusKeyManager","_origin","setFocusOrigin","origin","focus","_ngZone","_platform","_windowFocused","_elementInfo","Map","_unregisterGlobalListeners","_monitoredElementCount","monitor","element","renderer","checkChildren","Renderer2","isBrowser","observableOf","has","cachedInfo","get","subject","asObservable","info","unlisten","set","_incrementMonitoredElementCount","focusListener","_onFocus","blurListener","_onBlur","runOutsideAngular","addEventListener","removeEventListener","stopMonitoring","elementInfo","complete","_setClasses","delete","_decrementMonitoredElementCount","focusVia","_setOriginForCurrentEventQueue","ngOnDestroy","forEach","_info","_registerGlobalListeners","documentKeydownListener","_lastTouchTarget","documentMousedownListener","documentTouchstartListener","_touchTimeoutId","clearTimeout","target","setTimeout","windowFocusListener","_windowFocusTimeoutId","document","supportsPassiveEventListeners","passive","capture","window","_originTimeoutId","_toggleClass","className","shouldSet","classList","add","remove","_wasCausedByTouch","focusTarget","Node","contains","_lastFocusOrigin","relatedTarget","type","Injectable","NgZone","Platform","CdkMonitorFocus","_elementRef","_focusMonitor","cdkFocusChange","EventEmitter","_monitorSubscription","nativeElement","hasAttribute","emit","Directive","args","selector","ElementRef","Output","FOCUS_MONITOR_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","NgModule","imports","CommonModule","PlatformModule","declarations","exports","providers","A11yModule"],"mappings":"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"}