{"version":3,"file":"cdk-collections.umd.min.js","sources":["../../src/cdk/collections/selection.ts"],"sourcesContent":["\nimport { Subject } from 'rxjs/Subject';\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nexport class SelectionModel<T> {\n    /** Currently-selected values. */\n    private _selection: Set<T> = new Set();\n\n    /** Keeps track of the deselected options that haven't been emitted by the change event. */\n    private _deselectedToEmit: T[] = [];\n\n    /** Keeps track of the selected options that haven't been emitted by the change event. */\n    private _selectedToEmit: T[] = [];\n\n    /** Cache for the array value of the selected items. */\n    private _selected: T[] | null;\n\n    /** Selected values. */\n    get selected(): T[] {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n\n        return this._selected;\n    }\n\n    /** Event emitted when the value has changed. */\n    onChange: Subject<SelectionChange<T>> | null = this._emitChanges ? new Subject() : null;\n\n    constructor(private _multiple = false,\n                initiallySelectedValues?: T[],\n                private _emitChanges = true) {\n\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(value => this._markSelected(value));\n            } else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n\n    /**\n     * Selects a value or an array of values.\n     */\n    select(...values: T[]): void {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._markSelected(value));\n        this._emitChangeEvent();\n    }\n\n    /**\n     * Deselects a value or an array of values.\n     */\n    deselect(...values: T[]): void {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._unmarkSelected(value));\n        this._emitChangeEvent();\n    }\n\n    /**\n     * Toggles a value between selected and deselected.\n     */\n    toggle(value: T): void {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n\n    /**\n     * Clears all of the selected values.\n     */\n    clear(): void {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    }\n\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value: T): boolean {\n        return this._selection.has(value);\n    }\n\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty(): boolean {\n        return this._selection.size === 0;\n    }\n\n    /**\n     * Determines whether the model has a value.\n     */\n    hasValue(): boolean {\n        return !this.isEmpty();\n    }\n\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate?: (a: T, b: T) => number): void {\n        if (this._multiple && this._selected) {\n            this._selected.sort(predicate);\n        }\n    }\n\n    /** Emits a change event and clears the records of selected and deselected values. */\n    private _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            const eventData = new SelectionChange<T>(this, this._selectedToEmit, this._deselectedToEmit);\n\n            if (this.onChange) {\n                this.onChange.next(eventData);\n            }\n\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n\n    /** Selects a value. */\n    private _markSelected(value: T) {\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n\n            this._selection.add(value);\n\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n\n    /** Deselects a value. */\n    private _unmarkSelected(value: T) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n\n    /** Clears out the selected values. */\n    private _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach(value => this._unmarkSelected(value));\n        }\n    }\n\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    private _verifyValueAssignment(values: T[]) {\n        if (values.length > 1 && !this._multiple) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n}\n\n/**\n * Event emitted when the value of a MatSelectionModel has changed.\n * @docs-private\n */\nexport class SelectionChange<T> {\n    constructor(/** Model that dispatched the event. */\n                public source: SelectionModel<T>,\n                /** Options that were added to the model. */\n                public added?: T[],\n                /** Options that were removed from the model. */\n                public removed?: T[]) {\n    }\n}\n\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n */\nexport function getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n"],"names":["getMultipleValuesInSingleSelectionError","Error","SelectionModel","_multiple","initiallySelectedValues","_emitChanges","_this","this","_selection","Set","_deselectedToEmit","_selectedToEmit","onChange","Subject","length","forEach","value","_markSelected","Object","defineProperty","prototype","_selected","Array","from","values","select","_i","arguments","_verifyValueAssignment","_emitChangeEvent","deselect","_unmarkSelected","toggle","isSelected","clear","_unmarkAll","has","isEmpty","size","hasValue","sort","predicate","eventData","SelectionChange","next","add","push","delete","source","added","removed"],"mappings":"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"}