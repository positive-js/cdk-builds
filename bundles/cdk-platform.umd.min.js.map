{"version":3,"file":"cdk-platform.umd.min.js","sources":["../../src/cdk/platform/features.ts","../../src/cdk/platform/platform.ts","../../src/cdk/platform/platform-module.ts"],"sourcesContent":["\n/** Cached result of whether the user's browser supports passive event listeners. */\nlet supportsPassiveEvents: boolean;\n\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n */\nexport function supportsPassiveEventListeners(): boolean {\n    if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n        try {\n            window.addEventListener('test', null!, Object.defineProperty({}, 'passive', {\n                get: () => supportsPassiveEvents = true\n            }));\n        } finally {\n            supportsPassiveEvents = supportsPassiveEvents || false;\n        }\n    }\n\n    return supportsPassiveEvents;\n}\n\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes: Set<string>;\n\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n    // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n    // first changing it to something else:\n    // The specified value \"\" does not conform to the required format.\n    // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n    'color',\n    'button',\n    'checkbox',\n    'date',\n    'datetime-local',\n    'email',\n    'file',\n    'hidden',\n    'image',\n    'month',\n    'number',\n    'password',\n    'radio',\n    'range',\n    'reset',\n    'search',\n    'submit',\n    'tel',\n    'text',\n    'time',\n    'url',\n    'week',\n];\n\n/** @returns The input types supported by this browser. */\nexport function getSupportedInputTypes(): Set<string> {\n    // Result is cached.\n    if (supportedInputTypes) {\n        return supportedInputTypes;\n    }\n\n    // We can't check if an input type is not supported until we're on the browser, so say that\n    // everything is supported when not on the browser. We don't use `Platform` here since it's\n    // just a helper function and can't inject it.\n    if (typeof document !== 'object' || !document) {\n        supportedInputTypes = new Set(candidateInputTypes);\n        return supportedInputTypes;\n    }\n\n    let featureTestInput = document.createElement('input');\n    supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n        featureTestInput.setAttribute('type', value);\n        return featureTestInput.type === value;\n    }));\n\n    return supportedInputTypes;\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, Optional, PLATFORM_ID } from '@angular/core';\n\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nconst hasV8BreakIterator = (typeof Intl !== 'undefined' && (Intl as any).v8BreakIterator);\n\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\n@Injectable({providedIn: 'root'})\nexport class Platform {\n    /**\n     * Whether the Angular application is being rendered in the browser.\n     * We want to use the Angular platform check because if the Document is shimmed\n     * without the navigator, the following checks will fail. This is preferred because\n     * sometimes the Document may be shimmed without the user's knowledge or intention\n     */\n    isBrowser: boolean = this._platformId ?\n        isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n\n    /** Whether the current browser is Microsoft Edge. */\n    EDGE: boolean = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n\n    /** Whether the current rendering engine is Microsoft Trident. */\n    TRIDENT: boolean = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n    /** Whether the current rendering engine is Blink. */\n        // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n    BLINK: boolean = this.isBrowser && (!!((window as any).chrome || hasV8BreakIterator) &&\n        typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT);\n\n    /** Whether the current rendering engine is WebKit. */\n        // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n        // ensure that Webkit runs standalone and is not used as another engine's base.\n    WEBKIT: boolean = this.isBrowser &&\n        /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n\n    /** Whether the current platform is Apple iOS. */\n    IOS: boolean = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n        !(window as any).MSStream;\n\n    /** Whether the current browser is Firefox. */\n        // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n        // them self as Gecko-like browsers and modify the userAgent's according to that.\n        // Since we only cover one explicit Firefox case, we can simply check for Firefox\n        // instead of having an unstable check for Gecko.\n    FIREFOX: boolean = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n\n    /** Whether the current platform is Android. */\n        // Trident on mobile adds the android platform to the userAgent to trick detections.\n    ANDROID: boolean = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n\n    /** Whether the current browser is Safari. */\n        // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n        // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n        // Safari browser should also use Webkit as its layout engine.\n    SAFARI: boolean = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n\n    constructor(@Optional() @Inject(PLATFORM_ID) private _platformId?: Object) {}\n}\n","import { NgModule } from '@angular/core';\n\n\n@NgModule()\nexport class PlatformModule {}\n"],"names":["supportsPassiveEventListeners","supportsPassiveEvents","window","addEventListener","Object","defineProperty","get","getSupportedInputTypes","supportedInputTypes","document","Set","candidateInputTypes","featureTestInput","createElement","filter","value","setAttribute","type","hasV8BreakIterator","Intl","v8BreakIterator","Platform","_platformId","this","isBrowser","isPlatformBrowser","EDGE","test","navigator","userAgent","TRIDENT","BLINK","chrome","CSS","WEBKIT","IOS","MSStream","FIREFOX","ANDROID","SAFARI","Injectable","args","providedIn","decorators","Optional","Inject","PLATFORM_ID","PlatformModule","NgModule"],"mappings":"kXAQA,SAAAA,KACI,GAA6B,MAAzBC,GAAmD,mBAAXC,QACxC,IACIA,OAAOC,iBAAiB,OAAM,KAASC,OAAOC,kBAAmB,WAC7DC,IAAK,WAAM,MAAAL,IAAwB,cAGvCA,EAAwBA,IAAyB,EAIzD,MAAOA,GAqCX,QAAAM,KAEI,GAAIC,EACA,MAAOA,EAMX,IAAwB,gBAAbC,YAA0BA,SAEjC,MADAD,GAAsB,GAAIE,KAAIC,EAIlC,IAAIC,GAAmBH,SAASI,cAAc,QAM9C,OALAL,GAAsB,GAAIE,KAAIC,EAAoBG,OAAO,SAAAC,GAErD,MADAH,GAAiBI,aAAa,OAAQD,GAC/BH,EAAiBK,OAASF,KCnEzC,GDJId,GAqBAO,ECjBEU,EAAsC,mBAATC,OAAwB,KAAcC,6BAuDrE,QAAJC,GAAyDC,GAAAC,KAAzDD,YAAyDA,EAzCzDC,KAAAC,UAAyBD,KAAKD,YACtBG,EAAAA,kBAAkBF,KAAKD,aAAmC,gBAAbb,aAA2BA,SAGhFc,KAAAG,KAAoBH,KAAKC,WAAa,UAAUG,KAAKC,UAAUC,WAG/DN,KAAAO,QAAuBP,KAAKC,WAAa,kBAAkBG,KAAKC,UAAUC,WAI1EN,KAAAQ,MAAqBR,KAAKC,cAAiB,OAAgBQ,SAAUd,IAC9C,mBAARe,OAAwBV,KAAKG,OAASH,KAAKO,QAK1DP,KAAAW,OAAsBX,KAAKC,WACnB,eAAeG,KAAKC,UAAUC,aAAeN,KAAKQ,QAAUR,KAAKG,OAASH,KAAKO,QAGvFP,KAAAY,IAAmBZ,KAAKC,WAAa,mBAAmBG,KAAKC,UAAUC,aAC9D,OAAgBO,SAOzBb,KAAAc,QAAuBd,KAAKC,WAAa,uBAAuBG,KAAKC,UAAUC,WAI/EN,KAAAe,QAAuBf,KAAKC,WAAa,WAAWG,KAAKC,UAAUC,aAAeN,KAAKO,QAMvFP,KAAAgB,OAAsBhB,KAAKC,WAAa,UAAUG,KAAKC,UAAUC,YAAcN,KAAKW,OA3DpF,sBAYAjB,KAACuB,EAAAA,WAADC,OAAaC,WAAY,+CAiDzBzB,KAAAb,OAAAuC,aAAA1B,KAAiB2B,EAAAA,WAAjB3B,KAA6B4B,EAAAA,OAA7BJ,MAAoCK,EAAAA,gJA7DpCzB,KD0BMV,GAKF,QACA,SACA,WACA,OACA,iBACA,QACA,OACA,SACA,QACA,QACA,SACA,WACA,QACA,QACA,QACA,SACA,SACA,MACA,OACA,OACA,MACA,QEpDJoC,EAAA,yBAAA,sBAGA9B,KAAC+B,EAAAA,WAHDD"}