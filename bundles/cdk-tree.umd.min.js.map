{"version":3,"file":"cdk-tree.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../packages/cdk/tree/tree-errors.ts","../../packages/cdk/tree/control/base-tree-control.ts","../../packages/cdk/tree/control/flat-tree-control.ts","../../packages/cdk/tree/control/nested-tree-control.ts","../../packages/cdk/tree/outlet.ts","../../packages/cdk/tree/node.ts","../../packages/cdk/tree/tree.ts","../../packages/cdk/tree/nested-node.ts","../../packages/cdk/tree/padding.ts","../../packages/cdk/tree/toggle.ts","../../packages/cdk/tree/tree.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nexport function getTreeNoValidDataSourceError() {\n  return Error(`A valid data source must be provided.`);\n}\n\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nexport function getTreeMultipleDefaultNodeDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nexport function getTreeMissingMatchingNodeDefError() {\n  return Error(`Could not find a matching node definition for the provided node data.`);\n}\n\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nexport function getTreeControlMissingError() {\n  return Error(`Could not find a tree control for the tree.`);\n}\n\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nexport function getTreeControlFunctionsMissingError() {\n  return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n","import { SelectionModel } from '@angular/cdk/collections';\nimport { Observable } from 'rxjs';\n\nimport { ITreeControl } from './tree-control';\n\n\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\n// todo здесь явно ошибка проектирования, абстрактный класс реализует функционал\n/* tslint:disable-next-line:naming-convention */\nexport abstract class BaseTreeControl<T> implements ITreeControl<T> {\n\n    /** Saved data node for `expandAll` action. */\n    dataNodes: T[];\n\n    /** A selection model with multi-selection to track expansion status. */\n    expansionModel: SelectionModel<T> = new SelectionModel<T>(true);\n\n    /** Get depth of a given data node, return the level number. This is for flat tree node. */\n    getLevel: (dataNode: T) => number;\n\n    /**\n     * Whether the data node is expandable. Returns true if expandable.\n     * This is for flat tree node.\n     */\n    isExpandable: (dataNode: T) => boolean;\n\n    /** Gets a stream that emits whenever the given data node's children change. */\n    getChildren: (dataNode: T) => Observable<T[]>;\n\n    /** Gets a list of descendent data nodes of a subtree rooted at given data node recursively. */\n    abstract getDescendants(dataNode: T): T[];\n\n    /** Expands all data nodes in the tree. */\n    abstract expandAll(): void;\n\n    /** Toggles one single data node's expanded/collapsed state. */\n    toggle(dataNode: T): void {\n        this.expansionModel.toggle(dataNode);\n    }\n\n    /** Expands one single data node. */\n    expand(dataNode: T): void {\n        this.expansionModel.select(dataNode);\n    }\n\n    /** Collapses one single data node. */\n    collapse(dataNode: T): void {\n        this.expansionModel.deselect(dataNode);\n    }\n\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n    isExpanded(dataNode: T): boolean {\n        return this.expansionModel.isSelected(dataNode);\n    }\n\n    /** Toggles a subtree rooted at `node` recursively. */\n    toggleDescendants(dataNode: T): void {\n        this.expansionModel.isSelected(dataNode)\n            ? this.collapseDescendants(dataNode)\n            : this.expandDescendants(dataNode);\n    }\n\n    /** Collapse all dataNodes in the tree. */\n    collapseAll(): void {\n        this.expansionModel.clear();\n    }\n\n    /** Expands a subtree rooted at given data node recursively. */\n    expandDescendants(dataNode: T): void {\n        const toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed);\n    }\n\n    /** Collapses a subtree rooted at given data node recursively. */\n    collapseDescendants(dataNode: T): void {\n        const toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed);\n    }\n}\n","import { BaseTreeControl } from './base-tree-control';\n\n\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nexport class FlatTreeControl<T> extends BaseTreeControl<T> {\n\n    /** Construct with flat tree data node functions getLevel and isExpandable. */\n    constructor(public getLevel: (dataNode: T) => number, public isExpandable: (dataNode: T) => boolean) {\n        super();\n    }\n\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the ITreeControl must be flattened tree nodes\n     * with correct levels.\n     */\n    getDescendants(dataNode: T): T[] {\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        const results: T[] = [];\n\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1;\n             i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]);\n             i++\n        ) {\n            results.push(this.dataNodes[i]);\n        }\n\n        return results;\n    }\n\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the ITreeControl must be set to all flattened\n     * data nodes of the tree.\n     */\n    expandAll(): void {\n        this.expansionModel.select(...this.dataNodes);\n    }\n}\n","import { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { BaseTreeControl } from './base-tree-control';\n\n\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nexport class NestedTreeControl<T> extends BaseTreeControl<T> {\n\n    /** Construct with nested tree function getChildren. */\n    constructor(public getChildren: (dataNode: T) => Observable<T[]>) {\n        super();\n    }\n\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the ITreeControl must be set to all root level\n     * data nodes of the tree.\n     */\n    expandAll(): void {\n        this.expansionModel.clear();\n        const allNodes = this.dataNodes.reduce((accumulator: T[], dataNode) =>\n            [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n        this.expansionModel.select(...allNodes);\n    }\n\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n    getDescendants(dataNode: T): T[] {\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n\n        return descendants.splice(1);\n    }\n\n    /** A helper function to get descendants recursively. */\n    // todo нужно придумать другое название и понять в чем отличие между getDescendants и _getDescendants\n    /* tslint:disable-next-line:naming-convention */\n    private _getDescendants(descendants: T[], dataNode: T): void {\n        descendants.push(dataNode);\n\n        this.getChildren(dataNode)\n            .pipe(take(1))\n            .subscribe((children) => {\n                if (children && children.length > 0) {\n                    children.forEach((child: T) => this._getDescendants(descendants, child));\n                }\n            });\n    }\n}\n","import { ChangeDetectorRef, Directive, ViewContainerRef } from '@angular/core';\n\n\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({ selector: '[cdkTreeNodeOutlet]' })\nexport class CdkTreeNodeOutlet {\n    constructor(public viewContainer: ViewContainerRef, public changeDetectorRef: ChangeDetectorRef) {}\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n/** Context provided to the tree node component. */\nexport class CdkTreeNodeOutletContext<T> {\n    /** Data for the node. */\n    $implicit: T;\n\n    /** Depth of the node. */\n    level: number;\n\n    /** Index location of the node. */\n    index?: number;\n\n    /** Length of the number of total dataNodes. */\n    count?: number;\n\n    constructor(data: T) {\n        this.$implicit = data;\n    }\n}\n\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n@Directive({\n    selector: '[cdkTreeNodeDef]',\n    inputs: [\n        'when: cdkTreeNodeDefWhen'\n    ]\n})\nexport class CdkTreeNodeDef<T> {\n    /**\n     * Function that should return true if this node template should be used for the provided node\n     * data and index. If left undefined, this node will be considered the default node template to\n     * use when no other when functions return true for the data.\n     * For every node, there must be at least one when function that passes or an undefined to\n     * default.\n     */\n    when: (index: number, nodeData: T) => boolean;\n\n    /** @docs-private */\n    constructor(public template: TemplateRef<any>) {}\n}\n","import { CollectionViewer, DataSource } from '@angular/cdk/collections';\nimport {\n    AfterContentChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    Input,\n    IterableChangeRecord,\n    IterableDiffer,\n    IterableDiffers,\n    OnDestroy,\n    OnInit,\n    QueryList,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation,\n    TrackByFunction, Inject, forwardRef\n} from '@angular/core';\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { BehaviorSubject, Observable, of as observableOf, Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { ITreeControl } from './control/tree-control';\nimport { CdkTreeNodeDef, CdkTreeNodeOutletContext } from './node';\nimport { CdkTreeNodeOutlet } from './outlet';\nimport {\n    getTreeControlFunctionsMissingError,\n    getTreeControlMissingError,\n    getTreeMissingMatchingNodeDefError,\n    getTreeMultipleDefaultNodeDefsError,\n    getTreeNoValidDataSourceError\n} from './tree-errors';\n\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\n@Component({\n    selector: 'cdk-tree',\n    exportAs: 'cdkTree',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        class: 'cdk-tree',\n        role: 'tree'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CdkTree<T> implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\n\n    /** The tree controller */\n    @Input() treeControl: ITreeControl<T>;\n\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data\n     * relative to the function to know if a node should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    @Input() trackBy: TrackByFunction<T>;\n\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(CdkTreeNodeOutlet, {static: true}) nodeOutlet: CdkTreeNodeOutlet;\n\n    /** The tree node template for the tree */\n    @ContentChildren(CdkTreeNodeDef) nodeDefs: QueryList<CdkTreeNodeDef<T>>;\n\n    // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n    //     Remove the MAX_VALUE in viewChange\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     */\n    viewChange = new BehaviorSubject<{ start: number; end: number }>({ start: 0, end: Number.MAX_VALUE });\n\n    /** Differ used to find the changes in the data provided by the data source. */\n    protected dataDiffer: IterableDiffer<T>;\n\n    /** Subject that emits when the component has been destroyed. */\n    private onDestroy = new Subject<void>();\n\n    /** Stores the node definition that does not have a when predicate. */\n    private defaultNodeDef: CdkTreeNodeDef<T> | null;\n\n    /** Data subscription */\n    private dataSubscription: Subscription | null;\n\n    /** Level of nodes */\n    private levels: Map<T, number> = new Map<T, number>();\n\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a dara array to render.\n     */\n    @Input()\n    get dataSource(): DataSource<T> | Observable<T[]> | T[] {\n        return this._dataSource;\n    }\n\n    set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n        if (this._dataSource !== dataSource) {\n            this.switchDataSource(dataSource);\n        }\n    }\n\n    private _dataSource: DataSource<T> | Observable<T[]> | T[];\n\n    constructor(protected differs: IterableDiffers, protected changeDetectorRef: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.dataDiffer = this.differs.find([]).create(this.trackBy);\n\n        if (!this.treeControl) {\n            throw getTreeControlMissingError();\n        }\n    }\n\n    ngOnDestroy() {\n        this.nodeOutlet.viewContainer.clear();\n\n        this.onDestroy.next();\n        this.onDestroy.complete();\n\n        // tslint:disable-next-line:no-unbound-method\n        if (this._dataSource && typeof (this.dataSource as DataSource<T>).disconnect === 'function') {\n            (this.dataSource as DataSource<T>).disconnect(this);\n        }\n\n        if (this.dataSubscription) {\n            this.dataSubscription.unsubscribe();\n            this.dataSubscription = null;\n        }\n    }\n\n    ngAfterContentChecked() {\n        const defaultNodeDefs = this.nodeDefs.filter((def) => !def.when);\n\n        if (defaultNodeDefs.length > 1) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this.defaultNodeDef = defaultNodeDefs[0];\n\n        if (this.dataSource && this.nodeDefs && !this.dataSubscription) {\n            this.observeRenderChanges();\n        }\n    }\n\n    /** Check for changes made in the data and render each change (node added/removed/moved). */\n    renderNodeChanges(\n        data: T[] | ReadonlyArray<T>,\n        dataDiffer: IterableDiffer<T> = this.dataDiffer,\n        viewContainer: ViewContainerRef = this.nodeOutlet.viewContainer,\n        parentData?: T\n    ) {\n        const changes = dataDiffer.diff(data);\n\n        if (!changes) { return; }\n\n        changes.forEachOperation((item: IterableChangeRecord<T>,\n                                  adjustedPreviousIndex: number | null,\n                                  currentIndex: number | null) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[currentIndex!], currentIndex!, viewContainer, parentData);\n            } else if (currentIndex == null) {\n                viewContainer.remove(adjustedPreviousIndex!);\n                this.levels.delete(item.item);\n            } else {\n                const view = viewContainer.get(adjustedPreviousIndex!);\n                viewContainer.move(view!, currentIndex);\n            }\n        });\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     */\n    getNodeDef(data: T, i: number): CdkTreeNodeDef<T> {\n        if (this.nodeDefs.length === 1) { return this.nodeDefs.first; }\n\n        const nodeDef = this.nodeDefs.find((def) => def.when && def.when(i, data)) || this.defaultNodeDef;\n\n        if (!nodeDef) { throw getTreeMissingMatchingNodeDefError(); }\n\n        return nodeDef;\n    }\n\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     */\n    insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T) {\n        const node = this.getNodeDef(nodeData, index);\n\n        // Node context that will be provided to created embedded view\n        const context = new CdkTreeNodeOutletContext<T>(nodeData);\n\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        /* tslint:disable-next-line:no-typeof-undefined */\n        } else if (typeof parentData !== 'undefined' && this.levels.has(parentData)) {\n            context.level = this.levels.get(parentData)! + 1;\n        } else {\n            context.level = 0;\n        }\n\n        this.levels.set(nodeData, context.level);\n\n        // Use default tree nodeOutlet, or nested node's nodeOutlet\n        const container = viewContainer ? viewContainer : this.nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n\n    /** Set up a subscription for the data provided by the data source. */\n    private observeRenderChanges() {\n        let dataStream: Observable<T[] | ReadonlyArray<T>> | undefined;\n\n        // Cannot use `instanceof DataSource` since the data source could be a literal with\n        // `connect` function and may not extends DataSource.\n        // tslint:disable-next-line:no-unbound-method\n        if (typeof (this._dataSource as DataSource<T>).connect === 'function') {\n            dataStream = (this._dataSource as DataSource<T>).connect(this);\n        } else if (this._dataSource instanceof Observable) {\n            dataStream = this._dataSource;\n        } else if (Array.isArray(this._dataSource)) {\n            dataStream = observableOf(this._dataSource);\n        }\n\n        if (dataStream) {\n            this.dataSubscription = dataStream\n                .pipe(takeUntil(this.onDestroy))\n                .subscribe((data) => this.renderNodeChanges(data));\n        } else {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     */\n    private switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n        // tslint:disable-next-line:no-unbound-method\n        if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n            (this.dataSource as DataSource<T>).disconnect(this);\n        }\n\n        if (this.dataSubscription) {\n            this.dataSubscription.unsubscribe();\n            this.dataSubscription = null;\n        }\n\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) { this.nodeOutlet.viewContainer.clear(); }\n\n        this._dataSource = dataSource;\n\n        if (this.nodeDefs) { this.observeRenderChanges(); }\n    }\n}\n\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\n@Directive({\n    selector: 'cdk-tree-node',\n    exportAs: 'cdkTreeNode',\n    host: {\n        class: 'cdk-tree-node',\n\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        '[attr.role]': 'role'\n    }\n})\nexport class CdkTreeNode<T> implements IFocusableOption, OnDestroy {\n    /**\n     * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n     * in `CdkTree` and set the data to it.\n     */\n    static mostRecentTreeNode: CdkTreeNode<any> | null = null;\n\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    protected destroyed = new Subject<void>();\n\n    get data(): T {\n        return this._data;\n    }\n\n    set data(value: T) {\n        this._data = value;\n\n        this.setRoleFromData();\n    }\n\n    private _data: T;\n\n    get isExpanded(): boolean {\n        return this.tree.treeControl.isExpanded(this._data);\n    }\n\n    get level(): number {\n        return this.tree.treeControl.getLevel ? this.tree.treeControl.getLevel(this._data) : 0;\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        @Inject(forwardRef(() => CdkTree)) protected tree: CdkTree<T>\n    ) {\n        CdkTreeNode.mostRecentTreeNode = this as CdkTreeNode<T>;\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    private setRoleFromData(): void {\n        if (this.tree.treeControl.isExpandable) {\n            this.role = this.tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n        } else {\n            if (!this.tree.treeControl.getChildren) {\n                throw getTreeControlFunctionsMissingError();\n            }\n\n            this.tree.treeControl.getChildren(this._data).pipe(takeUntil(this.destroyed))\n                .subscribe((children) => {\n                    this.role = children && children.length ? 'group' : 'treeitem';\n                });\n        }\n    }\n}\n","import {\n    AfterContentInit,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    IterableDiffers,\n    IterableDiffer,\n    OnDestroy,\n    QueryList\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { CdkTreeNodeOutlet } from './outlet';\nimport { CdkTree, CdkTreeNode } from './tree';\nimport { getTreeControlFunctionsMissingError } from './tree-errors';\n\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * For example:\n *   ```html\n *   <cdk-mested-tree-node>\n *     {{node.name}}\n *     <ng-template cdkTreeNodeOutlet></ng-template>\n *   </cdk-tree-node>\n *   ```\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\n * like this:\n *   ```html\n *   <cdk-nested-tree-node>\n *     {{node.name}}\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>\n *   </cdk-tree-node>\n *   ```\n */\n@Directive({\n    selector: 'cdk-nested-tree-node',\n    exportAs: 'cdkNestedTreeNode',\n    host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.role]': 'role',\n        class: 'cdk-tree-node cdk-nested-tree-node'\n    },\n    providers: [{ provide: CdkTreeNode, useExisting: CdkNestedTreeNode }]\n})\nexport class CdkNestedTreeNode<T> extends CdkTreeNode<T> implements AfterContentInit, OnDestroy {\n    /** The children node placeholder. */\n    @ContentChildren(CdkTreeNodeOutlet) nodeOutlet: QueryList<CdkTreeNodeOutlet>;\n\n    /** The children data dataNodes of current node. They will be placed in `CdkTreeNodeOutlet`. */\n    protected children: T[];\n\n    /** Differ used to find the changes in the data provided by the data source. */\n    private dataDiffer: IterableDiffer<T>;\n\n    constructor(protected elementRef: ElementRef, protected tree: CdkTree<T>, protected differs: IterableDiffers) {\n        super(elementRef, tree);\n    }\n\n    ngAfterContentInit() {\n        this.dataDiffer = this.differs.find([]).create(this.tree.trackBy);\n\n        if (!this.tree.treeControl.getChildren) {\n            throw getTreeControlFunctionsMissingError();\n        }\n\n        this.tree.treeControl.getChildren(this.data)\n            .pipe(takeUntil(this.destroyed))\n            .subscribe((result) => {\n                this.children = result;\n                this.updateChildrenNodes();\n            });\n\n        this.nodeOutlet.changes\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => this.updateChildrenNodes());\n    }\n\n    ngOnDestroy() {\n        this.clear();\n        super.ngOnDestroy();\n    }\n\n    /** Add children dataNodes to the NodeOutlet */\n    protected updateChildrenNodes(): void {\n        if (this.nodeOutlet.length && this.children) {\n            this.tree.renderNodeChanges(\n                this.children, this.dataDiffer, this.nodeOutlet.first.viewContainer, this.data\n            );\n        } else {\n            // Reset the data differ if there's no children nodes displayed\n            this.dataDiffer.diff([]);\n        }\n    }\n\n    /** Clear the children dataNodes. */\n    protected clear(): void {\n        if (this.nodeOutlet && this.nodeOutlet.first) {\n            this.nodeOutlet.first.viewContainer.clear();\n            this.dataDiffer.diff([]);\n        }\n    }\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { Directive, ElementRef, Input, OnDestroy, Optional, Renderer2 } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { CdkTree, CdkTreeNode } from './tree';\n\n\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\n@Directive({\n    selector: '[cdkTreeNodePadding]'\n})\nexport class CdkTreeNodePadding<T> implements OnDestroy {\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    @Input('cdkTreeNodePadding')\n    get level(): number {\n        return this._level;\n    }\n\n    set level(value: number) {\n        this._level = value;\n\n        this.setPadding();\n    }\n\n    /* tslint:disable-next-line:naming-convention */\n    protected _level: number;\n\n    @Input('cdkTreeNodePaddingIndent')\n    get indent(): number {\n        return this._indent;\n    }\n\n    set indent(value: number) {\n        this._indent = value;\n\n        this.setPadding();\n    }\n\n    /* tslint:disable-next-line:naming-convention */\n    protected _indent: number;\n\n    private destroyed = new Subject<void>();\n\n    constructor(\n        protected treeNode: CdkTreeNode<T>,\n        protected tree: CdkTree<T>,\n        private renderer: Renderer2,\n        private element: ElementRef<HTMLElement>,\n        @Optional() private dir: Directionality\n    ) {\n\n        if (this.dir && this.dir.change) {\n            this.dir.change\n                .pipe(takeUntil(this.destroyed))\n                .subscribe(() => this.setPadding());\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n    protected paddingIndent(): string | null {\n        const nodeLevel = (this.treeNode.data && this.tree.treeControl.getLevel)\n            ? this.tree.treeControl.getLevel(this.treeNode.data)\n            : null;\n\n        const level = this._level || nodeLevel;\n\n        return level ? `${(level * this._indent) + 12}px` : '12px';\n    }\n\n    protected setPadding() {\n        const padding = this.paddingIndent();\n        const paddingProp = this.dir && this.dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n\n        this.renderer.setStyle(this.element.nativeElement, paddingProp, padding);\n    }\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTree, CdkTreeNode } from './tree';\n\n\n@Directive({\n    selector: '[cdkTreeNodeToggle]',\n    host: {\n        '(click)': 'toggle($event)'\n    }\n})\nexport class CdkTreeNodeToggle<T> {\n    @Input('cdkTreeNodeToggleRecursive')\n    get recursive(): boolean { return this._recursive; }\n\n    set recursive(value: boolean) { this._recursive = value; }\n\n    private _recursive = false;\n\n    constructor(protected tree: CdkTree<T>, protected treeNode: CdkTreeNode<T>) {}\n\n    toggle(event: Event): void {\n        this.recursive\n            ? this.tree.treeControl.toggleDescendants(this.treeNode.data)\n            : this.tree.treeControl.toggle(this.treeNode.data);\n\n        event.stopPropagation();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\n\nimport { CdkNestedTreeNode } from './nested-node';\nimport { CdkTreeNodeDef } from './node';\nimport { CdkTreeNodeOutlet } from './outlet';\nimport { CdkTreeNodePadding } from './padding';\nimport { CdkTreeNodeToggle } from './toggle';\nimport { CdkTree, CdkTreeNode } from './tree';\n\n\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet\n];\n\n@NgModule({\n    imports: [CommonModule],\n    exports: EXPORTED_DECLARATIONS,\n    declarations: EXPORTED_DECLARATIONS,\n    providers: [FocusMonitor]\n})\nexport class CdkTreeModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","getTreeNoValidDataSourceError","Error","getTreeMultipleDefaultNodeDefsError","getTreeMissingMatchingNodeDefError","getTreeControlMissingError","getTreeControlFunctionsMissingError","setPrototypeOf","__proto__","Array","p","hasOwnProperty","BaseTreeControl","expansionModel","SelectionModel","toggle","dataNode","expand","select","collapse","deselect","isExpanded","isSelected","toggleDescendants","collapseDescendants","expandDescendants","collapseAll","clear","toBeProcessed","push","apply","getDescendants","_a","FlatTreeControl","getLevel","isExpandable","_this","_super","call","tslib_1.__extends","startIndex","dataNodes","indexOf","results","i","length","expandAll","NestedTreeControl","getChildren","allNodes","reduce","accumulator","concat","descendants","_getDescendants","splice","pipe","take","subscribe","children","forEach","child","CdkTreeNodeOutlet","viewContainer","changeDetectorRef","type","Directive","args","selector","ViewContainerRef","ChangeDetectorRef","CdkTreeNodeOutletContext","data","$implicit","CdkTreeNodeDef","template","inputs","TemplateRef","CdkTree","differs","viewChange","BehaviorSubject","start","end","Number","MAX_VALUE","onDestroy","Subject","levels","Map","defineProperty","_dataSource","dataSource","switchDataSource","ngOnInit","dataDiffer","find","trackBy","treeControl","ngOnDestroy","nodeOutlet","next","complete","disconnect","dataSubscription","unsubscribe","ngAfterContentChecked","defaultNodeDefs","nodeDefs","filter","def","when","defaultNodeDef","observeRenderChanges","renderNodeChanges","parentData","changes","diff","forEachOperation","item","adjustedPreviousIndex","currentIndex","previousIndex","insertNode","remove","delete","view","get","move","detectChanges","getNodeDef","first","nodeDef","nodeData","index","node","context","level","has","set","createEmbeddedView","CdkTreeNode","mostRecentTreeNode","dataStream","connect","Observable","isArray","observableOf","takeUntil","Component","exportAs","host","class","role","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","IterableDiffers","Input","ViewChild","static","ContentChildren","elementRef","tree","destroyed","_data","value","setRoleFromData","focus","nativeElement","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","ElementRef","decorators","Inject","forwardRef","CdkNestedTreeNode","ngAfterContentInit","result","updateChildrenNodes","providers","provide","useExisting","CdkTreeNodePadding","treeNode","renderer","element","dir","change","setPadding","_level","_indent","paddingIndent","nodeLevel","padding","paddingProp","setStyle","Renderer2","Directionality","Optional","indent","CdkTreeNodeToggle","_recursive","event","recursive","stopPropagation","(click)","EXPORTED_DECLARATIONS","CdkTreeModule","NgModule","imports","CommonModule","exports","declarations","FocusMonitor"],"mappings":"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"}