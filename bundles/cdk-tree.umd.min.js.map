{"version":3,"file":"cdk-tree.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/cdk/tree/tree-errors.ts","../../src/cdk/tree/control/base-tree-control.ts","../../src/cdk/tree/control/flat-tree-control.ts","../../src/cdk/tree/control/nested-tree-control.ts","../../src/cdk/tree/outlet.ts","../../src/cdk/tree/node.ts","../../src/cdk/tree/tree.ts","../../src/cdk/tree/nested-node.ts","../../src/cdk/tree/padding.ts","../../src/cdk/tree/toggle.ts","../../src/cdk/tree/tree.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nexport function getTreeNoValidDataSourceError() {\n  return Error(`A valid data source must be provided.`);\n}\n\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nexport function getTreeMultipleDefaultNodeDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nexport function getTreeMissingMatchingNodeDefError() {\n  return Error(`Could not find a matching node definition for the provided node data.`);\n}\n\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nexport function getTreeControlMissingError() {\n  return Error(`Could not find a tree control for the tree.`);\n}\n\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nexport function getTreeControlFunctionsMissingError() {\n  return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n","import { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { Observable } from 'rxjs';\n\nimport { ITreeControl } from './tree-control';\n\n\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\nexport abstract class BaseTreeControl<T> implements ITreeControl<T> {\n\n    /** Saved data node for `expandAll` action. */\n    dataNodes: T[];\n\n    /** A selection model with multi-selection to track expansion status. */\n    expansionModel: SelectionModel<T> = new SelectionModel<T>(true);\n\n    /** Get depth of a given data node, return the level number. This is for flat tree node. */\n    getLevel: (dataNode: T) => number;\n\n    /**\n     * Whether the data node is expandable. Returns true if expandable.\n     * This is for flat tree node.\n     */\n    isExpandable: (dataNode: T) => boolean;\n\n    /** Gets a stream that emits whenever the given data node's children change. */\n    getChildren: (dataNode: T) => Observable<T[]>;\n\n    /** Gets a list of descendent data nodes of a subtree rooted at given data node recursively. */\n    abstract getDescendants(dataNode: T): T[];\n\n    /** Expands all data nodes in the tree. */\n    abstract expandAll(): void;\n\n    /** Toggles one single data node's expanded/collapsed state. */\n    toggle(dataNode: T): void {\n        this.expansionModel.toggle(dataNode);\n    }\n\n    /** Expands one single data node. */\n    expand(dataNode: T): void {\n        this.expansionModel.select(dataNode);\n    }\n\n    /** Collapses one single data node. */\n    collapse(dataNode: T): void {\n        this.expansionModel.deselect(dataNode);\n    }\n\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n    isExpanded(dataNode: T): boolean {\n        return this.expansionModel.isSelected(dataNode);\n    }\n\n    /** Toggles a subtree rooted at `node` recursively. */\n    toggleDescendants(dataNode: T): void {\n        this.expansionModel.isSelected(dataNode)\n            ? this.collapseDescendants(dataNode)\n            : this.expandDescendants(dataNode);\n    }\n\n    /** Collapse all dataNodes in the tree. */\n    collapseAll(): void {\n        this.expansionModel.clear();\n    }\n\n    /** Expands a subtree rooted at given data node recursively. */\n    expandDescendants(dataNode: T): void {\n        const toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed);\n    }\n\n    /** Collapses a subtree rooted at given data node recursively. */\n    collapseDescendants(dataNode: T): void {\n        const toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed);\n    }\n}\n","import { BaseTreeControl } from './base-tree-control';\n\n\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nexport class FlatTreeControl<T> extends BaseTreeControl<T> {\n\n    /** Construct with flat tree data node functions getLevel and isExpandable. */\n    constructor(public getLevel: (dataNode: T) => number, public isExpandable: (dataNode: T) => boolean) {\n        super();\n    }\n\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the ITreeControl must be flattened tree nodes\n     * with correct levels.\n     */\n    getDescendants(dataNode: T): T[] {\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        const results: T[] = [];\n\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1;\n             i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]);\n             i++\n        ) {\n            results.push(this.dataNodes[i]);\n        }\n\n        return results;\n    }\n\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the ITreeControl must be set to all flattened\n     * data nodes of the tree.\n     */\n    expandAll(): void {\n        this.expansionModel.select(...this.dataNodes);\n    }\n}\n","import { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { BaseTreeControl } from './base-tree-control';\n\n\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nexport class NestedTreeControl<T> extends BaseTreeControl<T> {\n\n    /** Construct with nested tree function getChildren. */\n    constructor(public getChildren: (dataNode: T) => Observable<T[]>) {\n        super();\n    }\n\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the ITreeControl must be set to all root level\n     * data nodes of the tree.\n     */\n    expandAll(): void {\n        this.expansionModel.clear();\n        const allNodes = this.dataNodes.reduce((accumulator: T[], dataNode) =>\n            [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n        this.expansionModel.select(...allNodes);\n    }\n\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n    getDescendants(dataNode: T): T[] {\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n\n        // Remove the node itself\n        return descendants.splice(1);\n    }\n\n    /** A helper function to get descendants recursively. */\n    protected _getDescendants(descendants: T[], dataNode: T): void {\n        descendants.push(dataNode);\n        this.getChildren(dataNode).pipe(take(1)).subscribe((children) => {\n            if (children && children.length > 0) {\n                children.forEach((child: T) => this._getDescendants(descendants, child));\n            }\n        });\n    }\n}\n","import { Directive, ViewContainerRef } from '@angular/core';\n\n\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({ selector: '[cdkTreeNodeOutlet]' })\nexport class CdkTreeNodeOutlet {\n    constructor(public viewContainer: ViewContainerRef) {}\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n/** Context provided to the tree node component. */\nexport class CdkTreeNodeOutletContext<T> {\n    /** Data for the node. */\n    $implicit: T;\n\n    /** Depth of the node. */\n    level: number;\n\n    /** Index location of the node. */\n    index?: number;\n\n    /** Length of the number of total dataNodes. */\n    count?: number;\n\n    constructor(data: T) {\n        this.$implicit = data;\n    }\n}\n\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n@Directive({\n    selector: '[cdkTreeNodeDef]',\n    inputs: [\n        'when: cdkTreeNodeDefWhen'\n    ]\n})\nexport class CdkTreeNodeDef<T> {\n    /**\n     * Function that should return true if this node template should be used for the provided node\n     * data and index. If left undefined, this node will be considered the default node template to\n     * use when no other when functions return true for the data.\n     * For every node, there must be at least one when function that passes or an undefined to\n     * default.\n     */\n    when: (index: number, nodeData: T) => boolean;\n\n    /** @docs-private */\n    constructor(public template: TemplateRef<any>) {}\n}\n","import {\n    AfterContentChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    Input,\n    IterableChangeRecord,\n    IterableDiffer,\n    IterableDiffers,\n    OnDestroy,\n    OnInit,\n    QueryList,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation,\n    TrackByFunction, Inject, forwardRef\n} from '@angular/core';\n\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\n\nimport { BehaviorSubject, Observable, of as observableOf, Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { ITreeControl } from './control/tree-control';\nimport { CdkTreeNodeDef, CdkTreeNodeOutletContext } from './node';\nimport { CdkTreeNodeOutlet } from './outlet';\nimport {\n    getTreeControlFunctionsMissingError,\n    getTreeControlMissingError,\n    getTreeMissingMatchingNodeDefError,\n    getTreeMultipleDefaultNodeDefsError,\n    getTreeNoValidDataSourceError\n} from './tree-errors';\n\n\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\n@Directive({\n    selector: 'cdk-tree-node',\n    exportAs: 'cdkTreeNode',\n    host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        '[attr.role]': 'role',\n        class: 'cdk-tree-node'\n    }\n})\nexport class CdkTreeNode<T> implements IFocusableOption, OnDestroy {\n    /**\n     * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n     * in `CdkTree` and set the data to it.\n     */\n    static mostRecentTreeNode: CdkTreeNode<any> | null = null;\n\n    /**\n     * The role of the node should be 'group' if it's an internal node,\n     * and 'treeitem' if it's a leaf node.\n     */\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    /** Subject that emits when the component has been destroyed. */\n    protected _destroyed = new Subject<void>();\n\n    protected _data: T;\n\n    /** The tree node's data. */\n    get data(): T {\n        return this._data;\n    }\n\n    set data(value: T) {\n        this._data = value;\n        this._setRoleFromData();\n    }\n\n    get isExpanded(): boolean {\n        return this._tree.treeControl.isExpanded(this._data);\n    }\n\n    get level(): number {\n        return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n    }\n\n    constructor(\n        protected _elementRef: ElementRef,\n        @Inject(forwardRef(() => CdkTree))\n        protected _tree: CdkTree<T>\n    ) {\n        CdkTreeNode.mostRecentTreeNode = this as CdkTreeNode<T>;\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n\n    /** Focuses the menu item. Implements for IFocusableOption. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    private _setRoleFromData(): void {\n        if (this._tree.treeControl.isExpandable) {\n            this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n        } else {\n            if (!this._tree.treeControl.getChildren) {\n                throw getTreeControlFunctionsMissingError();\n            }\n\n            this._tree.treeControl.getChildren(this._data).pipe(takeUntil(this._destroyed))\n                .subscribe((children) => {\n                    this.role = children && children.length ? 'group' : 'treeitem';\n                });\n        }\n    }\n}\n\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\n@Component({\n    selector: 'cdk-tree',\n    exportAs: 'cdkTree',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        class: 'cdk-tree',\n        role: 'tree'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CdkTree<T> implements AfterContentChecked, ICollectionViewer, OnDestroy, OnInit {\n\n    /** The tree controller */\n    @Input() treeControl: ITreeControl<T>;\n\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data\n     * relative to the function to know if a node should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    @Input() trackBy: TrackByFunction<T>;\n\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(CdkTreeNodeOutlet) _nodeOutlet: CdkTreeNodeOutlet;\n\n    /** The tree node template for the tree */\n    @ContentChildren(CdkTreeNodeDef) _nodeDefs: QueryList<CdkTreeNodeDef<T>>;\n\n    // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n    //     Remove the MAX_VALUE in viewChange\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     */\n    viewChange =\n        new BehaviorSubject<{ start: number, end: number }>({ start: 0, end: Number.MAX_VALUE });\n\n    /** Differ used to find the changes in the data provided by the data source. */\n    protected _dataDiffer: IterableDiffer<T>;\n\n    /** Subject that emits when the component has been destroyed. */\n    private _onDestroy = new Subject<void>();\n\n\n    /** Stores the node definition that does not have a when predicate. */\n    private _defaultNodeDef: CdkTreeNodeDef<T> | null;\n\n    /** Data subscription */\n    private _dataSubscription: Subscription | null;\n\n    /** Level of nodes */\n    private _levels: Map<T, number> = new Map<T, number>();\n\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a dara array to render.\n     */\n    @Input()\n    get dataSource(): DataSource<T> | Observable<T[]> | T[] {\n        return this._dataSource;\n    }\n\n    set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n\n    private _dataSource: DataSource<T> | Observable<T[]> | T[];\n\n    constructor(\n        private _differs: IterableDiffers,\n        private _changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n\n        if (!this.treeControl) {\n            throw getTreeControlMissingError();\n        }\n    }\n\n    ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n\n        this._onDestroy.next();\n        this._onDestroy.complete();\n\n        if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n            (this.dataSource as DataSource<T>).disconnect(this);\n        }\n\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n    }\n\n    ngAfterContentChecked() {\n        const defaultNodeDefs = this._nodeDefs.filter((def) => !def.when);\n        if (defaultNodeDefs.length > 1) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this._defaultNodeDef = defaultNodeDefs[0];\n\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n            this._observeRenderChanges();\n        }\n    }\n\n    /** Check for changes made in the data and render each change (node added/removed/moved). */\n    renderNodeChanges(\n        data: T[],\n        dataDiffer: IterableDiffer<T> = this._dataDiffer,\n        viewContainer: ViewContainerRef = this._nodeOutlet.viewContainer,\n        parentData?: T\n    ) {\n        const changes = dataDiffer.diff(data);\n\n        if (!changes) { return; }\n\n        changes.forEachOperation((item: IterableChangeRecord<T>,\n                                  adjustedPreviousIndex: number | null,\n                                  currentIndex: number | null) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[currentIndex!], currentIndex!, viewContainer, parentData);\n            } else if (currentIndex == null) {\n                viewContainer.remove(adjustedPreviousIndex!);\n                this._levels.delete(item.item);\n            } else {\n                const view = viewContainer.get(adjustedPreviousIndex!);\n                viewContainer.move(view!, currentIndex);\n            }\n        });\n\n        this._changeDetectorRef.detectChanges();\n    }\n\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     */\n    _getNodeDef(data: T, i: number): CdkTreeNodeDef<T> {\n        if (this._nodeDefs.length === 1) { return this._nodeDefs.first; }\n\n        const nodeDef =\n            this._nodeDefs.find((def) => def.when && def.when(i, data)) || this._defaultNodeDef;\n\n        if (!nodeDef) { throw getTreeMissingMatchingNodeDefError(); }\n\n        return nodeDef;\n    }\n\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     */\n    insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T) {\n        const node = this._getNodeDef(nodeData, index);\n\n        // Node context that will be provided to created embedded view\n        const context = new CdkTreeNodeOutletContext<T>(nodeData);\n\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n            context.level = this._levels.get(parentData)! + 1;\n        } else {\n            context.level = 0;\n        }\n\n        this._levels.set(nodeData, context.level);\n\n        // Use default tree nodeOutlet, or nested node's nodeOutlet\n        const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n\n    /** Set up a subscription for the data provided by the data source. */\n    private _observeRenderChanges() {\n        let dataStream: Observable<T[]> | undefined;\n\n        // Cannot use `instanceof DataSource` since the data source could be a literal with\n        // `connect` function and may not extends DataSource.\n        if (typeof (this._dataSource as DataSource<T>).connect === 'function') {\n            dataStream = (this._dataSource as DataSource<T>).connect(this);\n        } else if (this._dataSource instanceof Observable) {\n            dataStream = this._dataSource;\n        } else if (Array.isArray(this._dataSource)) {\n            dataStream = observableOf(this._dataSource);\n        }\n\n        if (dataStream) {\n            this._dataSubscription = dataStream\n                .pipe(takeUntil(this._onDestroy))\n                .subscribe((data) => this.renderNodeChanges(data));\n        } else {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     */\n    private _switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n        if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n            (this.dataSource as DataSource<T>).disconnect(this);\n        }\n\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) { this._nodeOutlet.viewContainer.clear(); }\n\n        this._dataSource = dataSource;\n\n        if (this._nodeDefs) { this._observeRenderChanges(); }\n    }\n}\n","import {\n    AfterContentInit,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    IterableDiffers,\n    IterableDiffer,\n    OnDestroy,\n    QueryList\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { CdkTreeNodeOutlet } from './outlet';\nimport { CdkTree, CdkTreeNode } from './tree';\nimport { getTreeControlFunctionsMissingError } from './tree-errors';\n\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * For example:\n *   ```html\n *   <cdk-mested-tree-node>\n *     {{node.name}}\n *     <ng-template cdkTreeNodeOutlet></ng-template>\n *   </cdk-tree-node>\n *   ```\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\n * like this:\n *   ```html\n *   <cdk-nested-tree-node>\n *     {{node.name}}\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>\n *   </cdk-tree-node>\n *   ```\n */\n@Directive({\n    selector: 'cdk-nested-tree-node',\n    exportAs: 'cdkNestedTreeNode',\n    host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.role]': 'role',\n        class: 'cdk-tree-node cdk-nested-tree-node'\n    },\n    providers: [{ provide: CdkTreeNode, useExisting: CdkNestedTreeNode }]\n})\nexport class CdkNestedTreeNode<T> extends CdkTreeNode<T> implements AfterContentInit, OnDestroy {\n    /** The children node placeholder. */\n    @ContentChildren(CdkTreeNodeOutlet) nodeOutlet: QueryList<CdkTreeNodeOutlet>;\n\n    /** The children data dataNodes of current node. They will be placed in `CdkTreeNodeOutlet`. */\n    protected _children: T[];\n\n    /** Differ used to find the changes in the data provided by the data source. */\n    private _dataDiffer: IterableDiffer<T>;\n\n    constructor(\n        protected _elementRef: ElementRef,\n        protected _tree: CdkTree<T>,\n        protected _differs: IterableDiffers\n    ) {\n        super(_elementRef, _tree);\n    }\n\n    ngAfterContentInit() {\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n\n        if (!this._tree.treeControl.getChildren) {\n            throw getTreeControlFunctionsMissingError();\n        }\n\n        this._tree.treeControl.getChildren(this.data)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((result) => {\n                this._children = result;\n                this.updateChildrenNodes();\n            });\n\n        this.nodeOutlet.changes\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateChildrenNodes());\n    }\n\n    ngOnDestroy() {\n        this._clear();\n        super.ngOnDestroy();\n    }\n\n    /** Add children dataNodes to the NodeOutlet */\n    protected updateChildrenNodes(): void {\n        if (this.nodeOutlet.length && this._children) {\n            this._tree.renderNodeChanges(\n                this._children, this._dataDiffer, this.nodeOutlet.first.viewContainer, this._data\n            );\n        } else {\n            // Reset the data differ if there's no children nodes displayed\n            this._dataDiffer.diff([]);\n        }\n    }\n\n    /** Clear the children dataNodes. */\n    protected _clear(): void {\n        if (this.nodeOutlet && this.nodeOutlet.first) {\n            this.nodeOutlet.first.viewContainer.clear();\n            this._dataDiffer.diff([]);\n        }\n    }\n}\n","import { Directive, ElementRef, Input, OnDestroy, Optional, Renderer2 } from '@angular/core';\n\nimport { Directionality } from '@ptsecurity/cdk/bidi';\n// import {coerceNumberProperty} from '@ptsecurity/cdk/coercion';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { CdkTree, CdkTreeNode } from './tree';\n\n\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\n@Directive({\n    selector: '[cdkTreeNodePadding]'\n})\nexport class CdkTreeNodePadding<T> implements OnDestroy {\n    /** Subject that emits when the component has been destroyed. */\n\n    _level: number;\n    _indent: number;\n\n    private _destroyed = new Subject<void>();\n\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    @Input('cdkTreeNodePadding')\n    get level(): number {\n        return this._level;\n    }\n\n    set level(value: number) {\n        // this._level = coerceNumberProperty(value);\n        this._level = value;\n        this._setPadding();\n    }\n\n\n    @Input('cdkTreeNodePaddingIndent')\n    get indent(): number {\n        return this._indent;\n    }\n\n    set indent(value: number) {\n        // this._indent = coerceNumberProperty(value);\n        this._indent = value;\n        this._setPadding();\n    }\n\n\n    constructor(\n        protected _treeNode: CdkTreeNode<T>,\n        protected _tree: CdkTree<T>,\n        private _renderer: Renderer2,\n        private _element: ElementRef<HTMLElement>,\n        @Optional() private _dir: Directionality\n    ) {\n\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(() => this._setPadding());\n        }\n    }\n\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n\n    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n    _paddingIndent(): string | null {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n\n        const level = this._level || nodeLevel;\n\n        return level ? `${(level * this._indent) + 12}px` : '12px';\n    }\n\n    _setPadding() {\n        const padding = this._paddingIndent();\n        const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n\n        this._renderer.setStyle(this._element.nativeElement, paddingProp, padding);\n    }\n}\n","import {\n    Directive,\n    Input\n} from '@angular/core';\n\nimport { CdkTree, CdkTreeNode } from './tree';\n\n\n/**\n * Node toggle to expand/collapse the node.\n */\n@Directive({\n    selector: '[cdkTreeNodeToggle]',\n    host: {\n        '(click)': '_toggle($event)'\n    }\n})\nexport class CdkTreeNodeToggle<T> {\n    /** Whether expand/collapse the node recursively. */\n    @Input('cdkTreeNodeToggleRecursive')\n    get recursive(): boolean {\n        return this._recursive;\n    }\n\n    set recursive(value: boolean) {\n        this._recursive = value;\n    }\n\n    // set recursive(value: boolean) { this._recursive = toBoolean(value); }\n    protected _recursive = false;\n\n    constructor(protected _tree: CdkTree<T>, protected _treeNode: CdkTreeNode<T>) {}\n\n    _toggle(event: Event): void {\n        this.recursive\n            ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n            : this._tree.treeControl.toggle(this._treeNode.data);\n\n        event.stopPropagation();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\n\nimport { CdkNestedTreeNode } from './nested-node';\nimport { CdkTreeNodeDef } from './node';\nimport { CdkTreeNodeOutlet } from './outlet';\nimport { CdkTreeNodePadding } from './padding';\nimport { CdkTreeNodeToggle } from './toggle';\nimport { CdkTree, CdkTreeNode } from './tree';\n\n\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet\n];\n\n@NgModule({\n    imports: [CommonModule],\n    exports: EXPORTED_DECLARATIONS,\n    declarations: EXPORTED_DECLARATIONS,\n    providers: [FocusMonitor, CdkTreeNodeDef]\n})\nexport class CdkTreeModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","getTreeNoValidDataSourceError","Error","getTreeMultipleDefaultNodeDefsError","getTreeMissingMatchingNodeDefError","getTreeControlMissingError","getTreeControlFunctionsMissingError","setPrototypeOf","__proto__","Array","p","hasOwnProperty","BaseTreeControl","expansionModel","SelectionModel","toggle","dataNode","expand","select","collapse","deselect","isExpanded","isSelected","toggleDescendants","collapseDescendants","expandDescendants","collapseAll","clear","toBeProcessed","push","apply","getDescendants","_a","FlatTreeControl","_super","getLevel","isExpandable","_this","call","tslib_1.__extends","startIndex","dataNodes","indexOf","results","expandAll","NestedTreeControl","getChildren","allNodes","reduce","accumulator","concat","descendants","_getDescendants","splice","pipe","take","subscribe","children","forEach","child","CdkTreeNodeOutlet","viewContainer","tslib_1.__decorate","Directive","selector","tslib_1.__metadata","ViewContainerRef","CdkTreeNodeOutletContext","data","$implicit","CdkTreeNodeDef","template","inputs","TemplateRef","CdkTreeNode","_elementRef","_tree","role","_destroyed","Subject","CdkTreeNode_1","mostRecentTreeNode","get","_data","set","value","_setRoleFromData","treeControl","ngOnDestroy","next","complete","focus","nativeElement","takeUntil","Input","exportAs","host","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","class","tslib_1.__param","Inject","forwardRef","CdkTree","ElementRef","_differs","_changeDetectorRef","viewChange","BehaviorSubject","start","end","Number","MAX_VALUE","_onDestroy","_levels","Map","_dataSource","dataSource","_switchDataSource","ngOnInit","_dataDiffer","find","trackBy","_nodeOutlet","disconnect","_dataSubscription","unsubscribe","ngAfterContentChecked","defaultNodeDefs","_nodeDefs","filter","def","when","_defaultNodeDef","_observeRenderChanges","renderNodeChanges","dataDiffer","parentData","changes","diff","forEachOperation","item","adjustedPreviousIndex","currentIndex","previousIndex","insertNode","remove","delete","view","move","detectChanges","_getNodeDef","first","nodeDef","nodeData","index","node","context","level","has","createEmbeddedView","dataStream","connect","Observable","isArray","observableOf","ViewChild","ContentChildren","QueryList","Component","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","IterableDiffers","ChangeDetectorRef","CdkNestedTreeNode","CdkNestedTreeNode_1","ngAfterContentInit","result","_children","updateChildrenNodes","nodeOutlet","_clear","providers","provide","useExisting","CdkTreeNodePadding","_treeNode","_renderer","_element","_dir","change","_setPadding","_level","_indent","_paddingIndent","nodeLevel","padding","paddingProp","setStyle","Optional","Renderer2","Directionality","CdkTreeNodeToggle","_recursive","_toggle","event","recursive","stopPropagation","(click)","EXPORTED_DECLARATIONS","CdkTreeModule","NgModule","imports","CommonModule","exports","declarations","FocusMonitor"],"mappings":"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"}