{"version":3,"file":"cdk-layout.umd.min.js","sources":["../../packages/cdk/layout/media-matcher.ts","../../packages/cdk/layout/breakpoints-observer.ts","../../packages/cdk/layout/layout-module.ts","../../packages/cdk/layout/breakpoints.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Platform } from '@ptsecurity/cdk/platform';\n\n\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility: Set<string> = new Set<string>();\n\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode: HTMLStyleElement | undefined;\n\n/** A utility for calling matchMedia queries. */\n@Injectable({providedIn: 'root'})\nexport class MediaMatcher {\n    /** The internal matchMedia method to return back a MediaQueryList like object. */\n    private _matchMedia: (query: string) => MediaQueryList;\n\n    constructor(private platform: Platform) {\n        this._matchMedia = this.platform.isBrowser && window.matchMedia ?\n            // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n            // call it from a different scope.\n            window.matchMedia.bind(window) :\n            noopMatchMedia;\n    }\n\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    matchMedia(query: string): MediaQueryList {\n        if (this.platform.WEBKIT) {\n            createEmptyStyleRule(query);\n        }\n\n        return this._matchMedia(query);\n    }\n}\n\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n */\nfunction createEmptyStyleRule(query: string) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            document.head!.appendChild(mediaQueryStyleNode);\n        }\n\n        if (mediaQueryStyleNode.sheet) {\n            (mediaQueryStyleNode.sheet as CSSStyleSheet)\n                .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    } catch (e) {\n        console.error(e); //tslint:disable-line\n    }\n}\n\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query: string): MediaQueryList {\n    return {\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: () => {}, //tslint:disable-line\n        removeListener: () => {} //tslint:disable-line\n    } as any;\n}\n","import { Injectable, NgZone, OnDestroy } from '@angular/core';\nimport { coerceArray } from '@ptsecurity/cdk/coercion';\nimport { asapScheduler, combineLatest, fromEventPattern, Observable, Subject } from 'rxjs';\nimport { debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\n\nimport { MediaMatcher } from './media-matcher';\n\n\n/** The current state of a layout breakpoint. */\nexport interface IBreakpointState {\n    /** Whether the breakpoint is currently matching. */\n    matches: boolean;\n\n    /**\n     * A key boolean pair for each query provided to the observe method,\n     * with its current matched state.\n     */\n    breakpoints: {\n        [key: string]: boolean;\n    };\n}\n\n/** The current state of a layout breakpoint. */\ninterface InternalBreakpointState {\n    /** Whether the breakpoint is currently matching. */\n    matches: boolean;\n    /** The media query being to be matched */\n    query: string;\n}\n\ninterface IQuery {\n    observable: Observable<InternalBreakpointState>;\n    mql: MediaQueryList;\n}\n\n/** Utility for checking the matching state of @media queries. */\n@Injectable({providedIn: 'root'})\nexport class BreakpointObserver implements OnDestroy {\n    /**  A map of all media queries currently being listened for. */\n    private _queries: Map<string, IQuery> = new Map();\n    /** A subject for all other observables to takeUntil based on. */\n    private _destroySubject = new Subject<void>();\n\n    constructor(private mediaMatcher: MediaMatcher, private zone: NgZone) {\n    }\n\n    /** Completes the active subject, signalling to all other observables to complete. */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    isMatched(value: string | string[]): boolean {\n        const queries = splitQueries(coerceArray(value));\n\n        return queries.some((mediaQuery) => this._registerQuery(mediaQuery).mql.matches);\n    }\n\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    observe(value: string | string[]): Observable<IBreakpointState> {\n        const queries = splitQueries(coerceArray(value));\n        const observables = queries.map((query) => this._registerQuery(query).observable);\n\n        return combineLatest(observables).pipe(\n            debounceTime(0, asapScheduler),\n            map((breakpointStates: InternalBreakpointState[]) => {\n                const response: IBreakpointState = {\n                    matches: false,\n                    breakpoints: {}\n                };\n\n                breakpointStates.forEach((state: InternalBreakpointState) => {\n                    response.matches = response.matches || state.matches;\n                    response.breakpoints[state.query] = state.matches;\n                });\n\n                return response;\n        }));\n    }\n\n    /** Registers a specific query to be listened for. */\n    private _registerQuery(query: string): IQuery {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return this._queries.get(query)!; //tslint:disable-line\n        }\n\n        const mql: MediaQueryList = this.mediaMatcher.matchMedia(query);\n        let queryListener;\n\n        // Create callback for match changes and add it is as a listener.\n        const queryObservable = fromEventPattern<MediaQueryList>(\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            (listener: Function) => {\n                queryListener = (e: any) => this.zone.run(() => listener(e));\n                mql.addListener(queryListener);\n            },\n            () => mql.removeListener(queryListener))\n            .pipe(\n                takeUntil(this._destroySubject),\n                startWith(mql),\n                map((nextMql: MediaQueryList) => ({query, matches: nextMql.matches}))\n            );\n\n        // Add the MediaQueryList to the set of queries.\n        const output = {observable: queryObservable, mql: mql}; //tslint:disable-line\n        this._queries.set(query, output);\n\n        return output;\n    }\n}\n\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries: string[]): string[] {\n    return queries.map((query: string) => query.split(','))\n        .reduce((a1: string[], a2: string[]) => a1.concat(a2))\n        .map((query) => query.trim());\n}\n","\nimport { NgModule } from '@angular/core';\n\n\n@NgModule()\nexport class LayoutModule {}\n","// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nexport const Breakpoints = {\n  XSmall: '(max-width: 599px)',\n  Small: '(min-width: 600px) and (max-width: 959px)',\n  Medium: '(min-width: 960px) and (max-width: 1279px)',\n  Large: '(min-width: 1280px) and (max-width: 1919px)',\n  XLarge: '(min-width: 1920px)',\n\n  Handset: '(max-width: 599px) and (orientation: portrait), ' +\n           '(max-width: 959px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait), ' +\n          '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' +\n       '(min-width: 1280px) and (orientation: landscape)',\n\n  HandsetPortrait: '(max-width: 599px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n\n  HandsetLandscape: '(max-width: 959px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)'\n};\n"],"names":["createEmptyStyleRule","query","mediaQueriesForWebkitCompatibility","has","mediaQueryStyleNode","document","createElement","setAttribute","appendChild","sheet","insertRule","add","e","console","error","noopMatchMedia","matches","media","addListener","removeListener","splitQueries","queries","map","split","reduce","a1","a2","concat","trim","LayoutModule","type","NgModule","Set","MediaMatcher","platform","this","_matchMedia","isBrowser","window","matchMedia","bind","prototype","WEBKIT","Injectable","args","providedIn","Platform","BreakpointObserver","mediaMatcher","zone","_queries","Map","_destroySubject","Subject","ngOnDestroy","next","complete","isMatched","value","_this","coerceArray","some","mediaQuery","_registerQuery","mql","observe","observables","observable","combineLatest","pipe","debounceTime","asapScheduler","breakpointStates","response","breakpoints","forEach","state","get","queryListener","queryObservable","fromEventPattern","listener","run","takeUntil","startWith","nextMql","output","set","NgZone","Breakpoints","XSmall","Small","Medium","Large","XLarge","Handset","Tablet","Web","HandsetPortrait","TabletPortrait","WebPortrait","HandsetLandscape","TabletLandscape","WebLandscape"],"mappings":";;;;;;ujBA2CA,SAASA,GAAqBC,GAC1B,IAAIC,EAAmCC,IAAIF,GAI3C,IACSG,IACDA,EAAsBC,SAASC,cAAc,SAC7CF,EAAoBG,aAAa,OAAQ,YACzCF,SAAa,KAAEG,YAAYJ,IAG3BA,EAAoBK,QACnBL,EAAyB,MACrBM,WAAW,UAAUT,EAAtC,uBAAmE,GACvDC,EAAmCS,IAAIV,IAE7C,MAAOW,GACLC,QAAQC,MAAMF,IAKtB,QAASG,GAAed,GACpB,OACIe,QAAmB,QAAVf,GAA6B,KAAVA,EAC5BgB,MAAOhB,EACPiB,YAAW,aACXC,eAAc,cC2DtB,QAASC,GAAaC,GAClB,MAAOA,GAAQC,IAAG,SAAErB,GAAkB,MAAAA,GAAMsB,MAAM,OAC7CC,OAAM,SAAEC,EAAcC,GAAiB,MAAAD,GAAGE,OAAOD,KACjDJ,IAAG,SAAErB,GAAU,MAAAA,GAAM2B,SCpI9B,GFOIxB,GEJJyB,EAAA,WAAA,QAAAA,MAC2B,sBAD3BC,KAACC,EAAAA,WACDF,KFAM3B,EAAkD,GAAI8B,KAM5DC,EAAA,WAKI,QAAJA,GAAwBC,GAAAC,KAAxBD,SAAwBA,EAChBC,KAAKC,YAAcD,KAAKD,SAASG,WAAaC,OAAOC,WAGjDD,OAAOC,WAAWC,KAAKF,QACvBvB,EArBZ,MA8BIkB,GAAJQ,UAAAF,WAAI,SAAWtC,GAKP,MAJIkC,MAAKD,SAASQ,QACd1C,EAAqBC,GAGlBkC,KAAKC,YAAYnC,mBAxBhC6B,KAACa,EAAAA,WAADC,OAAaC,WAAY,+CAVzBf,KAASgB,EAAAA,yIADTb,KCoCAc,EAAA,WAOI,QAAJA,GAAwBC,EAAoCC,GAApCd,KAAxBa,aAAwBA,EAAoCb,KAA5Dc,KAA4DA,EAJhDd,KAAZe,SAA4C,GAAIC,KAEpChB,KAAZiB,gBAA8B,GAAIC,GAAAA,QAzClC,MA+CIN,GAAJN,UAAAa,YAAI,WACInB,KAAKiB,gBAAgBG,OACrBpB,KAAKiB,gBAAgBI,YAQzBT,EAAJN,UAAAgB,UAAI,SAAUC,GAAV,GAAJC,GAAAxB,IAGQ,OAFgBf,GAAawC,EAAAA,YAAYF,IAE1BG,KAAI,SAAEC,GAAe,MAAAH,GAAKI,eAAeD,GAAYE,IAAIhD,WAS5E+B,EAAJN,UAAAwB,QAAI,SAAQP,GAAR,GAAJC,GAAAxB,KACcd,EAAUD,EAAawC,EAAAA,YAAYF,IACnCQ,EAAc7C,EAAQC,IAAG,SAAErB,GAAU,MAAA0D,GAAKI,eAAe9D,GAAOkE,YAEtE,OAAOC,GAAAA,cAAcF,GAAaG,KAC9BC,EAAAA,aAAa,EAAGC,EAAAA,eAChBjD,EAAAA,IAAG,SAAEkD,GACjB,GAAsBC,IACFzD,SAAS,EACT0D,eAQJ,OALAF,GAAiBG,QAAO,SAAEC,GACtBH,EAASzD,QAAUyD,EAASzD,SAAW4D,EAAM5D,QAC7CyD,EAASC,YAAYE,EAAM3E,OAAS2E,EAAM5D,UAGvCyD,MAKX1B,EAAZN,UAAAsB,eAAI,SAAuB9D,GAAvB,GAAJ0D,GAAAxB,IAEQ,IAAIA,KAAKe,SAAS/C,IAAIF,GAClB,MAAOkC,MAAKe,SAAS2B,IAAI5E,EAGrC,IACY6E,GADEd,EAAsB7B,KAAKa,aAAaT,WAAWtC,GAInD8E,EAAkBC,EAAAA,iBAAgB,SAMnCC,GACGH,EAAa,SAAIlE,GAAW,MAAA+C,GAAKV,KAAKiC,IAAG,WAAO,MAAAD,GAASrE,MACzDoD,EAAI9C,YAAY4D,IACnB,WACK,MAAAd,GAAI7C,eAAe2D,KACxBT,KACGc,EAAAA,UAAUhD,KAAKiB,iBACfgC,EAAAA,UAAUpB,GACV1C,EAAAA,IAAG,SAAE+D,GAA4B,OAAEpF,MAAnDA,EAA0De,QAASqE,EAAQrE,YAI7DsE,GAAUnB,WAAYY,EAAiBf,IAAKA,EAGlD,OAFA7B,MAAKe,SAASqC,IAAItF,EAAOqF,GAElBA,kBAtFfxD,KAACa,EAAAA,WAADC,OAAaC,WAAY,+CA/BzBf,KAASG,IALTH,KAAqB0D,EAAAA,mJAArBzC,KEEa0C,GACXC,OAAQ,qBACRC,MAAO,4CACPC,OAAQ,6CACRC,MAAO,8CACPC,OAAQ,sBAERC,QAAS,kGAETC,OAAQ,iJAERC,IAAK,mGAGLC,gBAAiB,iDACjBC,eAAgB,wEAChBC,YAAa,iDAEbC,iBAAkB,kDAClBC,gBAAiB,0EACjBC,aAAc"}