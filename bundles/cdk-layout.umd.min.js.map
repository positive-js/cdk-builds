{"version":3,"file":"cdk-layout.umd.min.js","sources":["../../src/cdk/layout/media-matcher.ts","../../src/cdk/layout/breakpoints-observer.ts","../../src/cdk/layout/layout-module.ts","../../src/cdk/layout/breakpoints.ts"],"sourcesContent":["\nimport {Injectable} from '@angular/core';\nimport {Platform} from '@ptsecurity/cdk/platform';\n\n\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility: Set<string> = new Set<string>();\n\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode: HTMLStyleElement | undefined;\n\n/** A utility for calling matchMedia queries. */\n@Injectable({providedIn: 'root'})\nexport class MediaMatcher {\n  /** The internal matchMedia method to return back a MediaQueryList like object. */\n  private _matchMedia: (query: string) => MediaQueryList;\n\n  constructor(private platform: Platform) {\n    this._matchMedia = this.platform.isBrowser && window.matchMedia ?\n      // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n      // call it from a different scope.\n      window.matchMedia.bind(window) :\n      noopMatchMedia;\n  }\n\n  /**\n   * Evaluates the given media query and returns the native MediaQueryList from which results\n   * can be retrieved.\n   * Confirms the layout engine will trigger for the selector query provided and returns the\n   * MediaQueryList for the query provided.\n   */\n  matchMedia(query: string): MediaQueryList {\n    if (this.platform.WEBKIT) {\n      createEmptyStyleRule(query);\n    }\n\n    return this._matchMedia(query);\n  }\n}\n\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n */\nfunction createEmptyStyleRule(query: string) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\n      document.head.appendChild(mediaQueryStyleNode);\n    }\n\n    if (mediaQueryStyleNode.sheet) {\n      (mediaQueryStyleNode.sheet as CSSStyleSheet)\n          .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e); //tslint:disable-line\n  }\n}\n\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query: string): MediaQueryList {\n  return {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {}, //tslint:disable-line\n    removeListener: () => {} //tslint:disable-line\n  };\n}\n","\nimport {Injectable, NgZone, OnDestroy} from '@angular/core';\nimport {coerceArray} from '@ptsecurity/cdk/coercion';\nimport {combineLatest, fromEventPattern, Observable, Subject} from 'rxjs';\nimport {map, startWith, takeUntil} from 'rxjs/operators';\n\nimport {MediaMatcher} from './media-matcher';\n\n\n/** The current state of a layout breakpoint. */\nexport interface IBreakpointState {\n  /** Whether the breakpoint is currently matching. */\n  matches: boolean;\n}\n\ninterface IQuery {\n  observable: Observable<IBreakpointState>;\n  mql: MediaQueryList;\n}\n\n/** Utility for checking the matching state of @media queries. */\n@Injectable({providedIn: 'root'})\nexport class BreakpointObserver implements OnDestroy {\n  /**  A map of all media queries currently being listened for. */\n  private _queries: Map<string, IQuery> = new Map();\n  /** A subject for all other observables to takeUntil based on. */\n  private _destroySubject: Subject<{}> = new Subject();\n\n  constructor(private mediaMatcher: MediaMatcher, private zone: NgZone) {}\n\n  /** Completes the active subject, signalling to all other observables to complete. */\n  ngOnDestroy() {\n    this._destroySubject.next();\n    this._destroySubject.complete();\n  }\n\n  /**\n   * Whether one or more media queries match the current viewport size.\n   * @param value One or more media queries to check.\n   * @returns Whether any of the media queries match.\n   */\n  isMatched(value: string | string[]): boolean {\n    const queries = splitQueries(coerceArray(value));\n\n    return queries.some((mediaQuery) => this._registerQuery(mediaQuery).mql.matches);\n  }\n\n  /**\n   * Gets an observable of results for the given queries that will emit new results for any changes\n   * in matching of the given queries.\n   * @param value One or more media queries to check.\n   * @returns A stream of matches for the given queries.\n   */\n  observe(value: string | string[]): Observable<IBreakpointState> {\n    const queries = splitQueries(coerceArray(value));\n    const observables = queries.map((query) => this._registerQuery(query).observable);\n\n    return combineLatest(observables).pipe(map((breakpointStates: IBreakpointState[]) => {\n      return {\n        matches: breakpointStates.some((state) => state && state.matches)\n      };\n    }));\n  }\n\n  /** Registers a specific query to be listened for. */\n  private _registerQuery(query: string): IQuery {\n    // Only set up a new MediaQueryList if it is not already being listened for.\n    if (this._queries.has(query)) {\n      return this._queries.get(query)!; //tslint:disable-line\n    }\n\n    const mql: MediaQueryList = this.mediaMatcher.matchMedia(query);\n    // Create callback for match changes and add it is as a listener.\n    const queryObservable = fromEventPattern(\n      // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n      // back into the zone because matchMedia is only included in Zone.js by loading the\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n      // patches it.\n      (listener: MediaQueryListListener) => {\n        mql.addListener((e: MediaQueryList) => this.zone.run(() => listener(e)));\n      },\n      (listener: MediaQueryListListener) => {\n        mql.removeListener((e: MediaQueryList) => this.zone.run(() => listener(e)));\n      })\n      .pipe(\n        takeUntil(this._destroySubject),\n        startWith(mql),\n        map((nextMql: MediaQueryList) => ({matches: nextMql.matches}))\n      );\n\n    // Add the MediaQueryList to the set of queries.\n    const output = {observable: queryObservable, mql: mql}; //tslint:disable-line\n    this._queries.set(query, output);\n\n    return output;\n  }\n}\n\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries: string[]): string[] {\n  return queries.map((query: string) => query.split(','))\n                .reduce((a1: string[], a2: string[]) => a1.concat(a2))\n                .map((query) => query.trim());\n}\n","\nimport {NgModule} from '@angular/core';\n\n\n@NgModule()\nexport class LayoutModule {}\n","// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nexport const Breakpoints = {\n  XSmall: '(max-width: 599px)',\n  Small: '(min-width: 600px) and (max-width: 959px)',\n  Medium: '(min-width: 960px) and (max-width: 1279px)',\n  Large: '(min-width: 1280px) and (max-width: 1919px)',\n  XLarge: '(min-width: 1920px)',\n\n  Handset: '(max-width: 599px) and (orientation: portrait), ' +\n           '(max-width: 959px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait), ' +\n          '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' +\n       '(min-width: 1280px) and (orientation: landscape)',\n\n  HandsetPortrait: '(max-width: 599px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n\n  HandsetLandscape: '(max-width: 959px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)'\n};\n"],"names":["createEmptyStyleRule","query","mediaQueriesForWebkitCompatibility","has","mediaQueryStyleNode","document","createElement","setAttribute","head","appendChild","sheet","insertRule","add","e","console","error","noopMatchMedia","matches","media","addListener","removeListener","splitQueries","queries","map","split","reduce","a1","a2","concat","trim","LayoutModule","type","NgModule","Set","MediaMatcher","platform","this","_matchMedia","isBrowser","window","matchMedia","bind","prototype","WEBKIT","Injectable","args","providedIn","Platform","BreakpointObserver","mediaMatcher","zone","_queries","Map","_destroySubject","Subject","ngOnDestroy","next","complete","isMatched","value","_this","coerceArray","some","mediaQuery","_registerQuery","mql","observe","observables","observable","combineLatest","pipe","breakpointStates","state","get","queryObservable","fromEventPattern","listener","run","takeUntil","startWith","nextMql","output","set","NgZone","Breakpoints","XSmall","Small","Medium","Large","XLarge","Handset","Tablet","Web","HandsetPortrait","TabletPortrait","WebPortrait","HandsetLandscape","TabletLandscape","WebLandscape"],"mappings":"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"}