{"version":3,"file":"cdk-scrolling.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../packages/cdk/scrolling/fixed-size-virtual-scroll.ts","../../packages/cdk/scrolling/virtual-scroll-viewport.ts","../../packages/cdk/scrolling/virtual-for-of.ts","../../packages/cdk/scrolling/viewport-ruler.ts","../../packages/cdk/scrolling/virtual-scroll-strategy.ts","../../packages/cdk/scrolling/scroll-dispatcher.ts","../../packages/cdk/scrolling/scrollable.ts","../../packages/cdk/scrolling/scrolling-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Directive, forwardRef, Input, OnChanges } from '@angular/core';\nimport { coerceNumberProperty } from '@ptsecurity/cdk/coercion';\nimport { Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\nimport { VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy } from './virtual-scroll-strategy';\nimport { CdkVirtualScrollViewport } from './virtual-scroll-viewport';\n\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nexport class FixedSizeVirtualScrollStrategy implements VirtualScrollStrategy {\n\n    private _scrolledIndexChange = new Subject<number>();\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    scrolledIndexChange: Observable<number> = this._scrolledIndexChange.pipe(distinctUntilChanged());\n\n    /** The attached viewport. */\n    private _viewport: CdkVirtualScrollViewport | null = null;\n\n    /** The size of the items in the virtually scrolling list. */\n    private _itemSize: number;\n\n    /** The minimum amount of buffer rendered beyond the viewport (in pixels). */\n    private _minBufferPx: number;\n\n    /** The number of buffer items to render beyond the edge of the viewport (in pixels). */\n    private _maxBufferPx: number;\n\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport: CdkVirtualScrollViewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n        if (maxBufferPx < minBufferPx) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() { /* no-op */\n    }\n\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() { /* no-op */\n    }\n\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index: number, behavior: ScrollBehavior): void {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n\n    /** Update the viewport's total content size. */\n    private _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n\n    /** Update the viewport's rendered range. */\n    private _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n\n        const scrollOffset = this._viewport.measureScrollOffset();\n        const firstVisibleIndex = scrollOffset / this._itemSize;\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = {start: renderedRange.start, end: renderedRange.end};\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength,\n                Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        } else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0,\n                        Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n\n\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nexport function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir: CdkFixedSizeVirtualScroll) {\n    return fixedSizeDir._scrollStrategy;\n}\n\n\n/** A virtual scroll strategy that supports fixed-size items. */\n@Directive({\n    selector: 'cdk-virtual-scroll-viewport[itemSize]',\n    providers: [{\n        provide: VIRTUAL_SCROLL_STRATEGY,\n        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n        deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n    }]\n})\nexport class CdkFixedSizeVirtualScroll implements OnChanges {\n    /** The size of the items in the list (in pixels). */\n    @Input()\n    get itemSize(): number {\n        return this._itemSize;\n    }\n\n    set itemSize(value: number) {\n        this._itemSize = coerceNumberProperty(value);\n    }\n\n    _itemSize = 20;\n\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    @Input()\n    get minBufferPx(): number {\n        return this._minBufferPx;\n    }\n\n    set minBufferPx(value: number) {\n        this._minBufferPx = coerceNumberProperty(value);\n    }\n\n    _minBufferPx = 100;\n\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    @Input()\n    get maxBufferPx(): number {\n        return this._maxBufferPx;\n    }\n\n    set maxBufferPx(value: number) {\n        this._maxBufferPx = coerceNumberProperty(value);\n    }\n\n    _maxBufferPx = 200;\n\n    /** The scroll strategy used by this directive. */\n    _scrollStrategy =\n        new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    Inject,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { ListRange } from '@ptsecurity/cdk/collections';\nimport { animationFrameScheduler, Observable, Subject, Observer } from 'rxjs';\nimport { auditTime, startWith, takeUntil } from 'rxjs/operators';\n\nimport { ScrollDispatcher } from './scroll-dispatcher';\nimport { CdkScrollable, ExtendedScrollToOptions } from './scrollable';\nimport { CdkVirtualForOf } from './virtual-for-of';\nimport { VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy } from './virtual-scroll-strategy';\n\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1: ListRange, r2: ListRange): boolean {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n\n\n/** A viewport that virtualizes it's scrolling with the help of `CdkVirtualForOf`. */\n@Component({\n    selector: 'cdk-virtual-scroll-viewport',\n    templateUrl: 'virtual-scroll-viewport.html',\n    styleUrls: ['virtual-scroll-viewport.css'],\n    host: {\n        class: 'cdk-virtual-scroll-viewport',\n        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{\n        provide: CdkScrollable,\n        useExisting: CdkVirtualScrollViewport\n    }]\n})\nexport class CdkVirtualScrollViewport extends CdkScrollable implements OnInit, OnDestroy {\n\n    /** The direction the viewport scrolls. */\n    @Input() orientation: 'horizontal' | 'vertical' = 'vertical';\n\n    // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n    // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n    // depending on how the strategy calculates the scrolled index, it may come at a cost to\n    // performance.\n    /** Emits when the index of the first element visible in the viewport changes. */\n    @Output() scrolledIndexChange: Observable<number> =\n        new Observable((observer: Observer<number>) =>\n            this._scrollStrategy.scrolledIndexChange.subscribe((index) =>\n                Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n\n    /** The element that wraps the rendered content. */\n    @ViewChild('contentWrapper', {static: true}) _contentWrapper: ElementRef<HTMLElement>;\n\n    /** Emits when the viewport is detached from a CdkVirtualForOf. */\n    private _detachedSubject = new Subject<void>();\n\n    /** Emits when the rendered range changes. */\n    private _renderedRangeSubject = new Subject<ListRange>();\n\n    /** A stream that emits whenever the rendered range changes. */\n    renderedRangeStream: Observable<ListRange> = this._renderedRangeSubject.asObservable();\n\n    /**\n     * The transform used to scale the spacer to the same size as all content, including content that\n     * is not currently rendered.\n     */\n    _totalContentSizeTransform = '';\n\n    /**\n     * The total size of all content (in pixels), including content that is not currently rendered.\n     */\n    private _totalContentSize = 0;\n\n    /**\n     * The CSS transform applied to the rendered subset of items so that they appear within the bounds\n     * of the visible viewport.\n     */\n    private _renderedContentTransform: string;\n\n    /** The currently rendered range of indices. */\n    private _renderedRange: ListRange = {start: 0, end: 0};\n\n    /** The length of the data bound to this viewport (in number of items). */\n    private _dataLength = 0;\n\n    /** The size of the viewport (in pixels). */\n    private _viewportSize = 0;\n\n    /** the currently attached CdkVirtualForOf. */\n    private _forOf: CdkVirtualForOf<any> | null;\n\n    /** The last rendered content offset that was set. */\n    private _renderedContentOffset = 0;\n\n    /**\n     * Whether the last rendered content offset was to the end of the content (and therefore needs to\n     * be rewritten as an offset to the start of the content).\n     */\n    private _renderedContentOffsetNeedsRewrite = false;\n\n    /** Whether there is a pending change detection cycle. */\n    private _isChangeDetectionPending = false;\n\n    /** A list of functions to run after the next change detection cycle. */\n    private _runAfterChangeDetection: Function[] = [];\n\n    constructor(public elementRef: ElementRef<HTMLElement>,\n                private _changeDetectorRef: ChangeDetectorRef,\n                ngZone: NgZone,\n                @Optional() @Inject(VIRTUAL_SCROLL_STRATEGY)\n                private _scrollStrategy: VirtualScrollStrategy,\n                @Optional() dir: Directionality,\n                scrollDispatcher: ScrollDispatcher) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n\n        if (!_scrollStrategy) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n\n            this.elementScrolled()\n                .pipe(\n                    // Start off with a fake scroll event so we properly detect our initial position.\n                    startWith<Event | null>(null!),\n                    // Collect multiple events into one until the next animation frame. This way if\n                    // there are multiple scroll events in the same frame we only need to recheck\n                    // our layout once.\n                    auditTime(0, animationFrameScheduler))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n\n            this._markChangeDetectionNeeded();\n        }));\n    }\n\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n\n        super.ngOnDestroy();\n    }\n\n    /** Attaches a `CdkVirtualForOf` to this viewport. */\n    attach(forOf: CdkVirtualForOf<any>) {\n        if (this._forOf) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe((data) => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength(): number {\n        return this._dataLength;\n    }\n\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize(): number {\n        return this._viewportSize;\n    }\n\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n\n    /** Get the current rendered range of items. */\n    getRenderedRange(): ListRange {\n        return this._renderedRange;\n    }\n\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size: number) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            const axis = this.orientation == 'horizontal' ? 'X' : 'Y';\n            this._totalContentSizeTransform = `scale${axis}(${this._totalContentSize})`;\n            this._markChangeDetectionNeeded();\n        }\n    }\n\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range: ListRange) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            this._renderedRangeSubject.next(this._renderedRange = range);\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart(): number | null {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset: number, to: 'to-start' | 'to-end' = 'to-start') {\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mc-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                } else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset: number, behavior: ScrollBehavior = 'auto') {\n        const options: ExtendedScrollToOptions = {behavior};\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        } else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    }\n\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index: number, behavior: ScrollBehavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from?: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\n        return super.measureScrollOffset(\n            from ? from : this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize(): number {\n        const contentEl = this._contentWrapper.nativeElement;\n\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range: ListRange): number {\n        if (!this._forOf) {\n            return 0;\n        }\n\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n\n    /** Measure the viewport size. */\n    private _measureViewportSize() {\n        const viewportEl = this.elementRef.nativeElement;\n        this._viewportSize = this.orientation === 'horizontal' ?\n            viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n\n    /** Queue up change detection to run. */\n    private _markChangeDetectionNeeded(runAfter?: Function) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n\n    /** Run change detection. */\n    private _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n}\n","import {\n    Directive,\n    DoCheck,\n    EmbeddedViewRef,\n    Input,\n    IterableChangeRecord,\n    IterableChanges,\n    IterableDiffer,\n    IterableDiffers,\n    NgIterable,\n    NgZone,\n    OnDestroy,\n    SkipSelf,\n    TemplateRef,\n    TrackByFunction,\n    ViewContainerRef\n} from '@angular/core';\n\nimport { Observable, Subject, of as observableOf } from 'rxjs';\nimport { pairwise, shareReplay, startWith, switchMap, takeUntil } from 'rxjs/operators';\n\nimport {\n    ArrayDataSource,\n    ICollectionViewer,\n    DataSource,\n    ListRange,\n    isDataSource\n} from '@ptsecurity/cdk/collections';\n\nimport { CdkVirtualScrollViewport } from './virtual-scroll-viewport';\n\n\n/** The context for an item rendered by `CdkVirtualForOf` */\nexport type CdkVirtualForOfContext<T> = {\n    /** The item value. */\n    $implicit: T;\n    /** The DataSource, Observable, or NgIterable that was passed to *cdkVirtualFor. */\n    cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\n    /** The index of the item in the DataSource. */\n    index: number;\n    /** The number of items in the DataSource. */\n    count: number;\n    /** Whether this is the first item in the DataSource. */\n    first: boolean;\n    /** Whether this is the last item in the DataSource. */\n    last: boolean;\n    /** Whether the index is even. */\n    even: boolean;\n    /** Whether the index is odd. */\n    odd: boolean;\n};\n\n\n/** Helper to extract size from a DOM Node. */\nfunction getSize(orientation: 'horizontal' | 'vertical', node: Node): number {\n    const el = node as Element;\n\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n\n    return orientation === 'horizontal' ? rect.width : rect.height;\n}\n\n\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\n@Directive({\n    selector: '[cdkVirtualFor][cdkVirtualForOf]',\n})\nexport class CdkVirtualForOf<T> implements ICollectionViewer, DoCheck, OnDestroy {\n    /** Emits when the rendered view of the data changes. */\n    viewChange = new Subject<ListRange>();\n\n    /** Subject that emits when a new DataSource instance is given. */\n    private _dataSourceChanges = new Subject<DataSource<T>>();\n\n    /** The DataSource to display. */\n    @Input()\n    get cdkVirtualForOf(): DataSource<T> | Observable<T[]> | NgIterable<T> {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value: DataSource<T> | Observable<T[]> | NgIterable<T>) {\n        this._cdkVirtualForOf = value;\n        const ds = isDataSource(value) ? value :\n            // Slice the value if its an NgIterable to ensure we're working with an array.\n            new ArrayDataSource<T>(\n                value instanceof Observable ? value : Array.prototype.slice.call(value || []));\n        this._dataSourceChanges.next(ds);\n    }\n    _cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\n\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    @Input()\n    get cdkVirtualForTrackBy(): TrackByFunction<T> | undefined {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn: TrackByFunction<T> | undefined) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn ?\n            (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\n            undefined;\n    }\n    private _cdkVirtualForTrackBy: TrackByFunction<T> | undefined;\n\n    /** The template used to stamp out new elements. */\n    @Input()\n    set cdkVirtualForTemplate(value: TemplateRef<CdkVirtualForOfContext<T>>) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    @Input() cdkVirtualForTemplateCacheSize: number = 20;\n\n    /** Emits whenever the data in the current DataSource changes. */\n    dataStream: Observable<T[] | ReadonlyArray<T>> = this._dataSourceChanges\n        .pipe(\n            // Start off with null `DataSource`.\n            startWith(null!),\n            // Bundle up the previous and current data sources so we can work with both.\n            pairwise(),\n            // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n            // new one, passing back a stream of data changes which we run through `switchMap` to give\n            // us a data stream that emits the latest data from whatever the current `DataSource` is.\n            switchMap(([prev, cur]) => this._changeDataSource(prev, cur)),\n            // Replay the last emitted data when someone subscribes.\n            shareReplay(1));\n\n    /** The differ used to calculate changes to the data. */\n    private _differ: IterableDiffer<T> | null = null;\n\n    /** The most recent data emitted from the DataSource. */\n    private _data: T[] | ReadonlyArray<T>;\n\n    /** The currently rendered items. */\n    private _renderedItems: T[];\n\n    /** The currently rendered range of indices. */\n    private _renderedRange: ListRange;\n\n    /**\n     * The template cache used to hold on ot template instancess that have been stamped out, but don't\n     * currently need to be rendered. These instances will be reused in the future rather than\n     * stamping out brand new ones.\n     */\n    private _templateCache: EmbeddedViewRef<CdkVirtualForOfContext<T>>[] = [];\n\n    /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n    private _needsUpdate = false;\n\n    private _destroyed = new Subject<void>();\n\n    constructor(\n        /** The view container to add items to. */\n        private _viewContainerRef: ViewContainerRef,\n        /** The template to use when stamping out new items. */\n        private _template: TemplateRef<CdkVirtualForOfContext<T>>,\n        /** The set of available differs. */\n        private _differs: IterableDiffers,\n        /** The virtual scrolling viewport that these items are being rendered in. */\n        @SkipSelf() private _viewport: CdkVirtualScrollViewport,\n        ngZone: NgZone) {\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            ngZone.run(() => this.viewChange.next(this._renderedRange));\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range: ListRange, orientation: 'horizontal' | 'vertical'): number {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n\n        // Loop over all root nodes for all items in the range and sum up their size.\n        let totalSize = 0;\n        let i = rangeLen;\n        while (i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex) as\n                EmbeddedViewRef<CdkVirtualForOfContext<T>> | null;\n            let j = view ? view.rootNodes.length : 0;\n            while (j--) {\n                totalSize += getSize(orientation, view!.rootNodes[j]);\n            }\n        }\n\n        return totalSize;\n    }\n\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO: We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            } else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n\n    ngOnDestroy() {\n        this._viewport.detach();\n\n        this._dataSourceChanges.next();\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n\n        this._destroyed.next();\n        this._destroyed.complete();\n\n        for (let view of this._templateCache) {\n            view.destroy();\n        }\n    }\n\n    /** React to scroll state changes in the viewport. */\n    private _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n        }\n        this._needsUpdate = true;\n    }\n\n    /** Swap out one `DataSource` for another. */\n    private _changeDataSource(oldDs: DataSource<T> | null, newDs: DataSource<T> | null):\n        Observable<T[] | ReadonlyArray<T>> {\n\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n\n        this._needsUpdate = true;\n\n        return newDs ? newDs.connect(this) : observableOf();\n    }\n\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    private _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            let view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n\n    /** Apply changes to the DOM. */\n    private _applyChanges(changes: IterableChanges<T>) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record: IterableChangeRecord<T>,\n                                  adjustedPreviousIndex: number | null,\n                                  currentIndex: number | null) => {\n            if (record.previousIndex == null) {  // Item added.\n                const view = this._insertViewForNewItem(currentIndex!);\n                view.context.$implicit = record.item;\n            } else if (currentIndex == null) {  // Item removed.\n                this._cacheView(this._detachView(adjustedPreviousIndex !));\n            } else {  // Item moved.\n                const view = this._viewContainerRef.get(adjustedPreviousIndex!) as\n                    EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n                this._viewContainerRef.move(view, currentIndex);\n                view.context.$implicit = record.item;\n            }\n        });\n\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record: IterableChangeRecord<T>) => {\n            const view = this._viewContainerRef.get(record.currentIndex!) as\n                EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n            view.context.$implicit = record.item;\n        });\n\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n\n    /** Cache the given detached view. */\n    private _cacheView(view: EmbeddedViewRef<CdkVirtualForOfContext<T>>) {\n        if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n            this._templateCache.push(view);\n        } else {\n            const index = this._viewContainerRef.indexOf(view);\n\n            // It's very unlikely that the index will ever be -1, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            } else {\n                this._viewContainerRef.remove(index);\n            }\n        }\n    }\n\n    /** Inserts a view for a new item, either from the cache or by creating a new one. */\n    private _insertViewForNewItem(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\n        return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\n    }\n\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    private _updateComputedContextProperties(context: CdkVirtualForOfContext<any>) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n\n    /** Creates a new embedded view and moves it to the given index */\n    private _createEmbeddedViewAt(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\n        const view = this._viewContainerRef.createEmbeddedView(this._template, {\n            $implicit: null!,\n            cdkVirtualForOf: this._cdkVirtualForOf,\n            index: -1,\n            count: -1,\n            first: false,\n            last: false,\n            odd: false,\n            even: false\n        });\n        if (index < this._viewContainerRef.length) {\n            this._viewContainerRef.move(view, index);\n        }\n\n        return view;\n    }\n\n    /** Inserts a recycled view from the cache at the given index. */\n    private _insertViewFromCache(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>>|null {\n        const cachedView = this._templateCache.pop();\n        if (cachedView) {\n            this._viewContainerRef.insert(cachedView, index);\n        }\n\n        return cachedView || null;\n    }\n\n    /** Detaches the embedded view at the given index. */\n    private _detachView(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\n        return this._viewContainerRef.detach(index) as\n            EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n    }\n}\n","import { Injectable, NgZone, OnDestroy, Optional, SkipSelf } from '@angular/core';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { merge, of as observableOf, fromEvent, Observable, Subscription } from 'rxjs';\nimport { auditTime } from 'rxjs/operators';\n\n\n/** Time in ms to throttle the resize events by default. */\nexport const DEFAULT_RESIZE_TIME = 20;\n\nexport interface ViewportScrollPosition {\n    top: number;\n    left: number;\n}\n\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class ViewportRuler implements OnDestroy {\n    /** Cached viewport dimensions. */\n    private _viewportSize: {width: number; height: number};\n\n    /** Stream of viewport change events. */\n    private _change: Observable<Event>;\n\n    /** Subscription to streams that invalidate the cached viewport dimensions. */\n    private _invalidateCache: Subscription;\n\n    constructor(private _platform: Platform, ngZone: NgZone) {\n        ngZone.runOutsideAngular(() => {\n            this._change = _platform.isBrowser ?\n                merge<Event>(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) :\n                observableOf();\n\n            // Note that we need to do the subscription inside `runOutsideAngular`\n            // since subscribing is what causes the event listener to be added.\n            this._invalidateCache = this.change().subscribe(() => this._updateViewportSize());\n        });\n    }\n\n    ngOnDestroy() {\n        this._invalidateCache.unsubscribe();\n    }\n\n    /** Returns the viewport's width and height. */\n    getViewportSize(): Readonly<{width: number, height: number}> {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n\n        const output = {width: this._viewportSize.width, height: this._viewportSize.height};\n\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null!; //tslint:disable-line\n        }\n\n        return output;\n    }\n\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect(): ClientRect {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const {width, height} = this.getViewportSize();\n\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width\n        };\n    }\n\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition(): ViewportScrollPosition {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return {top: 0, left: 0};\n        }\n\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const documentElement = document.documentElement!;\n        const documentRect = documentElement.getBoundingClientRect();\n\n        const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            document.documentElement!.scrollTop || 0;\n\n        const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            document.documentElement!.scrollLeft || 0;\n\n        return { top, left };\n    }\n\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime: number = DEFAULT_RESIZE_TIME): Observable<Event> {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n\n    /** Updates the cached viewport size. */\n    private _updateViewportSize() {\n        this._viewportSize = this._platform.isBrowser ?\n            {width: window.innerWidth, height: window.innerHeight} :\n            {width: 0, height: 0};\n    }\n}\n\n\n/** @docs-private\n * @deprecated\n */\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\n                                                platform: Platform,\n                                                ngZone: NgZone) {\n    return parentRuler || new ViewportRuler(platform, ngZone);\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const VIEWPORT_RULER_PROVIDER = {\n    // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n    provide: ViewportRuler,\n    deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\n    useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CdkVirtualScrollViewport } from './virtual-scroll-viewport';\n\n\n/** The injection token used to specify the virtual scrolling strategy. */\nexport const VIRTUAL_SCROLL_STRATEGY =\n    new InjectionToken<VirtualScrollStrategy>('VIRTUAL_SCROLL_STRATEGY');\n\n\n/** A strategy that dictates which items should be rendered in the viewport. */\nexport interface VirtualScrollStrategy {\n    /** Emits when the index of the first element visible in the viewport changes. */\n    scrolledIndexChange: Observable<number>;\n\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport: CdkVirtualScrollViewport): void;\n\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach(): void;\n\n    /** Called when the viewport is scrolled (debounced using requestAnimationFrame). */\n    onContentScrolled(): void;\n\n    /** Called when the length of the data changes. */\n    onDataLengthChanged(): void;\n\n    /** Called when the range of items rendered in the DOM has changed. */\n    onContentRendered(): void;\n\n    /** Called when the offset of the rendered items changed. */\n    onRenderedOffsetChanged(): void;\n\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index: number, behavior: ScrollBehavior): void;\n}\n","import {\n    ElementRef,\n    Injectable,\n    NgZone,\n    OnDestroy\n} from '@angular/core';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { fromEvent, of as observableOf, Subject, Subscription, Observable, Observer } from 'rxjs';\nimport { auditTime, filter } from 'rxjs/operators';\n\nimport { CdkScrollable } from './scrollable';\n\n\n/** Time in ms to throttle the scrolling events by default. */\nexport const DEFAULT_SCROLL_TIME = 20;\n\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollDispatcher implements OnDestroy {\n\n    /**\n     * Map of all the scrollable references that are registered with the service and their\n     * scroll event subscriptions.\n     */\n    scrollContainers: Map<CdkScrollable, Subscription> = new Map();\n\n    /** Keeps track of the global `scroll` and `resize` subscriptions. */\n    _globalSubscription: Subscription | null = null;\n\n    /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n    private _scrolled = new Subject<CdkScrollable | void>();\n\n    /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n    private scrolledCount = 0;\n\n    constructor(private ngZone: NgZone, private platform: Platform) { }\n\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable: CdkScrollable): void {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                .subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable: CdkScrollable): void {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME): Observable<CdkScrollable | void> {\n\n        if (!this.platform.isBrowser) {\n            return observableOf<void>();\n        }\n\n        return new Observable((observer: Observer<CdkScrollable | void>) => {\n            if (!this._globalSubscription) {\n                this.addGlobalListener();\n            }\n\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0 ?\n                this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                this._scrolled.subscribe(observer);\n\n            this.scrolledCount++;\n\n            return () => {\n                subscription.unsubscribe();\n                this.scrolledCount--;\n\n                if (!this.scrolledCount) {\n                    this.removeGlobalListener();\n                }\n            };\n        });\n    }\n\n    ngOnDestroy() {\n        this.removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementRef: ElementRef, auditTimeInMs?: number): Observable<CdkScrollable | void> {\n        const ancestors = this.getAncestorScrollContainers(elementRef);\n\n        return this.scrolled(auditTimeInMs).pipe(filter((target) => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementRef: ElementRef): CdkScrollable[] {\n        const scrollingContainers: CdkScrollable[] = [];\n\n        this.scrollContainers.forEach((_subscription: Subscription, scrollable: CdkScrollable) => {\n            if (this.scrollableContainsElement(scrollable, elementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n\n        return scrollingContainers;\n    }\n\n    /** Returns true if the element is contained within the provided Scrollable. */\n    private scrollableContainsElement(scrollable: CdkScrollable, elementRef: ElementRef): boolean {\n        let element: HTMLElement | null = elementRef.nativeElement;\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) { return true; }\n        } while (element = element!.parentElement);\n\n        return false;\n    }\n\n    /** Sets up the global scroll listeners. */\n    private addGlobalListener() {\n        this._globalSubscription = this.ngZone.runOutsideAngular(() => {\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n\n    /** Cleans up the global scroll listener. */\n    private removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\n","import { Directive, ElementRef, OnInit, OnDestroy, NgZone, Optional } from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior } from '@ptsecurity/cdk/platform';\nimport { fromEvent, Observable, Observer, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { ScrollDispatcher } from './scroll-dispatcher';\n\n\nexport type _Without<T> = {[P in keyof T]?: never};\nexport type _XOR<T, U> = (_Without<T> & U) | (_Without<U> & T);\n\nexport interface _Top    { top?: number; }\nexport interface _Bottom { bottom?: number; }\nexport interface _Left   { left?: number; }\nexport interface _Right  { right?: number; }\nexport interface _Start  { start?: number; }\nexport interface _End    { end?: number; }\n\nexport type _XAxis = _XOR<_XOR<_Left, _Right>, _XOR<_Start, _End>>;\nexport type _YAxis = _XOR<_Top, _Bottom>;\n\n/**\n * An extended version of ScrollToOptions that allows expressing scroll offsets relative to the\n * top, bottom, left, right, start, or end of the viewport rather than just the top and left.\n * Please note: the top and bottom properties are mutually exclusive, as are the left, right,\n * start, and end properties.\n */\nexport type ExtendedScrollToOptions = _XAxis & _YAxis & ScrollOptions;\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n@Directive({\n    selector: '[cdk-scrollable], [cdkScrollable]'\n})\nexport class CdkScrollable implements OnInit, OnDestroy {\n\n    private destroyed = new Subject();\n\n    private _elementScrolled: Observable<Event> = new Observable((observer: Observer<Event>) =>\n        this.ngZone.runOutsideAngular(() =>\n            fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this.destroyed))\n                .subscribe(observer)));\n\n    constructor(protected elementRef: ElementRef<HTMLElement>,\n                protected scrollDispatcher: ScrollDispatcher,\n                protected ngZone: NgZone,\n                @Optional() protected dir?: Directionality\n    ) {}\n\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled(): Observable<Event> {\n        return this._elementScrolled;\n    }\n\n    /** Gets the ElementRef for the viewport. */\n    getElementRef(): ElementRef<HTMLElement> {\n        return this.elementRef;\n    }\n\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options: ExtendedScrollToOptions): void {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n\n        // Rewrite start & end offsets as right or left offsets.\n        options.left = options.left == null ? (isRtl ? options.end : options.start) : options.left;\n        options.right = options.right == null ? (isRtl ? options.start : options.end) : options.right;\n\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            (options as _Without<_Bottom> & _Top).top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n            if (options.left != null) {\n                (options as _Without<_Left> & _Right).right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n\n            if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n                options.left = options.right;\n            } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        } else {\n            if (options.right != null) {\n                (options as _Without<_Right> & _Left).left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n\n        this.applyScrollToOptions(options);\n    }\n\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        } else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n\n        if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            } else {\n                return el.scrollLeft;\n            }\n        } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            } else {\n                return -el.scrollLeft;\n            }\n        } else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            } else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n\n    private applyScrollToOptions(options: ScrollToOptions): void {\n        const el = this.elementRef.nativeElement;\n\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        } else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n\n\n}\n","import { NgModule } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { CdkFixedSizeVirtualScroll } from './fixed-size-virtual-scroll';\nimport { CdkScrollable } from './scrollable';\nimport { CdkVirtualForOf } from './virtual-for-of';\nimport { CdkVirtualScrollViewport } from './virtual-scroll-viewport';\n\n\n@NgModule({\n    imports: [BidiModule, PlatformModule],\n    exports: [\n        BidiModule,\n        CdkFixedSizeVirtualScroll,\n        CdkScrollable,\n        CdkVirtualForOf,\n        CdkVirtualScrollViewport\n    ],\n    declarations: [\n        CdkFixedSizeVirtualScroll,\n        CdkScrollable,\n        CdkVirtualForOf,\n        CdkVirtualScrollViewport\n    ]\n})\nexport class ScrollingModule {}\n\n\n/**\n * @deprecated\n * @breaking-change\n */\n@NgModule({\n    imports: [ScrollingModule],\n    exports: [ScrollingModule]\n})\nexport class ScrollDispatchModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","rangesEqual","r1","r2","start","end","getSize","orientation","node","el","getBoundingClientRect","rect","width","height","VIEWPORT_RULER_PROVIDER_FACTORY","parentRuler","platform","ngZone","ViewportRuler","setPrototypeOf","__proto__","Array","p","hasOwnProperty","VIRTUAL_SCROLL_STRATEGY","InjectionToken","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","Subject","scrolledIndexChange","pipe","distinctUntilChanged","_viewport","_itemSize","_minBufferPx","_maxBufferPx","attach","viewport","_updateTotalContentSize","_updateRenderedRange","detach","complete","updateItemAndBufferSize","Error","onContentScrolled","onDataLengthChanged","onContentRendered","onRenderedOffsetChanged","scrollToIndex","index","behavior","scrollToOffset","setTotalContentSize","getDataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","renderedRange","getRenderedRange","newRange","viewportSize","getViewportSize","dataLength","startBuffer","expandStart","Math","ceil","max","min","endBuffer","expandEnd","floor","setRenderedRange","setRenderedContentOffset","next","CdkFixedSizeVirtualScroll","defineProperty","value","coerceNumberProperty","ngOnChanges","type","Directive","args","selector","providers","provide","useFactory","deps","forwardRef","Input","ScrollDispatcher","scrollContainers","Map","_globalSubscription","_scrolled","scrolledCount","register","scrollable","_this","has","set","elementScrolled","subscribe","deregister","scrollableReference","get","unsubscribe","delete","scrolled","auditTimeInMs","isBrowser","Observable","observer","addGlobalListener","subscription","auditTime","removeGlobalListener","observableOf","ngOnDestroy","forEach","_","container","ancestorScrolled","elementRef","ancestors","getAncestorScrollContainers","filter","target","indexOf","scrollingContainers","_subscription","scrollableContainsElement","push","element","nativeElement","scrollableElement","getElementRef","parentElement","runOutsideAngular","fromEvent","window","document","Injectable","providedIn","NgZone","Platform","CdkScrollable","scrollDispatcher","dir","destroyed","_elementScrolled","takeUntil","ngOnInit","scrollTo","options","isRtl","left","right","bottom","top","scrollHeight","clientHeight","getRtlScrollAxisType","RtlScrollAxisType","NORMAL","scrollWidth","clientWidth","INVERTED","NEGATED","applyScrollToOptions","from","scrollTop","scrollLeft","supportsScrollBehavior","ElementRef","Directionality","decorators","Optional","CdkVirtualScrollViewport","_super","_changeDetectorRef","call","Promise","resolve","then","run","_detachedSubject","_renderedRangeSubject","renderedRangeStream","asObservable","_totalContentSizeTransform","_totalContentSize","_renderedRange","_dataLength","_viewportSize","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","tslib_1.__extends","_measureViewportSize","startWith","animationFrameScheduler","_markChangeDetectionNeeded","forOf","_forOf","dataStream","data","newLength","length","_doChangeDetection","size","axis","range","getOffsetToRenderedContentStart","offset","to","isHorizontal","axisDirection","transform","Number","_renderedContentTransform","measureRenderedContentSize","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","checkViewportSize","viewportEl","runAfter","markForCheck","style","runAfterChangeDetection","_i","runAfterChangeDetection_1","fn","Component","template","styles","host","class","[class.cdk-virtual-scroll-orientation-horizontal]","[class.cdk-virtual-scroll-orientation-vertical]","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","useExisting","ChangeDetectorRef","undefined","Inject","Output","ViewChild","static","CdkVirtualForOf","_viewContainerRef","_template","_differs","viewChange","_dataSourceChanges","cdkVirtualForTemplateCacheSize","pairwise","switchMap","_a","prev","cur","_changeDataSource","shareReplay","_differ","_templateCache","_needsUpdate","_destroyed","_data","_onRenderedDataChange","_cdkVirtualForOf","ds","isDataSource","ArrayDataSource","slice","_cdkVirtualForTrackBy","item","renderedStartIndex","rangeLen","totalSize","i","view","j","rootNodes","ngDoCheck","changes","diff","_renderedItems","_applyChanges","_updateContext","destroy","find","cdkVirtualForTrackBy","oldDs","newDs","disconnect","connect","count","context","_updateComputedContextProperties","detectChanges","forEachOperation","record","adjustedPreviousIndex","currentIndex","previousIndex","_insertViewForNewItem","$implicit","_cacheView","_detachView","move","forEachIdentityChange","remove","_insertViewFromCache","_createEmbeddedViewAt","first","last","even","odd","createEmbeddedView","cdkVirtualForOf","cachedView","pop","insert","ViewContainerRef","TemplateRef","IterableDiffers","SkipSelf","cdkVirtualForTemplate","ScrollingModule","NgModule","imports","BidiModule","PlatformModule","exports","declarations","ScrollDispatchModule","_platform","_change","merge","_invalidateCache","change","_updateViewportSize","output","getViewportRect","scrollPosition","getViewportScrollPosition","documentElement","documentRect","body","scrollY","scrollX","throttleTime","innerWidth","innerHeight","VIEWPORT_RULER_PROVIDER"],"mappings":"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"}