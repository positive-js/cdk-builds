{"version":3,"file":"cdk-scrolling.umd.min.js","sources":["../../src/cdk/scrolling/viewport-ruler.ts","../../src/cdk/scrolling/scroll-dispatcher.ts","../../src/cdk/scrolling/scrollable.ts","../../src/cdk/scrolling/scrolling-module.ts"],"sourcesContent":["import {Injectable, NgZone, OnDestroy, Optional, SkipSelf} from '@angular/core';\nimport {Platform} from '@ptsecurity/cdk/platform';\nimport {merge, of as observableOf, fromEvent, Observable, Subscription} from 'rxjs';\nimport {auditTime} from 'rxjs/operators';\n\n\n/** Time in ms to throttle the resize events by default. */\nexport const DEFAULT_RESIZE_TIME = 20;\n\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class ViewportRuler implements OnDestroy {\n    /** Cached viewport dimensions. */\n    private _viewportSize: {width: number; height: number};\n\n    /** Stream of viewport change events. */\n    private _change: Observable<Event>;\n\n    /** Subscription to streams that invalidate the cached viewport dimensions. */\n    private _invalidateCache: Subscription;\n\n    constructor(private _platform: Platform, ngZone: NgZone) {\n        this._change = _platform.isBrowser ? ngZone.runOutsideAngular(() => {\n            return merge<Event>(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange'));\n        }) : observableOf();\n\n        this._invalidateCache = this.change().subscribe(() => this._updateViewportSize());\n    }\n\n    ngOnDestroy() {\n        this._invalidateCache.unsubscribe();\n    }\n\n    /** Returns the viewport's width and height. */\n    getViewportSize(): Readonly<{width: number, height: number}> {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n\n        const output = {width: this._viewportSize.width, height: this._viewportSize.height};\n\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null!; //tslint:disable-line\n        }\n\n        return output;\n    }\n\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect(): ClientRect {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const {width, height} = this.getViewportSize();\n\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width\n        };\n    }\n\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return {top: 0, left: 0};\n        }\n\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const documentRect = document.documentElement.getBoundingClientRect();\n\n        const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            document.documentElement.scrollTop || 0;\n\n        const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            document.documentElement.scrollLeft || 0;\n\n        return {top, left};\n    }\n\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime: number = DEFAULT_RESIZE_TIME): Observable<Event> {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n\n    /** Updates the cached viewport size. */\n    private _updateViewportSize() {\n        this._viewportSize = this._platform.isBrowser ?\n            {width: window.innerWidth, height: window.innerHeight} :\n            {width: 0, height: 0};\n    }\n}\n\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\n                                                platform: Platform,\n                                                ngZone: NgZone) {\n    return parentRuler || new ViewportRuler(platform, ngZone);\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const VIEWPORT_RULER_PROVIDER = {\n    // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n    provide: ViewportRuler,\n    deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\n    useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n","import {\n    ElementRef,\n    Injectable,\n    NgZone,\n    OnDestroy\n} from '@angular/core';\nimport {Platform} from '@ptsecurity/cdk/platform';\nimport {fromEvent, of as observableOf, Subject, Subscription, Observable} from 'rxjs';\nimport {auditTime, filter} from 'rxjs/operators';\n\nimport {CdkScrollable} from './scrollable';\n\n\n/** Time in ms to throttle the scrolling events by default. */\nexport const DEFAULT_SCROLL_TIME = 20;\n\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollDispatcher implements OnDestroy {\n\n    /**\n     * Map of all the scrollable references that are registered with the service and their\n     * scroll event subscriptions.\n     */\n    scrollContainers: Map<CdkScrollable, Subscription> = new Map();\n\n    /** Keeps track of the global `scroll` and `resize` subscriptions. */\n    _globalSubscription: Subscription | null = null;\n\n    /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n    private _scrolled = new Subject<CdkScrollable|{}|void>();\n\n    /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n    private _scrolledCount = 0;\n\n    constructor(private _ngZone: NgZone, private _platform: Platform) { }\n\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable: CdkScrollable): void {\n        const scrollSubscription = scrollable.elementScrolled()\n            .subscribe(() => this._scrolled.next(scrollable));\n\n        this.scrollContainers.set(scrollable, scrollSubscription);\n    }\n\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable: CdkScrollable): void {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME): Observable<CdkScrollable|void> {\n        return this._platform.isBrowser ? Observable.create((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0 ?\n                this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                this._scrolled.subscribe(observer);\n\n            this._scrolledCount++;\n\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        }) : observableOf<void>();\n    }\n\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementRef: ElementRef, auditTimeInMs?: number): Observable<CdkScrollable|void> {\n        const ancestors = this.getAncestorScrollContainers(elementRef);\n\n        return this.scrolled(auditTimeInMs).pipe(filter((target: any) => {\n\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementRef: ElementRef): CdkScrollable[] {\n        const scrollingContainers: CdkScrollable[] = [];\n\n        this.scrollContainers.forEach((_subscription: Subscription, scrollable: CdkScrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n\n        return scrollingContainers;\n    }\n\n    /** Returns true if the element is contained within the provided Scrollable. */\n    private _scrollableContainsElement(scrollable: CdkScrollable, elementRef: ElementRef): boolean {\n        let element = elementRef.nativeElement;\n        let scrollableElement = scrollable.getElementRef().nativeElement; //tslint:disable-line\n\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element === scrollableElement) { return true; }\n        } while (element = element.parentElement); // tslint:disable-line\n\n        return false;\n    }\n\n    /** Sets up the global scroll listeners. */\n    private _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n\n    /** Cleans up the global scroll listener. */\n    private _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\n","import {Directive, ElementRef, OnInit, OnDestroy, NgZone} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport {ScrollDispatcher} from './scroll-dispatcher';\n\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n@Directive({\n    selector: '[cdk-scrollable], [cdkScrollable]'\n})\nexport class CdkScrollable implements OnInit, OnDestroy {\n\n    private _elementScrolled: Subject<Event> = new Subject();\n\n    constructor(private _elementRef: ElementRef,\n                private _scroll: ScrollDispatcher,\n                private _ngZone: NgZone) {}\n\n    ngOnInit() {\n        this._ngZone.runOutsideAngular(() => {\n            this.getElementRef().nativeElement.addEventListener('scroll', this._scrollListener);\n        });\n\n        this._scroll.register(this);\n    }\n\n    ngOnDestroy() {\n        this._scroll.deregister(this);\n\n        if (this._scrollListener) {\n            this.getElementRef().nativeElement.removeEventListener('scroll', this._scrollListener);\n        }\n\n        this._elementScrolled.complete();\n    }\n\n    /**\n     * Returns observable that emits when a scroll event is fired on the host element.\n     */\n    elementScrolled(): Observable<any> {\n        return this._elementScrolled.asObservable();\n    }\n\n    getElementRef(): ElementRef {\n        return this._elementRef;\n    }\n\n    private _scrollListener = (event: Event) => this._elementScrolled.next(event);\n}\n","import {NgModule} from '@angular/core';\nimport {PlatformModule} from '@ptsecurity/cdk/platform';\n\nimport {CdkScrollable} from './scrollable';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  exports: [CdkScrollable],\n  declarations: [CdkScrollable]\n})\nexport class ScrollDispatchModule {}\n"],"names":["VIEWPORT_RULER_PROVIDER_FACTORY","parentRuler","platform","ngZone","ViewportRuler","ScrollDispatcher","_ngZone","_platform","this","scrollContainers","Map","_globalSubscription","_scrolled","Subject","_scrolledCount","prototype","register","scrollable","_this","scrollSubscription","elementScrolled","subscribe","next","set","deregister","scrollableReference","get","unsubscribe","delete","scrolled","auditTimeInMs","isBrowser","Observable","create","observer","_addGlobalListener","subscription","pipe","auditTime","_removeGlobalListener","observableOf","ngOnDestroy","forEach","_","container","complete","ancestorScrolled","elementRef","ancestors","getAncestorScrollContainers","filter","target","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","push","element","nativeElement","scrollableElement","getElementRef","parentElement","runOutsideAngular","fromEvent","window","document","type","Injectable","args","providedIn","NgZone","Platform","CdkScrollable","_elementRef","_scroll","_elementScrolled","_scrollListener","event","ngOnInit","addEventListener","removeEventListener","asObservable","Directive","selector","ElementRef","_change","merge","_invalidateCache","change","_updateViewportSize","getViewportSize","_viewportSize","output","width","height","getViewportRect","scrollPosition","getViewportScrollPosition","_a","top","left","bottom","right","documentRect","documentElement","getBoundingClientRect","body","scrollTop","scrollY","scrollLeft","scrollX","throttleTime","innerWidth","innerHeight","VIEWPORT_RULER_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","ScrollDispatchModule","NgModule","imports","PlatformModule","exports","declarations"],"mappings":"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"}