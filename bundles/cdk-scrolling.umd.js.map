{"version":3,"file":"cdk-scrolling.umd.js","sources":["../../packages/cdk/scrolling/viewport-ruler.ts","../../packages/cdk/scrolling/scrolling-module.ts","../../packages/cdk/scrolling/virtual-for-of.ts","../../packages/cdk/scrolling/virtual-scroll-viewport.ts","../../packages/cdk/scrolling/scrollable.ts","../../packages/cdk/scrolling/scroll-dispatcher.ts","../../packages/cdk/scrolling/fixed-size-virtual-scroll.ts","../../packages/cdk/scrolling/virtual-scroll-strategy.ts","../../node_modules/tslib/tslib.es6.js"],"sourcesContent":["import { Injectable, NgZone, OnDestroy, Optional, SkipSelf } from '@angular/core';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { merge, of as observableOf, fromEvent, Observable, Subscription } from 'rxjs';\nimport { auditTime } from 'rxjs/operators';\n\n\n/** Time in ms to throttle the resize events by default. */\nexport const DEFAULT_RESIZE_TIME = 20;\n\nexport interface ViewportScrollPosition {\n    top: number;\n    left: number;\n}\n\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class ViewportRuler implements OnDestroy {\n    /** Cached viewport dimensions. */\n    private _viewportSize: {width: number; height: number};\n\n    /** Stream of viewport change events. */\n    private _change: Observable<Event>;\n\n    /** Subscription to streams that invalidate the cached viewport dimensions. */\n    private _invalidateCache: Subscription;\n\n    constructor(private _platform: Platform, ngZone: NgZone) {\n        ngZone.runOutsideAngular(() => {\n            this._change = _platform.isBrowser ?\n                merge<Event>(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) :\n                observableOf();\n\n            // Note that we need to do the subscription inside `runOutsideAngular`\n            // since subscribing is what causes the event listener to be added.\n            this._invalidateCache = this.change().subscribe(() => this._updateViewportSize());\n        });\n    }\n\n    ngOnDestroy() {\n        this._invalidateCache.unsubscribe();\n    }\n\n    /** Returns the viewport's width and height. */\n    getViewportSize(): Readonly<{width: number, height: number}> {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n\n        const output = {width: this._viewportSize.width, height: this._viewportSize.height};\n\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null!; //tslint:disable-line\n        }\n\n        return output;\n    }\n\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect(): ClientRect {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const {width, height} = this.getViewportSize();\n\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width\n        };\n    }\n\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition(): ViewportScrollPosition {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return {top: 0, left: 0};\n        }\n\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const documentElement = document.documentElement!;\n        const documentRect = documentElement.getBoundingClientRect();\n\n        const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            document.documentElement!.scrollTop || 0;\n\n        const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            document.documentElement!.scrollLeft || 0;\n\n        return { top, left };\n    }\n\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime: number = DEFAULT_RESIZE_TIME): Observable<Event> {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n\n    /** Updates the cached viewport size. */\n    private _updateViewportSize() {\n        this._viewportSize = this._platform.isBrowser ?\n            {width: window.innerWidth, height: window.innerHeight} :\n            {width: 0, height: 0};\n    }\n}\n\n\n/** @docs-private\n * @deprecated\n */\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\n                                                platform: Platform,\n                                                ngZone: NgZone) {\n    return parentRuler || new ViewportRuler(platform, ngZone);\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const VIEWPORT_RULER_PROVIDER = {\n    // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n    provide: ViewportRuler,\n    deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\n    useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n","import { NgModule } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { CdkFixedSizeVirtualScroll } from './fixed-size-virtual-scroll';\nimport { CdkScrollable } from './scrollable';\nimport { CdkVirtualForOf } from './virtual-for-of';\nimport { CdkVirtualScrollViewport } from './virtual-scroll-viewport';\n\n\n@NgModule({\n    imports: [BidiModule, PlatformModule],\n    exports: [\n        BidiModule,\n        CdkFixedSizeVirtualScroll,\n        CdkScrollable,\n        CdkVirtualForOf,\n        CdkVirtualScrollViewport\n    ],\n    declarations: [\n        CdkFixedSizeVirtualScroll,\n        CdkScrollable,\n        CdkVirtualForOf,\n        CdkVirtualScrollViewport\n    ]\n})\nexport class ScrollingModule {}\n\n\n/**\n * @deprecated\n * @breaking-change\n */\n@NgModule({\n    imports: [ScrollingModule],\n    exports: [ScrollingModule]\n})\nexport class ScrollDispatchModule {}\n","import {\n    Directive,\n    DoCheck,\n    EmbeddedViewRef,\n    Input,\n    IterableChangeRecord,\n    IterableChanges,\n    IterableDiffer,\n    IterableDiffers,\n    NgIterable,\n    NgZone,\n    OnDestroy,\n    SkipSelf,\n    TemplateRef,\n    TrackByFunction,\n    ViewContainerRef\n} from '@angular/core';\n\nimport { Observable, Subject, of as observableOf } from 'rxjs';\nimport { pairwise, shareReplay, startWith, switchMap, takeUntil } from 'rxjs/operators';\n\nimport {\n    ArrayDataSource,\n    ICollectionViewer,\n    DataSource,\n    ListRange,\n    isDataSource\n} from '@ptsecurity/cdk/collections';\n\nimport { CdkVirtualScrollViewport } from './virtual-scroll-viewport';\n\n\n/** The context for an item rendered by `CdkVirtualForOf` */\nexport type CdkVirtualForOfContext<T> = {\n    /** The item value. */\n    $implicit: T;\n    /** The DataSource, Observable, or NgIterable that was passed to *cdkVirtualFor. */\n    cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\n    /** The index of the item in the DataSource. */\n    index: number;\n    /** The number of items in the DataSource. */\n    count: number;\n    /** Whether this is the first item in the DataSource. */\n    first: boolean;\n    /** Whether this is the last item in the DataSource. */\n    last: boolean;\n    /** Whether the index is even. */\n    even: boolean;\n    /** Whether the index is odd. */\n    odd: boolean;\n};\n\n\n/** Helper to extract size from a DOM Node. */\nfunction getSize(orientation: 'horizontal' | 'vertical', node: Node): number {\n    const el = node as Element;\n\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n\n    return orientation === 'horizontal' ? rect.width : rect.height;\n}\n\n\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\n@Directive({\n    selector: '[cdkVirtualFor][cdkVirtualForOf]',\n})\nexport class CdkVirtualForOf<T> implements ICollectionViewer, DoCheck, OnDestroy {\n    /** Emits when the rendered view of the data changes. */\n    viewChange = new Subject<ListRange>();\n\n    /** Subject that emits when a new DataSource instance is given. */\n    private _dataSourceChanges = new Subject<DataSource<T>>();\n\n    /** The DataSource to display. */\n    @Input()\n    get cdkVirtualForOf(): DataSource<T> | Observable<T[]> | NgIterable<T> {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value: DataSource<T> | Observable<T[]> | NgIterable<T>) {\n        this._cdkVirtualForOf = value;\n        const ds = isDataSource(value) ? value :\n            // Slice the value if its an NgIterable to ensure we're working with an array.\n            new ArrayDataSource<T>(\n                value instanceof Observable ? value : Array.prototype.slice.call(value || []));\n        this._dataSourceChanges.next(ds);\n    }\n    _cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\n\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    @Input()\n    get cdkVirtualForTrackBy(): TrackByFunction<T> | undefined {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn: TrackByFunction<T> | undefined) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn ?\n            (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\n            undefined;\n    }\n    private _cdkVirtualForTrackBy: TrackByFunction<T> | undefined;\n\n    /** The template used to stamp out new elements. */\n    @Input()\n    set cdkVirtualForTemplate(value: TemplateRef<CdkVirtualForOfContext<T>>) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    @Input() cdkVirtualForTemplateCacheSize: number = 20;\n\n    /** Emits whenever the data in the current DataSource changes. */\n    dataStream: Observable<T[] | ReadonlyArray<T>> = this._dataSourceChanges\n        .pipe(\n            // Start off with null `DataSource`.\n            startWith(null!),\n            // Bundle up the previous and current data sources so we can work with both.\n            pairwise(),\n            // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n            // new one, passing back a stream of data changes which we run through `switchMap` to give\n            // us a data stream that emits the latest data from whatever the current `DataSource` is.\n            switchMap(([prev, cur]) => this._changeDataSource(prev, cur)),\n            // Replay the last emitted data when someone subscribes.\n            shareReplay(1));\n\n    /** The differ used to calculate changes to the data. */\n    private _differ: IterableDiffer<T> | null = null;\n\n    /** The most recent data emitted from the DataSource. */\n    private _data: T[] | ReadonlyArray<T>;\n\n    /** The currently rendered items. */\n    private _renderedItems: T[];\n\n    /** The currently rendered range of indices. */\n    private _renderedRange: ListRange;\n\n    /**\n     * The template cache used to hold on ot template instancess that have been stamped out, but don't\n     * currently need to be rendered. These instances will be reused in the future rather than\n     * stamping out brand new ones.\n     */\n    private _templateCache: EmbeddedViewRef<CdkVirtualForOfContext<T>>[] = [];\n\n    /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n    private _needsUpdate = false;\n\n    private _destroyed = new Subject<void>();\n\n    constructor(\n        /** The view container to add items to. */\n        private _viewContainerRef: ViewContainerRef,\n        /** The template to use when stamping out new items. */\n        private _template: TemplateRef<CdkVirtualForOfContext<T>>,\n        /** The set of available differs. */\n        private _differs: IterableDiffers,\n        /** The virtual scrolling viewport that these items are being rendered in. */\n        @SkipSelf() private _viewport: CdkVirtualScrollViewport,\n        ngZone: NgZone) {\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            ngZone.run(() => this.viewChange.next(this._renderedRange));\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range: ListRange, orientation: 'horizontal' | 'vertical'): number {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n\n        // Loop over all root nodes for all items in the range and sum up their size.\n        let totalSize = 0;\n        let i = rangeLen;\n        while (i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex) as\n                EmbeddedViewRef<CdkVirtualForOfContext<T>> | null;\n            let j = view ? view.rootNodes.length : 0;\n            while (j--) {\n                totalSize += getSize(orientation, view!.rootNodes[j]);\n            }\n        }\n\n        return totalSize;\n    }\n\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO: We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            } else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n\n    ngOnDestroy() {\n        this._viewport.detach();\n\n        this._dataSourceChanges.next();\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n\n        this._destroyed.next();\n        this._destroyed.complete();\n\n        for (let view of this._templateCache) {\n            view.destroy();\n        }\n    }\n\n    /** React to scroll state changes in the viewport. */\n    private _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n        }\n        this._needsUpdate = true;\n    }\n\n    /** Swap out one `DataSource` for another. */\n    private _changeDataSource(oldDs: DataSource<T> | null, newDs: DataSource<T> | null):\n        Observable<T[] | ReadonlyArray<T>> {\n\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n\n        this._needsUpdate = true;\n\n        return newDs ? newDs.connect(this) : observableOf();\n    }\n\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    private _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            let view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n\n    /** Apply changes to the DOM. */\n    private _applyChanges(changes: IterableChanges<T>) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record: IterableChangeRecord<T>,\n                                  adjustedPreviousIndex: number | null,\n                                  currentIndex: number | null) => {\n            if (record.previousIndex == null) {  // Item added.\n                const view = this._insertViewForNewItem(currentIndex!);\n                view.context.$implicit = record.item;\n            } else if (currentIndex == null) {  // Item removed.\n                this._cacheView(this._detachView(adjustedPreviousIndex !));\n            } else {  // Item moved.\n                const view = this._viewContainerRef.get(adjustedPreviousIndex!) as\n                    EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n                this._viewContainerRef.move(view, currentIndex);\n                view.context.$implicit = record.item;\n            }\n        });\n\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record: IterableChangeRecord<T>) => {\n            const view = this._viewContainerRef.get(record.currentIndex!) as\n                EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n            view.context.$implicit = record.item;\n        });\n\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n\n    /** Cache the given detached view. */\n    private _cacheView(view: EmbeddedViewRef<CdkVirtualForOfContext<T>>) {\n        if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n            this._templateCache.push(view);\n        } else {\n            const index = this._viewContainerRef.indexOf(view);\n\n            // It's very unlikely that the index will ever be -1, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            } else {\n                this._viewContainerRef.remove(index);\n            }\n        }\n    }\n\n    /** Inserts a view for a new item, either from the cache or by creating a new one. */\n    private _insertViewForNewItem(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\n        return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\n    }\n\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    private _updateComputedContextProperties(context: CdkVirtualForOfContext<any>) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n\n    /** Creates a new embedded view and moves it to the given index */\n    private _createEmbeddedViewAt(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\n        const view = this._viewContainerRef.createEmbeddedView(this._template, {\n            $implicit: null!,\n            cdkVirtualForOf: this._cdkVirtualForOf,\n            index: -1,\n            count: -1,\n            first: false,\n            last: false,\n            odd: false,\n            even: false\n        });\n        if (index < this._viewContainerRef.length) {\n            this._viewContainerRef.move(view, index);\n        }\n\n        return view;\n    }\n\n    /** Inserts a recycled view from the cache at the given index. */\n    private _insertViewFromCache(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>>|null {\n        const cachedView = this._templateCache.pop();\n        if (cachedView) {\n            this._viewContainerRef.insert(cachedView, index);\n        }\n\n        return cachedView || null;\n    }\n\n    /** Detaches the embedded view at the given index. */\n    private _detachView(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\n        return this._viewContainerRef.detach(index) as\n            EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    Inject,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { ListRange } from '@ptsecurity/cdk/collections';\nimport { animationFrameScheduler, Observable, Subject, Observer } from 'rxjs';\nimport { auditTime, startWith, takeUntil } from 'rxjs/operators';\n\nimport { ScrollDispatcher } from './scroll-dispatcher';\nimport { CdkScrollable, ExtendedScrollToOptions } from './scrollable';\nimport { CdkVirtualForOf } from './virtual-for-of';\nimport { VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy } from './virtual-scroll-strategy';\n\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1: ListRange, r2: ListRange): boolean {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n\n\n/** A viewport that virtualizes it's scrolling with the help of `CdkVirtualForOf`. */\n@Component({\n    selector: 'cdk-virtual-scroll-viewport',\n    templateUrl: 'virtual-scroll-viewport.html',\n    styleUrls: ['virtual-scroll-viewport.css'],\n    host: {\n        class: 'cdk-virtual-scroll-viewport',\n        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{\n        provide: CdkScrollable,\n        useExisting: CdkVirtualScrollViewport\n    }]\n})\nexport class CdkVirtualScrollViewport extends CdkScrollable implements OnInit, OnDestroy {\n\n    /** The direction the viewport scrolls. */\n    @Input() orientation: 'horizontal' | 'vertical' = 'vertical';\n\n    // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n    // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n    // depending on how the strategy calculates the scrolled index, it may come at a cost to\n    // performance.\n    /** Emits when the index of the first element visible in the viewport changes. */\n    @Output() scrolledIndexChange: Observable<number> =\n        new Observable((observer: Observer<number>) =>\n            this._scrollStrategy.scrolledIndexChange.subscribe((index) =>\n                Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n\n    /** The element that wraps the rendered content. */\n    @ViewChild('contentWrapper', {static: true}) _contentWrapper: ElementRef<HTMLElement>;\n\n    /** Emits when the viewport is detached from a CdkVirtualForOf. */\n    private _detachedSubject = new Subject<void>();\n\n    /** Emits when the rendered range changes. */\n    private _renderedRangeSubject = new Subject<ListRange>();\n\n    /** A stream that emits whenever the rendered range changes. */\n    renderedRangeStream: Observable<ListRange> = this._renderedRangeSubject.asObservable();\n\n    /**\n     * The transform used to scale the spacer to the same size as all content, including content that\n     * is not currently rendered.\n     */\n    _totalContentSizeTransform = '';\n\n    /**\n     * The total size of all content (in pixels), including content that is not currently rendered.\n     */\n    private _totalContentSize = 0;\n\n    /**\n     * The CSS transform applied to the rendered subset of items so that they appear within the bounds\n     * of the visible viewport.\n     */\n    private _renderedContentTransform: string;\n\n    /** The currently rendered range of indices. */\n    private _renderedRange: ListRange = {start: 0, end: 0};\n\n    /** The length of the data bound to this viewport (in number of items). */\n    private _dataLength = 0;\n\n    /** The size of the viewport (in pixels). */\n    private _viewportSize = 0;\n\n    /** the currently attached CdkVirtualForOf. */\n    private _forOf: CdkVirtualForOf<any> | null;\n\n    /** The last rendered content offset that was set. */\n    private _renderedContentOffset = 0;\n\n    /**\n     * Whether the last rendered content offset was to the end of the content (and therefore needs to\n     * be rewritten as an offset to the start of the content).\n     */\n    private _renderedContentOffsetNeedsRewrite = false;\n\n    /** Whether there is a pending change detection cycle. */\n    private _isChangeDetectionPending = false;\n\n    /** A list of functions to run after the next change detection cycle. */\n    private _runAfterChangeDetection: Function[] = [];\n\n    constructor(public elementRef: ElementRef<HTMLElement>,\n                private _changeDetectorRef: ChangeDetectorRef,\n                ngZone: NgZone,\n                @Optional() @Inject(VIRTUAL_SCROLL_STRATEGY)\n                private _scrollStrategy: VirtualScrollStrategy,\n                @Optional() dir: Directionality,\n                scrollDispatcher: ScrollDispatcher) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n\n        if (!_scrollStrategy) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n\n            this.elementScrolled()\n                .pipe(\n                    // Start off with a fake scroll event so we properly detect our initial position.\n                    startWith<Event | null>(null!),\n                    // Collect multiple events into one until the next animation frame. This way if\n                    // there are multiple scroll events in the same frame we only need to recheck\n                    // our layout once.\n                    auditTime(0, animationFrameScheduler))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n\n            this._markChangeDetectionNeeded();\n        }));\n    }\n\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n\n        super.ngOnDestroy();\n    }\n\n    /** Attaches a `CdkVirtualForOf` to this viewport. */\n    attach(forOf: CdkVirtualForOf<any>) {\n        if (this._forOf) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe((data) => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength(): number {\n        return this._dataLength;\n    }\n\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize(): number {\n        return this._viewportSize;\n    }\n\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n\n    /** Get the current rendered range of items. */\n    getRenderedRange(): ListRange {\n        return this._renderedRange;\n    }\n\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size: number) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            const axis = this.orientation == 'horizontal' ? 'X' : 'Y';\n            this._totalContentSizeTransform = `scale${axis}(${this._totalContentSize})`;\n            this._markChangeDetectionNeeded();\n        }\n    }\n\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range: ListRange) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            this._renderedRangeSubject.next(this._renderedRange = range);\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart(): number | null {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset: number, to: 'to-start' | 'to-end' = 'to-start') {\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mc-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                } else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset: number, behavior: ScrollBehavior = 'auto') {\n        const options: ExtendedScrollToOptions = {behavior};\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        } else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    }\n\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index: number, behavior: ScrollBehavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from?: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\n        return super.measureScrollOffset(\n            from ? from : this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize(): number {\n        const contentEl = this._contentWrapper.nativeElement;\n\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range: ListRange): number {\n        if (!this._forOf) {\n            return 0;\n        }\n\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n\n    /** Measure the viewport size. */\n    private _measureViewportSize() {\n        const viewportEl = this.elementRef.nativeElement;\n        this._viewportSize = this.orientation === 'horizontal' ?\n            viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n\n    /** Queue up change detection to run. */\n    private _markChangeDetectionNeeded(runAfter?: Function) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n\n    /** Run change detection. */\n    private _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n}\n","import { Directive, ElementRef, OnInit, OnDestroy, NgZone, Optional } from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior } from '@ptsecurity/cdk/platform';\nimport { fromEvent, Observable, Observer, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { ScrollDispatcher } from './scroll-dispatcher';\n\n\nexport type _Without<T> = {[P in keyof T]?: never};\nexport type _XOR<T, U> = (_Without<T> & U) | (_Without<U> & T);\n\nexport interface _Top    { top?: number; }\nexport interface _Bottom { bottom?: number; }\nexport interface _Left   { left?: number; }\nexport interface _Right  { right?: number; }\nexport interface _Start  { start?: number; }\nexport interface _End    { end?: number; }\n\nexport type _XAxis = _XOR<_XOR<_Left, _Right>, _XOR<_Start, _End>>;\nexport type _YAxis = _XOR<_Top, _Bottom>;\n\n/**\n * An extended version of ScrollToOptions that allows expressing scroll offsets relative to the\n * top, bottom, left, right, start, or end of the viewport rather than just the top and left.\n * Please note: the top and bottom properties are mutually exclusive, as are the left, right,\n * start, and end properties.\n */\nexport type ExtendedScrollToOptions = _XAxis & _YAxis & ScrollOptions;\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n@Directive({\n    selector: '[cdk-scrollable], [cdkScrollable]'\n})\nexport class CdkScrollable implements OnInit, OnDestroy {\n\n    private destroyed = new Subject();\n\n    private _elementScrolled: Observable<Event> = new Observable((observer: Observer<Event>) =>\n        this.ngZone.runOutsideAngular(() =>\n            fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this.destroyed))\n                .subscribe(observer)));\n\n    constructor(protected elementRef: ElementRef<HTMLElement>,\n                protected scrollDispatcher: ScrollDispatcher,\n                protected ngZone: NgZone,\n                @Optional() protected dir?: Directionality\n    ) {}\n\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled(): Observable<Event> {\n        return this._elementScrolled;\n    }\n\n    /** Gets the ElementRef for the viewport. */\n    getElementRef(): ElementRef<HTMLElement> {\n        return this.elementRef;\n    }\n\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options: ExtendedScrollToOptions): void {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n\n        // Rewrite start & end offsets as right or left offsets.\n        options.left = options.left == null ? (isRtl ? options.end : options.start) : options.left;\n        options.right = options.right == null ? (isRtl ? options.start : options.end) : options.right;\n\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            (options as _Without<_Bottom> & _Top).top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n            if (options.left != null) {\n                (options as _Without<_Left> & _Right).right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n\n            if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n                options.left = options.right;\n            } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        } else {\n            if (options.right != null) {\n                (options as _Without<_Right> & _Left).left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n\n        this.applyScrollToOptions(options);\n    }\n\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        } else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n\n        if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            } else {\n                return el.scrollLeft;\n            }\n        } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            } else {\n                return -el.scrollLeft;\n            }\n        } else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            } else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n\n    private applyScrollToOptions(options: ScrollToOptions): void {\n        const el = this.elementRef.nativeElement;\n\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        } else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n\n\n}\n","import {\n    ElementRef,\n    Injectable,\n    NgZone,\n    OnDestroy\n} from '@angular/core';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { fromEvent, of as observableOf, Subject, Subscription, Observable, Observer } from 'rxjs';\nimport { auditTime, filter } from 'rxjs/operators';\n\nimport { CdkScrollable } from './scrollable';\n\n\n/** Time in ms to throttle the scrolling events by default. */\nexport const DEFAULT_SCROLL_TIME = 20;\n\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollDispatcher implements OnDestroy {\n\n    /**\n     * Map of all the scrollable references that are registered with the service and their\n     * scroll event subscriptions.\n     */\n    scrollContainers: Map<CdkScrollable, Subscription> = new Map();\n\n    /** Keeps track of the global `scroll` and `resize` subscriptions. */\n    _globalSubscription: Subscription | null = null;\n\n    /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n    private _scrolled = new Subject<CdkScrollable | void>();\n\n    /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n    private scrolledCount = 0;\n\n    constructor(private ngZone: NgZone, private platform: Platform) { }\n\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable: CdkScrollable): void {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                .subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable: CdkScrollable): void {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME): Observable<CdkScrollable | void> {\n\n        if (!this.platform.isBrowser) {\n            return observableOf<void>();\n        }\n\n        return new Observable((observer: Observer<CdkScrollable | void>) => {\n            if (!this._globalSubscription) {\n                this.addGlobalListener();\n            }\n\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0 ?\n                this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                this._scrolled.subscribe(observer);\n\n            this.scrolledCount++;\n\n            return () => {\n                subscription.unsubscribe();\n                this.scrolledCount--;\n\n                if (!this.scrolledCount) {\n                    this.removeGlobalListener();\n                }\n            };\n        });\n    }\n\n    ngOnDestroy() {\n        this.removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementRef: ElementRef, auditTimeInMs?: number): Observable<CdkScrollable | void> {\n        const ancestors = this.getAncestorScrollContainers(elementRef);\n\n        return this.scrolled(auditTimeInMs).pipe(filter((target) => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementRef: ElementRef): CdkScrollable[] {\n        const scrollingContainers: CdkScrollable[] = [];\n\n        this.scrollContainers.forEach((_subscription: Subscription, scrollable: CdkScrollable) => {\n            if (this.scrollableContainsElement(scrollable, elementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n\n        return scrollingContainers;\n    }\n\n    /** Returns true if the element is contained within the provided Scrollable. */\n    private scrollableContainsElement(scrollable: CdkScrollable, elementRef: ElementRef): boolean {\n        let element: HTMLElement | null = elementRef.nativeElement;\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) { return true; }\n        } while (element = element!.parentElement);\n\n        return false;\n    }\n\n    /** Sets up the global scroll listeners. */\n    private addGlobalListener() {\n        this._globalSubscription = this.ngZone.runOutsideAngular(() => {\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n\n    /** Cleans up the global scroll listener. */\n    private removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\n","import { Directive, forwardRef, Input, OnChanges } from '@angular/core';\nimport { coerceNumberProperty } from '@ptsecurity/cdk/coercion';\nimport { Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\nimport { VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy } from './virtual-scroll-strategy';\nimport { CdkVirtualScrollViewport } from './virtual-scroll-viewport';\n\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nexport class FixedSizeVirtualScrollStrategy implements VirtualScrollStrategy {\n\n    private _scrolledIndexChange = new Subject<number>();\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    scrolledIndexChange: Observable<number> = this._scrolledIndexChange.pipe(distinctUntilChanged());\n\n    /** The attached viewport. */\n    private _viewport: CdkVirtualScrollViewport | null = null;\n\n    /** The size of the items in the virtually scrolling list. */\n    private _itemSize: number;\n\n    /** The minimum amount of buffer rendered beyond the viewport (in pixels). */\n    private _minBufferPx: number;\n\n    /** The number of buffer items to render beyond the edge of the viewport (in pixels). */\n    private _maxBufferPx: number;\n\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport: CdkVirtualScrollViewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n        if (maxBufferPx < minBufferPx) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() { /* no-op */\n    }\n\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() { /* no-op */\n    }\n\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index: number, behavior: ScrollBehavior): void {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n\n    /** Update the viewport's total content size. */\n    private _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n\n    /** Update the viewport's rendered range. */\n    private _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n\n        const scrollOffset = this._viewport.measureScrollOffset();\n        const firstVisibleIndex = scrollOffset / this._itemSize;\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = {start: renderedRange.start, end: renderedRange.end};\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength,\n                Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        } else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0,\n                        Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n\n\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nexport function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir: CdkFixedSizeVirtualScroll) {\n    return fixedSizeDir._scrollStrategy;\n}\n\n\n/** A virtual scroll strategy that supports fixed-size items. */\n@Directive({\n    selector: 'cdk-virtual-scroll-viewport[itemSize]',\n    providers: [{\n        provide: VIRTUAL_SCROLL_STRATEGY,\n        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n        deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n    }]\n})\nexport class CdkFixedSizeVirtualScroll implements OnChanges {\n    /** The size of the items in the list (in pixels). */\n    @Input()\n    get itemSize(): number {\n        return this._itemSize;\n    }\n\n    set itemSize(value: number) {\n        this._itemSize = coerceNumberProperty(value);\n    }\n\n    _itemSize = 20;\n\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    @Input()\n    get minBufferPx(): number {\n        return this._minBufferPx;\n    }\n\n    set minBufferPx(value: number) {\n        this._minBufferPx = coerceNumberProperty(value);\n    }\n\n    _minBufferPx = 100;\n\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    @Input()\n    get maxBufferPx(): number {\n        return this._maxBufferPx;\n    }\n\n    set maxBufferPx(value: number) {\n        this._maxBufferPx = coerceNumberProperty(value);\n    }\n\n    _maxBufferPx = 200;\n\n    /** The scroll strategy used by this directive. */\n    _scrollStrategy =\n        new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CdkVirtualScrollViewport } from './virtual-scroll-viewport';\n\n\n/** The injection token used to specify the virtual scrolling strategy. */\nexport const VIRTUAL_SCROLL_STRATEGY =\n    new InjectionToken<VirtualScrollStrategy>('VIRTUAL_SCROLL_STRATEGY');\n\n\n/** A strategy that dictates which items should be rendered in the viewport. */\nexport interface VirtualScrollStrategy {\n    /** Emits when the index of the first element visible in the viewport changes. */\n    scrolledIndexChange: Observable<number>;\n\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport: CdkVirtualScrollViewport): void;\n\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach(): void;\n\n    /** Called when the viewport is scrolled (debounced using requestAnimationFrame). */\n    onContentScrolled(): void;\n\n    /** Called when the length of the data changes. */\n    onDataLengthChanged(): void;\n\n    /** Called when the range of items rendered in the DOM has changed. */\n    onContentRendered(): void;\n\n    /** Called when the offset of the rendered items changed. */\n    onRenderedOffsetChanged(): void;\n\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index: number, behavior: ScrollBehavior): void;\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n"],"names":["Optional","SkipSelf","Platform","NgZone","platform","Injectable","auditTime","observableOf","merge","fromEvent","NgModule","BidiModule","PlatformModule","Input","IterableDiffers","TemplateRef","ViewContainerRef","Directive","ArrayDataSource","Observable","isDataSource","takeUntil","Subject","shareReplay","switchMap","pairwise","startWith","ViewChild","Output","Directionality","Inject","ChangeDetectorRef","ElementRef","ChangeDetectionStrategy","ViewEncapsulation","Component","animationFrameScheduler","tslib_1.__extends","supportsScrollBehavior","getRtlScrollAxisType","RtlScrollAxisType","filter","forwardRef","coerceNumberProperty","distinctUntilChanged","InjectionToken"],"mappings":"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"}