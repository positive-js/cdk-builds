{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@ptsecurity/cdk/tree/control/base-tree-control.ts","ng://@ptsecurity/cdk/tree/control/flat-tree-control.ts","ng://@ptsecurity/cdk/tree/control/nested-tree-control.ts","ng://@ptsecurity/cdk/tree/outlet.ts","ng://@ptsecurity/cdk/tree/node.ts","ng://@ptsecurity/cdk/tree/tree-errors.ts","ng://@ptsecurity/cdk/tree/tree.ts","ng://@ptsecurity/cdk/tree/nested-node.ts","ng://@ptsecurity/cdk/tree/padding.ts","ng://@ptsecurity/cdk/tree/toggle.ts","ng://@ptsecurity/cdk/tree/tree.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","BaseTreeControl","expansionModel","SelectionModel","filterModel","filterValue","BehaviorSubject","toggle","dataNode","expand","select","collapse","deselect","isExpanded","isSelected","toggleDescendants","collapseDescendants","expandDescendants","collapseAll","clear","toBeProcessed","apply","getDescendants","_a","defaultCompareValues","firstValue","secondValue","defaultCompareViewValues","firstViewValue","secondViewValue","RegExp","test","FlatTreeControl","getLevel","isExpandable","getValue","getViewValue","compareValues","compareViewValues","_this","_super","results","dataNodes","indexOf","expandAll","getParents","node","result","parent","unshift","hasValue","find","filterNodes","filteredNodes","filter","filteredNodesWithTheirParents","Set","forEach","filteredNode","add","from","NestedTreeControl","getChildren","allNodes","reduce","accumulator","descendants","_getDescendants","splice","pipe","take","subscribe","children","child","CdkTreeNodeOutlet","viewContainer","changeDetectorRef","Directive","args","selector","ViewContainerRef","ChangeDetectorRef","data","$implicit","CdkTreeNodeDef","template","inputs","TemplateRef","getTreeNoValidDataSourceError","Error","getTreeMultipleDefaultNodeDefsError","getTreeMissingMatchingNodeDefError","getTreeControlMissingError","getTreeControlFunctionsMissingError","CdkTree","differs","viewChange","start","end","Number","MAX_VALUE","onDestroy","Subject","levels","Map","defineProperty","_dataSource","dataSource","switchDataSource","ngOnInit","dataDiffer","trackBy","treeControl","ngOnDestroy","nodeOutlet","complete","disconnect","dataSubscription","unsubscribe","ngAfterContentChecked","defaultNodeDefs","nodeDefs","def","when","defaultNodeDef","observeRenderChanges","renderNodeChanges","parentData","changes","diff","forEachOperation","item","adjustedPreviousIndex","currentIndex","previousIndex","insertNode","remove","delete","view","get","move","detectChanges","getNodeDef","first","nodeDef","nodeData","index","context","CdkTreeNodeOutletContext","level","has","set","createEmbeddedView","CdkTreeNode","mostRecentTreeNode","dataStream","connect","Observable","isArray","observableOf","takeUntil","Component","exportAs","host","class","role","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","IterableDiffers","Input","ViewChild","static","ContentChildren","elementRef","tree","destroyed","_data","focus","nativeElement","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","ElementRef","decorators","type","Inject","forwardRef","CdkNestedTreeNode","ngAfterContentInit","updateChildrenNodes","providers","provide","useExisting","CdkTreeNodePadding","treeNode","renderer","element","dir","change","setPadding","_level","_indent","paddingIndent","nodeLevel","padding","paddingProp","setStyle","Renderer2","Directionality","Optional","CdkTreeNodeToggle","_recursive","event","recursive","stopPropagation","(click)","EXPORTED_DECLARATIONS","CdkTreeModule","NgModule","imports","CommonModule","exports","declarations","FocusMonitor"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { SelectionModel } from '@angular/cdk/collections';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nimport { TreeControl } from './tree-control';\n\n\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\n/* tslint:disable-next-line:naming-convention */\nexport abstract class BaseTreeControl<T> implements TreeControl<T> {\n\n    dataNodes: T[];\n\n    /** A selection model with multi-selection to track expansion status. */\n    expansionModel: SelectionModel<T> = new SelectionModel<T>(true);\n\n    filterModel: SelectionModel<T> = new SelectionModel<T>(true);\n\n    filterValue = new BehaviorSubject<string>('');\n\n    /** Get depth of a given data node, return the level number. This is for flat tree node. */\n    getLevel: (dataNode: T) => number;\n\n    /**\n     * Whether the data node is expandable. Returns true if expandable.\n     * This is for flat tree node.\n     */\n    isExpandable: (dataNode: T) => boolean;\n\n    /** Gets a stream that emits whenever the given data node's children change. */\n    getChildren: (dataNode: T) => Observable<T[]>;\n\n    /** Gets a list of descendent data nodes of a subtree rooted at given data node recursively. */\n    abstract getDescendants(dataNode: T): T[];\n\n    /** Expands all data nodes in the tree. */\n    abstract expandAll(): void;\n\n    /** Toggles one single data node's expanded/collapsed state. */\n    toggle(dataNode: T): void {\n        if (this.filterValue.value) { return; }\n\n        this.expansionModel.toggle(dataNode);\n    }\n\n    /** Expands one single data node. */\n    expand(dataNode: T): void {\n        if (this.filterValue.value) { return; }\n\n        this.expansionModel.select(dataNode);\n    }\n\n    /** Collapses one single data node. */\n    collapse(dataNode: T): void {\n        if (this.filterValue.value) { return; }\n\n        this.expansionModel.deselect(dataNode);\n    }\n\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n    isExpanded(dataNode: T): boolean {\n        return this.expansionModel.isSelected(dataNode);\n    }\n\n    /** Toggles a subtree rooted at `node` recursively. */\n    toggleDescendants(dataNode: T): void {\n        this.expansionModel.isSelected(dataNode)\n            ? this.collapseDescendants(dataNode)\n            : this.expandDescendants(dataNode);\n    }\n\n    /** Collapse all dataNodes in the tree. */\n    collapseAll(): void {\n        this.expansionModel.clear();\n    }\n\n    /** Expands a subtree rooted at given data node recursively. */\n    expandDescendants(dataNode: T): void {\n        const toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed);\n    }\n\n    /** Collapses a subtree rooted at given data node recursively. */\n    collapseDescendants(dataNode: T): void {\n        const toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed);\n    }\n}\n","import { BaseTreeControl } from './base-tree-control';\n\n\nexport function defaultCompareValues(firstValue, secondValue): boolean {\n    return firstValue === secondValue;\n}\n\nexport function defaultCompareViewValues(firstViewValue, secondViewValue): boolean {\n    return RegExp(secondViewValue, 'gi').test(firstViewValue);\n}\n\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nexport class FlatTreeControl<T> extends BaseTreeControl<T> {\n    /** Construct with flat tree data node functions getLevel, isExpandable, getValue and getViewValue. */\n    constructor(\n        public getLevel: (dataNode: T) => number,\n        public isExpandable: (dataNode: T) => boolean,\n        /** getValue will be used to determine if the tree contains value or not. Used in method hasValue */\n        public getValue: (dataNode) => any,\n        /** getViewValue will be used for filter nodes. Returned value will be first argument in filterNodesFunction */\n        public getViewValue: (dataNode) => string,\n        /** compareValues will be used to comparing values. */\n        public compareValues: (firstValue, secondValue) => boolean = defaultCompareValues,\n        /** compareValues will be used to comparing values. */\n        public compareViewValues: (firstViewValue, secondViewValue) => boolean = defaultCompareViewValues\n    ) {\n        super();\n    }\n\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     */\n    getDescendants(dataNode: T): T[] {\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        const results: T[] = [];\n\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1;\n             i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]);\n             i++\n        ) {\n            results.push(this.dataNodes[i]);\n        }\n\n        return results;\n    }\n\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     */\n    expandAll(): void {\n        this.expansionModel.select(...this.dataNodes);\n    }\n\n    getParents(node: any, result: T[]): T[] {\n        if (node.parent) {\n            result.unshift(node.parent);\n\n            return this.getParents(node.parent, result);\n        } else {\n            return result;\n        }\n    }\n\n    hasValue(value: string): T | undefined {\n        return this.dataNodes.find((node: any) => this.compareValues(this.getValue(node), value));\n    }\n\n    filterNodes(value: string): void {\n        this.filterModel.clear();\n\n        const filteredNodes = this.dataNodes.filter(\n            (node: any) => this.compareViewValues(this.getViewValue(node), value)\n        );\n\n        const filteredNodesWithTheirParents = new Set();\n        filteredNodes.forEach((filteredNode) => {\n            this.getParents(filteredNode, []).forEach((node) => filteredNodesWithTheirParents.add(node));\n\n            filteredNodesWithTheirParents.add(filteredNode);\n        });\n\n        this.filterModel.select(...Array.from(filteredNodesWithTheirParents) as []);\n\n        this.filterValue.next(value);\n    }\n}\n","import { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { BaseTreeControl } from './base-tree-control';\n\n\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nexport class NestedTreeControl<T> extends BaseTreeControl<T> {\n\n    /** Construct with nested tree function getChildren. */\n    constructor(public getChildren: (dataNode: T) => Observable<T[]>) {\n        super();\n    }\n\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     */\n    expandAll(): void {\n        this.expansionModel.clear();\n        const allNodes = this.dataNodes.reduce((accumulator: T[], dataNode) =>\n            [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n        this.expansionModel.select(...allNodes);\n    }\n\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n    getDescendants(dataNode: T): T[] {\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n\n        return descendants.splice(1);\n    }\n\n    /** A helper function to get descendants recursively. */\n    // todo нужно придумать другое название и понять в чем отличие между getDescendants и _getDescendants\n    /* tslint:disable-next-line:naming-convention */\n    private _getDescendants(descendants: T[], dataNode: T): void {\n        descendants.push(dataNode);\n\n        this.getChildren(dataNode)\n            .pipe(take(1))\n            .subscribe((children) => {\n                if (children && children.length > 0) {\n                    children.forEach((child: T) => this._getDescendants(descendants, child));\n                }\n            });\n    }\n}\n","import { ChangeDetectorRef, Directive, ViewContainerRef } from '@angular/core';\n\n\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({ selector: '[cdkTreeNodeOutlet]' })\nexport class CdkTreeNodeOutlet {\n    constructor(public viewContainer: ViewContainerRef, public changeDetectorRef: ChangeDetectorRef) {}\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n/** Context provided to the tree node component. */\nexport class CdkTreeNodeOutletContext<T> {\n    /** Data for the node. */\n    $implicit: T;\n\n    /** Depth of the node. */\n    level: number;\n\n    /** Index location of the node. */\n    index?: number;\n\n    /** Length of the number of total dataNodes. */\n    count?: number;\n\n    constructor(data: T) {\n        this.$implicit = data;\n    }\n}\n\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n@Directive({\n    selector: '[cdkTreeNodeDef]',\n    inputs: [\n        'when: cdkTreeNodeDefWhen'\n    ]\n})\nexport class CdkTreeNodeDef<T> {\n    /**\n     * Function that should return true if this node template should be used for the provided node\n     * data and index. If left undefined, this node will be considered the default node template to\n     * use when no other when functions return true for the data.\n     * For every node, there must be at least one when function that passes or an undefined to\n     * default.\n     */\n    when: (index: number, nodeData: T) => boolean;\n\n    /** @docs-private */\n    constructor(public template: TemplateRef<any>) {}\n}\n","/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nexport function getTreeNoValidDataSourceError() {\n  return Error(`A valid data source must be provided.`);\n}\n\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nexport function getTreeMultipleDefaultNodeDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nexport function getTreeMissingMatchingNodeDefError() {\n  return Error(`Could not find a matching node definition for the provided node data.`);\n}\n\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nexport function getTreeControlMissingError() {\n  return Error(`Could not find a tree control for the tree.`);\n}\n\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nexport function getTreeControlFunctionsMissingError() {\n  return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n","import { CollectionViewer, DataSource } from '@angular/cdk/collections';\nimport {\n    AfterContentChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    Input,\n    IterableChangeRecord,\n    IterableDiffer,\n    IterableDiffers,\n    OnDestroy,\n    OnInit,\n    QueryList,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation,\n    TrackByFunction, Inject, forwardRef\n} from '@angular/core';\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { BehaviorSubject, Observable, of as observableOf, Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { TreeControl } from './control/tree-control';\nimport { CdkTreeNodeDef, CdkTreeNodeOutletContext } from './node';\nimport { CdkTreeNodeOutlet } from './outlet';\nimport {\n    getTreeControlMissingError,\n    getTreeMissingMatchingNodeDefError,\n    getTreeMultipleDefaultNodeDefsError,\n    getTreeNoValidDataSourceError\n} from './tree-errors';\n\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\n@Component({\n    selector: 'cdk-tree',\n    exportAs: 'cdkTree',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        class: 'cdk-tree',\n        role: 'tree'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CdkTree<T> implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\n\n    /** The tree controller */\n    @Input() treeControl: TreeControl<T>;\n\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data\n     * relative to the function to know if a node should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    @Input() trackBy: TrackByFunction<T>;\n\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(CdkTreeNodeOutlet, {static: true}) nodeOutlet: CdkTreeNodeOutlet;\n\n    /** The tree node template for the tree */\n    @ContentChildren(CdkTreeNodeDef) nodeDefs: QueryList<CdkTreeNodeDef<T>>;\n\n    // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n    //     Remove the MAX_VALUE in viewChange\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     */\n    viewChange = new BehaviorSubject<{ start: number; end: number }>({ start: 0, end: Number.MAX_VALUE });\n\n    /** Differ used to find the changes in the data provided by the data source. */\n    protected dataDiffer: IterableDiffer<T>;\n\n    /** Subject that emits when the component has been destroyed. */\n    private onDestroy = new Subject<void>();\n\n    /** Stores the node definition that does not have a when predicate. */\n    private defaultNodeDef: CdkTreeNodeDef<T> | null;\n\n    /** Data subscription */\n    private dataSubscription: Subscription | null;\n\n    /** Level of nodes */\n    private levels: Map<T, number> = new Map<T, number>();\n\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a dara array to render.\n     */\n    @Input()\n    get dataSource(): DataSource<T> | Observable<T[]> | T[] {\n        return this._dataSource;\n    }\n\n    set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n        if (this._dataSource !== dataSource) {\n            this.switchDataSource(dataSource);\n        }\n    }\n\n    private _dataSource: DataSource<T> | Observable<T[]> | T[];\n\n    constructor(protected differs: IterableDiffers, protected changeDetectorRef: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.dataDiffer = this.differs.find([]).create(this.trackBy);\n\n        if (!this.treeControl) {\n            throw getTreeControlMissingError();\n        }\n    }\n\n    ngOnDestroy() {\n        this.nodeOutlet.viewContainer.clear();\n\n        this.onDestroy.next();\n        this.onDestroy.complete();\n\n        // tslint:disable-next-line:no-unbound-method\n        if (this._dataSource && typeof (this.dataSource as DataSource<T>).disconnect === 'function') {\n            (this.dataSource as DataSource<T>).disconnect(this);\n        }\n\n        if (this.dataSubscription) {\n            this.dataSubscription.unsubscribe();\n            this.dataSubscription = null;\n        }\n    }\n\n    ngAfterContentChecked() {\n        const defaultNodeDefs = this.nodeDefs.filter((def) => !def.when);\n\n        if (defaultNodeDefs.length > 1) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this.defaultNodeDef = defaultNodeDefs[0];\n\n        if (this.dataSource && this.nodeDefs && !this.dataSubscription) {\n            this.observeRenderChanges();\n        }\n    }\n\n    /** Check for changes made in the data and render each change (node added/removed/moved). */\n    renderNodeChanges(\n        data: T[] | ReadonlyArray<T>,\n        dataDiffer: IterableDiffer<T> = this.dataDiffer,\n        viewContainer: ViewContainerRef = this.nodeOutlet.viewContainer,\n        parentData?: T\n    ) {\n        const changes = dataDiffer.diff(data);\n\n        if (!changes) { return; }\n\n        changes.forEachOperation((item: IterableChangeRecord<T>,\n                                  adjustedPreviousIndex: number | null,\n                                  currentIndex: number | null) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[currentIndex!], currentIndex!, viewContainer, parentData);\n            } else if (currentIndex == null) {\n                viewContainer.remove(adjustedPreviousIndex!);\n                this.levels.delete(item.item);\n            } else {\n                const view = viewContainer.get(adjustedPreviousIndex!);\n                viewContainer.move(view!, currentIndex);\n            }\n        });\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     */\n    getNodeDef(data: T, i: number): CdkTreeNodeDef<T> {\n        if (this.nodeDefs.length === 1) { return this.nodeDefs.first; }\n\n        const nodeDef = this.nodeDefs.find((def) => def.when && def.when(i, data)) || this.defaultNodeDef;\n\n        if (!nodeDef) { throw getTreeMissingMatchingNodeDefError(); }\n\n        return nodeDef;\n    }\n\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     */\n    insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T) {\n        const node = this.getNodeDef(nodeData, index);\n\n        // Node context that will be provided to created embedded view\n        const context = new CdkTreeNodeOutletContext<T>(nodeData);\n\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n            /* tslint:disable-next-line:no-typeof-undefined */\n        } else if (typeof parentData !== 'undefined' && this.levels.has(parentData)) {\n            context.level = this.levels.get(parentData)! + 1;\n        } else {\n            context.level = 0;\n        }\n\n        this.levels.set(nodeData, context.level);\n\n        // Use default tree nodeOutlet, or nested node's nodeOutlet\n        const container = viewContainer ? viewContainer : this.nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n\n    /** Set up a subscription for the data provided by the data source. */\n    private observeRenderChanges() {\n        let dataStream: Observable<T[] | ReadonlyArray<T>> | undefined;\n\n        // Cannot use `instanceof DataSource` since the data source could be a literal with\n        // `connect` function and may not extends DataSource.\n        // tslint:disable-next-line:no-unbound-method\n        if (typeof (this._dataSource as DataSource<T>).connect === 'function') {\n            dataStream = (this._dataSource as DataSource<T>).connect(this);\n        } else if (this._dataSource instanceof Observable) {\n            dataStream = this._dataSource;\n        } else if (Array.isArray(this._dataSource)) {\n            dataStream = observableOf(this._dataSource);\n        }\n\n        if (dataStream) {\n            this.dataSubscription = dataStream\n                .pipe(takeUntil(this.onDestroy))\n                .subscribe((data) => this.renderNodeChanges(data));\n        } else {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     */\n    private switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n        // tslint:disable-next-line:no-unbound-method\n        if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n            (this.dataSource as DataSource<T>).disconnect(this);\n        }\n\n        if (this.dataSubscription) {\n            this.dataSubscription.unsubscribe();\n            this.dataSubscription = null;\n        }\n\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) { this.nodeOutlet.viewContainer.clear(); }\n\n        this._dataSource = dataSource;\n\n        if (this.nodeDefs) { this.observeRenderChanges(); }\n    }\n}\n\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\n@Directive({\n    selector: 'cdk-tree-node',\n    exportAs: 'cdkTreeNode',\n    host: {\n        class: 'cdk-tree-node',\n\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        '[attr.role]': 'role'\n    }\n})\nexport class CdkTreeNode<T> implements IFocusableOption, OnDestroy {\n    /**\n     * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n     * in `CdkTree` and set the data to it.\n     */\n    static mostRecentTreeNode: CdkTreeNode<any> | null = null;\n\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    protected destroyed = new Subject<void>();\n\n    get data(): T {\n        return this._data;\n    }\n\n    set data(value: T) {\n        this._data = value;\n    }\n\n    private _data: T;\n\n    get isExpanded(): boolean {\n        return this.tree.treeControl.isExpanded(this._data);\n    }\n\n    get level(): number {\n        return this.tree.treeControl.getLevel ? this.tree.treeControl.getLevel(this._data) : 0;\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        @Inject(forwardRef(() => CdkTree)) public tree: CdkTree<T>\n    ) {\n        CdkTreeNode.mostRecentTreeNode = this;\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n}\n","import {\n    AfterContentInit,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    IterableDiffers,\n    IterableDiffer,\n    OnDestroy,\n    QueryList\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { CdkTreeNodeOutlet } from './outlet';\nimport { CdkTree, CdkTreeNode } from './tree';\nimport { getTreeControlFunctionsMissingError } from './tree-errors';\n\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * For example:\n *   ```html\n *   <cdk-mested-tree-node>\n *     {{node.name}}\n *     <ng-template cdkTreeNodeOutlet></ng-template>\n *   </cdk-tree-node>\n *   ```\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\n * like this:\n *   ```html\n *   <cdk-nested-tree-node>\n *     {{node.name}}\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>\n *   </cdk-tree-node>\n *   ```\n */\n@Directive({\n    selector: 'cdk-nested-tree-node',\n    exportAs: 'cdkNestedTreeNode',\n    host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.role]': 'role',\n        class: 'cdk-tree-node cdk-nested-tree-node'\n    },\n    providers: [{ provide: CdkTreeNode, useExisting: CdkNestedTreeNode }]\n})\nexport class CdkNestedTreeNode<T> extends CdkTreeNode<T> implements AfterContentInit, OnDestroy {\n    /** The children node placeholder. */\n    @ContentChildren(CdkTreeNodeOutlet) nodeOutlet: QueryList<CdkTreeNodeOutlet>;\n\n    /** The children data dataNodes of current node. They will be placed in `CdkTreeNodeOutlet`. */\n    protected children: T[];\n\n    /** Differ used to find the changes in the data provided by the data source. */\n    private dataDiffer: IterableDiffer<T>;\n\n    constructor(\n        protected elementRef: ElementRef,\n        tree: CdkTree<T>,\n        protected differs: IterableDiffers\n    ) {\n        super(elementRef, tree);\n    }\n\n    ngAfterContentInit() {\n        this.dataDiffer = this.differs.find([]).create(this.tree.trackBy);\n\n        if (!this.tree.treeControl.getChildren) {\n            throw getTreeControlFunctionsMissingError();\n        }\n\n        this.tree.treeControl.getChildren(this.data)\n            .pipe(takeUntil(this.destroyed))\n            .subscribe((result) => {\n                this.children = result;\n                this.updateChildrenNodes();\n            });\n\n        this.nodeOutlet.changes\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => this.updateChildrenNodes());\n    }\n\n    ngOnDestroy() {\n        this.clear();\n        super.ngOnDestroy();\n    }\n\n    /** Add children dataNodes to the NodeOutlet */\n    protected updateChildrenNodes(): void {\n        if (this.nodeOutlet.length && this.children) {\n            this.tree.renderNodeChanges(\n                this.children, this.dataDiffer, this.nodeOutlet.first.viewContainer, this.data\n            );\n        } else {\n            // Reset the data differ if there's no children nodes displayed\n            this.dataDiffer.diff([]);\n        }\n    }\n\n    /** Clear the children dataNodes. */\n    protected clear(): void {\n        if (this.nodeOutlet && this.nodeOutlet.first) {\n            this.nodeOutlet.first.viewContainer.clear();\n            this.dataDiffer.diff([]);\n        }\n    }\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { Directive, ElementRef, Input, OnDestroy, Optional, Renderer2 } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { CdkTree, CdkTreeNode } from './tree';\n\n\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\n@Directive({\n    selector: '[cdkTreeNodePadding]'\n})\nexport class CdkTreeNodePadding<T> implements OnDestroy {\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    @Input('cdkTreeNodePadding')\n    get level(): number {\n        return this._level;\n    }\n\n    set level(value: number) {\n        this._level = value;\n\n        this.setPadding();\n    }\n\n    /* tslint:disable-next-line:naming-convention */\n    protected _level: number;\n\n    @Input('cdkTreeNodePaddingIndent')\n    get indent(): number {\n        return this._indent;\n    }\n\n    set indent(value: number) {\n        this._indent = value;\n\n        this.setPadding();\n    }\n\n    /* tslint:disable-next-line:naming-convention */\n    protected _indent: number;\n\n    private destroyed = new Subject<void>();\n\n    constructor(\n        protected treeNode: CdkTreeNode<T>,\n        protected tree: CdkTree<T>,\n        private renderer: Renderer2,\n        private element: ElementRef<HTMLElement>,\n        @Optional() private dir: Directionality\n    ) {\n\n        if (this.dir && this.dir.change) {\n            this.dir.change\n                .pipe(takeUntil(this.destroyed))\n                .subscribe(() => this.setPadding());\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n    protected paddingIndent(): string | null {\n        const basicPadding = 12;\n        const nodeLevel = (this.treeNode.data && this.tree.treeControl.getLevel)\n            ? this.tree.treeControl.getLevel(this.treeNode.data)\n            : null;\n\n        const level = this._level || nodeLevel;\n\n        return `${level ? (level * this._indent) + basicPadding : basicPadding}px`;\n    }\n\n    protected setPadding() {\n        const padding = this.paddingIndent();\n        const paddingProp = this.dir && this.dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n\n        this.renderer.setStyle(this.element.nativeElement, paddingProp, padding);\n    }\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTree, CdkTreeNode } from './tree';\n\n\n@Directive({\n    selector: '[cdkTreeNodeToggle]',\n    host: {\n        '(click)': 'toggle($event)'\n    }\n})\nexport class CdkTreeNodeToggle<T> {\n    @Input('cdkTreeNodeToggleRecursive')\n    get recursive(): boolean {\n        return this._recursive;\n    }\n\n    set recursive(value: boolean) {\n        this._recursive = value;\n    }\n\n    private _recursive = false;\n\n    constructor(protected tree: CdkTree<T>, protected treeNode: CdkTreeNode<T>) {}\n\n    toggle(event: Event): void {\n        this.recursive\n            ? this.tree.treeControl.toggleDescendants(this.treeNode.data)\n            : this.tree.treeControl.toggle(this.treeNode.data);\n\n        event.stopPropagation();\n    }\n}\n","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { CdkNestedTreeNode } from './nested-node';\nimport { CdkTreeNodeDef } from './node';\nimport { CdkTreeNodeOutlet } from './outlet';\nimport { CdkTreeNodePadding } from './padding';\nimport { CdkTreeNodeToggle } from './toggle';\nimport { CdkTree, CdkTreeNode } from './tree';\n\n\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet\n];\n\n@NgModule({\n    imports: [CommonModule],\n    exports: EXPORTED_DECLARATIONS,\n    declarations: EXPORTED_DECLARATIONS,\n    providers: [FocusMonitor]\n})\nexport class CdkTreeModule {}\n"]}