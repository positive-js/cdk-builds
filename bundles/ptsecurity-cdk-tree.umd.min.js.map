{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../../../packages/cdk/tree/control/base-tree-control.ts","../../../packages/cdk/tree/control/flat-tree-control.ts","../../../packages/cdk/tree/control/nested-tree-control.ts","../../../packages/cdk/tree/outlet.ts","../../../packages/cdk/tree/node.ts","../../../packages/cdk/tree/tree-errors.ts","../../../packages/cdk/tree/tree.ts","../../../packages/cdk/tree/nested-node.ts","../../../packages/cdk/tree/padding.ts","../../../packages/cdk/tree/toggle.ts","../../../packages/cdk/tree/tree.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","TypeError","String","__","this","constructor","create","__read","o","n","m","Symbol","iterator","r","e","i","ar","next","done","push","value","error","__spread","arguments","length","concat","BaseTreeControl","expansionModel","SelectionModel","filterModel","filterValue","BehaviorSubject","toggle","dataNode","expand","select","collapse","deselect","isExpanded","isSelected","toggleDescendants","collapseDescendants","expandDescendants","collapseAll","clear","toBeProcessed","apply","getDescendants","_a","defaultCompareValues","firstValue","secondValue","defaultCompareViewValues","firstViewValue","secondViewValue","RegExp","test","FlatTreeControl","getLevel","isExpandable","getValue","getViewValue","compareValues","compareViewValues","_this","_super","results","dataNodes","indexOf","expandAll","getParents","node","result","parent","unshift","hasValue","find","filterNodes","filteredNodes","filter","filteredNodesWithTheirParents","Set","forEach","filteredNode","add","from","NestedTreeControl","getChildren","allNodes","reduce","accumulator","descendants","_getDescendants","splice","pipe","take","subscribe","children","child","viewContainer","changeDetectorRef","Directive","args","selector","ViewContainerRef","ChangeDetectorRef","data","$implicit","template","getTreeNoValidDataSourceError","Error","getTreeMultipleDefaultNodeDefsError","getTreeMissingMatchingNodeDefError","getTreeControlMissingError","getTreeControlFunctionsMissingError","inputs","TemplateRef","CdkTree","differs","viewChange","start","end","Number","MAX_VALUE","onDestroy","Subject","levels","Map","defineProperty","_dataSource","dataSource","switchDataSource","ngOnInit","dataDiffer","trackBy","treeControl","ngOnDestroy","nodeOutlet","complete","disconnect","dataSubscription","unsubscribe","ngAfterContentChecked","defaultNodeDefs","nodeDefs","def","when","defaultNodeDef","observeRenderChanges","renderNodeChanges","parentData","changes","diff","forEachOperation","item","adjustedPreviousIndex","currentIndex","previousIndex","insertNode","remove","delete","view","get","move","detectChanges","getNodeDef","first","nodeDef","nodeData","index","context","CdkTreeNodeOutletContext","level","has","set","createEmbeddedView","CdkTreeNode","mostRecentTreeNode","dataStream","connect","Observable","isArray","observableOf","takeUntil","Component","exportAs","host","class","role","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","IterableDiffers","Input","ViewChild","CdkTreeNodeOutlet","static","ContentChildren","CdkTreeNodeDef","elementRef","tree","destroyed","_data","focus","nativeElement","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","ElementRef","decorators","type","Inject","forwardRef","CdkNestedTreeNode","ngAfterContentInit","updateChildrenNodes","providers","provide","useExisting","cssUnitPattern","CdkTreeNodePadding","treeNode","renderer","element","dir","_indent","indentUnits","change","setPadding","_level","setLevelInput","indent","setIndentInput","coerceNumberProperty","units","parts","split","paddingIndent","nodeLevel","padding","paddingProp","setStyle","Renderer2","Directionality","Optional","CdkTreeNodeToggle","_recursive","event","recursive","stopPropagation","(click)","EXPORTED_DECLARATIONS","NgModule","imports","CommonModule","exports","declarations","FocusMonitor"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import { SelectionModel } from '@angular/cdk/collections';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nimport { TreeControl } from './tree-control';\n\n\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\n/* tslint:disable-next-line:naming-convention */\nexport abstract class BaseTreeControl<T> implements TreeControl<T> {\n\n    dataNodes: T[];\n\n    /** A selection model with multi-selection to track expansion status. */\n    expansionModel: SelectionModel<T> = new SelectionModel<T>(true);\n\n    filterModel: SelectionModel<T> = new SelectionModel<T>(true);\n\n    filterValue = new BehaviorSubject<string>('');\n\n    /** Get depth of a given data node, return the level number. This is for flat tree node. */\n    getLevel: (dataNode: T) => number;\n\n    /**\n     * Whether the data node is expandable. Returns true if expandable.\n     * This is for flat tree node.\n     */\n    isExpandable: (dataNode: T) => boolean;\n\n    /** Gets a stream that emits whenever the given data node's children change. */\n    getChildren: (dataNode: T) => Observable<T[]>;\n\n    /** Gets a list of descendent data nodes of a subtree rooted at given data node recursively. */\n    abstract getDescendants(dataNode: T): T[];\n\n    /** Expands all data nodes in the tree. */\n    abstract expandAll(): void;\n\n    /** Toggles one single data node's expanded/collapsed state. */\n    toggle(dataNode: T): void {\n        if (this.filterValue.value) { return; }\n\n        this.expansionModel.toggle(dataNode);\n    }\n\n    /** Expands one single data node. */\n    expand(dataNode: T): void {\n        if (this.filterValue.value) { return; }\n\n        this.expansionModel.select(dataNode);\n    }\n\n    /** Collapses one single data node. */\n    collapse(dataNode: T): void {\n        if (this.filterValue.value) { return; }\n\n        this.expansionModel.deselect(dataNode);\n    }\n\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n    isExpanded(dataNode: T): boolean {\n        return this.expansionModel.isSelected(dataNode);\n    }\n\n    /** Toggles a subtree rooted at `node` recursively. */\n    toggleDescendants(dataNode: T): void {\n        this.expansionModel.isSelected(dataNode)\n            ? this.collapseDescendants(dataNode)\n            : this.expandDescendants(dataNode);\n    }\n\n    /** Collapse all dataNodes in the tree. */\n    collapseAll(): void {\n        this.expansionModel.clear();\n    }\n\n    /** Expands a subtree rooted at given data node recursively. */\n    expandDescendants(dataNode: T): void {\n        const toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed);\n    }\n\n    /** Collapses a subtree rooted at given data node recursively. */\n    collapseDescendants(dataNode: T): void {\n        const toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed);\n    }\n}\n","import { BaseTreeControl } from './base-tree-control';\n\n\nexport function defaultCompareValues(firstValue, secondValue): boolean {\n    return firstValue === secondValue;\n}\n\nexport function defaultCompareViewValues(firstViewValue, secondViewValue): boolean {\n    return RegExp(secondViewValue, 'gi').test(firstViewValue);\n}\n\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nexport class FlatTreeControl<T> extends BaseTreeControl<T> {\n    /** Construct with flat tree data node functions getLevel, isExpandable, getValue and getViewValue. */\n    constructor(\n        public getLevel: (dataNode: T) => number,\n        public isExpandable: (dataNode: T) => boolean,\n        /** getValue will be used to determine if the tree contains value or not. Used in method hasValue */\n        public getValue: (dataNode) => any,\n        /** getViewValue will be used for filter nodes. Returned value will be first argument in filterNodesFunction */\n        public getViewValue: (dataNode) => string,\n        /** compareValues will be used to comparing values. */\n        public compareValues: (firstValue, secondValue) => boolean = defaultCompareValues,\n        /** compareValues will be used to comparing values. */\n        public compareViewValues: (firstViewValue, secondViewValue) => boolean = defaultCompareViewValues\n    ) {\n        super();\n    }\n\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     */\n    getDescendants(dataNode: T): T[] {\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        const results: T[] = [];\n\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1;\n             i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]);\n             i++\n        ) {\n            results.push(this.dataNodes[i]);\n        }\n\n        return results;\n    }\n\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     */\n    expandAll(): void {\n        this.expansionModel.select(...this.dataNodes);\n    }\n\n    getParents(node: any, result: T[]): T[] {\n        if (node.parent) {\n            result.unshift(node.parent);\n\n            return this.getParents(node.parent, result);\n        } else {\n            return result;\n        }\n    }\n\n    hasValue(value: string): T | undefined {\n        return this.dataNodes.find((node: any) => this.compareValues(this.getValue(node), value));\n    }\n\n    filterNodes(value: string): void {\n        this.filterModel.clear();\n\n        const filteredNodes = this.dataNodes.filter(\n            (node: any) => this.compareViewValues(this.getViewValue(node), value)\n        );\n\n        const filteredNodesWithTheirParents = new Set();\n        filteredNodes.forEach((filteredNode) => {\n            this.getParents(filteredNode, []).forEach((node) => filteredNodesWithTheirParents.add(node));\n\n            filteredNodesWithTheirParents.add(filteredNode);\n        });\n\n        this.filterModel.select(...Array.from(filteredNodesWithTheirParents) as []);\n\n        this.filterValue.next(value);\n    }\n}\n","import { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { BaseTreeControl } from './base-tree-control';\n\n\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nexport class NestedTreeControl<T> extends BaseTreeControl<T> {\n\n    /** Construct with nested tree function getChildren. */\n    constructor(public getChildren: (dataNode: T) => Observable<T[]>) {\n        super();\n    }\n\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     */\n    expandAll(): void {\n        this.expansionModel.clear();\n        const allNodes = this.dataNodes.reduce(\n            (accumulator: T[], dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode],\n            []\n        );\n        this.expansionModel.select(...allNodes);\n    }\n\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n    getDescendants(dataNode: T): T[] {\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n\n        return descendants.splice(1);\n    }\n\n    /** A helper function to get descendants recursively. */\n    // todo нужно придумать другое название и понять в чем отличие между getDescendants и _getDescendants\n    /* tslint:disable-next-line:naming-convention */\n    private _getDescendants(descendants: T[], dataNode: T): void {\n        descendants.push(dataNode);\n\n        this.getChildren(dataNode)\n            .pipe(take(1))\n            .subscribe((children) => {\n                if (children && children.length > 0) {\n                    children.forEach((child: T) => this._getDescendants(descendants, child));\n                }\n            });\n    }\n}\n","import { ChangeDetectorRef, Directive, ViewContainerRef } from '@angular/core';\n\n\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({ selector: '[cdkTreeNodeOutlet]' })\nexport class CdkTreeNodeOutlet {\n    constructor(public viewContainer: ViewContainerRef, public changeDetectorRef: ChangeDetectorRef) {}\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n/** Context provided to the tree node component. */\nexport class CdkTreeNodeOutletContext<T> {\n    /** Data for the node. */\n    $implicit: T;\n\n    /** Depth of the node. */\n    level: number;\n\n    /** Index location of the node. */\n    index?: number;\n\n    /** Length of the number of total dataNodes. */\n    count?: number;\n\n    constructor(data: T) {\n        this.$implicit = data;\n    }\n}\n\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n@Directive({\n    selector: '[cdkTreeNodeDef]',\n    inputs: [\n        'when: cdkTreeNodeDefWhen'\n    ]\n})\nexport class CdkTreeNodeDef<T> {\n    /**\n     * Function that should return true if this node template should be used for the provided node\n     * data and index. If left undefined, this node will be considered the default node template to\n     * use when no other when functions return true for the data.\n     * For every node, there must be at least one when function that passes or an undefined to\n     * default.\n     */\n    when: (index: number, nodeData: T) => boolean;\n\n    /** @docs-private */\n    constructor(public template: TemplateRef<any>) {}\n}\n","/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nexport function getTreeNoValidDataSourceError() {\n  return Error(`A valid data source must be provided.`);\n}\n\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nexport function getTreeMultipleDefaultNodeDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nexport function getTreeMissingMatchingNodeDefError() {\n  return Error(`Could not find a matching node definition for the provided node data.`);\n}\n\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nexport function getTreeControlMissingError() {\n  return Error(`Could not find a tree control for the tree.`);\n}\n\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nexport function getTreeControlFunctionsMissingError() {\n  return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n","import { CollectionViewer, DataSource } from '@angular/cdk/collections';\nimport {\n    AfterContentChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    Input,\n    IterableChangeRecord,\n    IterableDiffer,\n    IterableDiffers,\n    OnDestroy,\n    OnInit,\n    QueryList,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation,\n    TrackByFunction, Inject, forwardRef\n} from '@angular/core';\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { BehaviorSubject, Observable, of as observableOf, Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { TreeControl } from './control/tree-control';\nimport { CdkTreeNodeDef, CdkTreeNodeOutletContext } from './node';\nimport { CdkTreeNodeOutlet } from './outlet';\nimport {\n    getTreeControlMissingError,\n    getTreeMissingMatchingNodeDefError,\n    getTreeMultipleDefaultNodeDefsError,\n    getTreeNoValidDataSourceError\n} from './tree-errors';\n\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\n@Component({\n    selector: 'cdk-tree',\n    exportAs: 'cdkTree',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        class: 'cdk-tree',\n        role: 'tree'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CdkTree<T> implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\n\n    /** The tree controller */\n    @Input() treeControl: TreeControl<T>;\n\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data\n     * relative to the function to know if a node should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    @Input() trackBy: TrackByFunction<T>;\n\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(CdkTreeNodeOutlet, {static: true}) nodeOutlet: CdkTreeNodeOutlet;\n\n    /** The tree node template for the tree */\n    @ContentChildren(CdkTreeNodeDef) nodeDefs: QueryList<CdkTreeNodeDef<T>>;\n\n    // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n    //     Remove the MAX_VALUE in viewChange\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     */\n    viewChange = new BehaviorSubject<{ start: number; end: number }>({ start: 0, end: Number.MAX_VALUE });\n\n    /** Differ used to find the changes in the data provided by the data source. */\n    protected dataDiffer: IterableDiffer<T>;\n\n    /** Subject that emits when the component has been destroyed. */\n    private onDestroy = new Subject<void>();\n\n    /** Stores the node definition that does not have a when predicate. */\n    private defaultNodeDef: CdkTreeNodeDef<T> | null;\n\n    /** Data subscription */\n    private dataSubscription: Subscription | null;\n\n    /** Level of nodes */\n    private levels: Map<T, number> = new Map<T, number>();\n\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a dara array to render.\n     */\n    @Input()\n    get dataSource(): DataSource<T> | Observable<T[]> | T[] {\n        return this._dataSource;\n    }\n\n    set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n        if (this._dataSource !== dataSource) {\n            this.switchDataSource(dataSource);\n        }\n    }\n\n    private _dataSource: DataSource<T> | Observable<T[]> | T[];\n\n    constructor(protected differs: IterableDiffers, protected changeDetectorRef: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.dataDiffer = this.differs.find([]).create(this.trackBy);\n\n        if (!this.treeControl) {\n            throw getTreeControlMissingError();\n        }\n    }\n\n    ngOnDestroy() {\n        this.nodeOutlet.viewContainer.clear();\n\n        this.onDestroy.next();\n        this.onDestroy.complete();\n\n        // tslint:disable-next-line:no-unbound-method\n        if (this._dataSource && typeof (this.dataSource as DataSource<T>).disconnect === 'function') {\n            (this.dataSource as DataSource<T>).disconnect(this);\n        }\n\n        if (this.dataSubscription) {\n            this.dataSubscription.unsubscribe();\n            this.dataSubscription = null;\n        }\n    }\n\n    ngAfterContentChecked() {\n        const defaultNodeDefs = this.nodeDefs.filter((def) => !def.when);\n\n        if (defaultNodeDefs.length > 1) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this.defaultNodeDef = defaultNodeDefs[0];\n\n        if (this.dataSource && this.nodeDefs && !this.dataSubscription) {\n            this.observeRenderChanges();\n        }\n    }\n\n    /** Check for changes made in the data and render each change (node added/removed/moved). */\n    renderNodeChanges(\n        data: T[] | ReadonlyArray<T>,\n        dataDiffer: IterableDiffer<T> = this.dataDiffer,\n        viewContainer: ViewContainerRef = this.nodeOutlet.viewContainer,\n        parentData?: T\n    ) {\n        const changes = dataDiffer.diff(data);\n\n        if (!changes) { return; }\n\n        changes.forEachOperation((item: IterableChangeRecord<T>,\n                                  adjustedPreviousIndex: number | null,\n                                  currentIndex: number | null) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[currentIndex!], currentIndex!, viewContainer, parentData);\n            } else if (currentIndex == null) {\n                viewContainer.remove(adjustedPreviousIndex!);\n                this.levels.delete(item.item);\n            } else {\n                const view = viewContainer.get(adjustedPreviousIndex!);\n                viewContainer.move(view!, currentIndex);\n            }\n        });\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     */\n    getNodeDef(data: T, i: number): CdkTreeNodeDef<T> {\n        if (this.nodeDefs.length === 1) { return this.nodeDefs.first; }\n\n        const nodeDef = this.nodeDefs.find((def) => def.when && def.when(i, data)) || this.defaultNodeDef;\n\n        if (!nodeDef) { throw getTreeMissingMatchingNodeDefError(); }\n\n        return nodeDef;\n    }\n\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     */\n    insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T) {\n        const node = this.getNodeDef(nodeData, index);\n\n        // Node context that will be provided to created embedded view\n        const context = new CdkTreeNodeOutletContext<T>(nodeData);\n\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n            /* tslint:disable-next-line:no-typeof-undefined */\n        } else if (typeof parentData !== 'undefined' && this.levels.has(parentData)) {\n            context.level = this.levels.get(parentData)! + 1;\n        } else {\n            context.level = 0;\n        }\n\n        this.levels.set(nodeData, context.level);\n\n        // Use default tree nodeOutlet, or nested node's nodeOutlet\n        const container = viewContainer ? viewContainer : this.nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n\n    /** Set up a subscription for the data provided by the data source. */\n    private observeRenderChanges() {\n        let dataStream: Observable<T[] | ReadonlyArray<T>> | undefined;\n\n        // Cannot use `instanceof DataSource` since the data source could be a literal with\n        // `connect` function and may not extends DataSource.\n        // tslint:disable-next-line:no-unbound-method\n        if (typeof (this._dataSource as DataSource<T>).connect === 'function') {\n            dataStream = (this._dataSource as DataSource<T>).connect(this);\n        } else if (this._dataSource instanceof Observable) {\n            dataStream = this._dataSource;\n        } else if (Array.isArray(this._dataSource)) {\n            dataStream = observableOf(this._dataSource);\n        }\n\n        if (dataStream) {\n            this.dataSubscription = dataStream\n                .pipe(takeUntil(this.onDestroy))\n                .subscribe((data) => this.renderNodeChanges(data));\n        } else {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     */\n    private switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n        // tslint:disable-next-line:no-unbound-method\n        if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n            (this.dataSource as DataSource<T>).disconnect(this);\n        }\n\n        if (this.dataSubscription) {\n            this.dataSubscription.unsubscribe();\n            this.dataSubscription = null;\n        }\n\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) { this.nodeOutlet.viewContainer.clear(); }\n\n        this._dataSource = dataSource;\n\n        if (this.nodeDefs) { this.observeRenderChanges(); }\n    }\n}\n\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\n@Directive({\n    selector: 'cdk-tree-node',\n    exportAs: 'cdkTreeNode',\n    host: {\n        class: 'cdk-tree-node',\n\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        '[attr.role]': 'role'\n    }\n})\nexport class CdkTreeNode<T> implements IFocusableOption, OnDestroy {\n    /**\n     * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n     * in `CdkTree` and set the data to it.\n     */\n    static mostRecentTreeNode: CdkTreeNode<any> | null = null;\n\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    protected destroyed = new Subject<void>();\n\n    get data(): T {\n        return this._data;\n    }\n\n    set data(value: T) {\n        this._data = value;\n    }\n\n    private _data: T;\n\n    get isExpanded(): boolean {\n        return this.tree.treeControl.isExpanded(this._data);\n    }\n\n    get level(): number {\n        return this.tree.treeControl.getLevel ? this.tree.treeControl.getLevel(this._data) : 0;\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        @Inject(forwardRef(() => CdkTree)) public tree: CdkTree<T>\n    ) {\n        CdkTreeNode.mostRecentTreeNode = this;\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n}\n","import {\n    AfterContentInit,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    IterableDiffers,\n    IterableDiffer,\n    OnDestroy,\n    QueryList\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { CdkTreeNodeOutlet } from './outlet';\nimport { CdkTree, CdkTreeNode } from './tree';\nimport { getTreeControlFunctionsMissingError } from './tree-errors';\n\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * For example:\n *   ```html\n *   <cdk-mested-tree-node>\n *     {{node.name}}\n *     <ng-template cdkTreeNodeOutlet></ng-template>\n *   </cdk-tree-node>\n *   ```\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\n * like this:\n *   ```html\n *   <cdk-nested-tree-node>\n *     {{node.name}}\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>\n *   </cdk-tree-node>\n *   ```\n */\n@Directive({\n    selector: 'cdk-nested-tree-node',\n    exportAs: 'cdkNestedTreeNode',\n    host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.role]': 'role',\n        class: 'cdk-tree-node cdk-nested-tree-node'\n    },\n    providers: [{ provide: CdkTreeNode, useExisting: CdkNestedTreeNode }]\n})\nexport class CdkNestedTreeNode<T> extends CdkTreeNode<T> implements AfterContentInit, OnDestroy {\n    /** The children node placeholder. */\n    @ContentChildren(CdkTreeNodeOutlet) nodeOutlet: QueryList<CdkTreeNodeOutlet>;\n\n    /** The children data dataNodes of current node. They will be placed in `CdkTreeNodeOutlet`. */\n    protected children: T[];\n\n    /** Differ used to find the changes in the data provided by the data source. */\n    private dataDiffer: IterableDiffer<T>;\n\n    constructor(\n        protected elementRef: ElementRef,\n        tree: CdkTree<T>,\n        protected differs: IterableDiffers\n    ) {\n        super(elementRef, tree);\n    }\n\n    ngAfterContentInit() {\n        this.dataDiffer = this.differs.find([]).create(this.tree.trackBy);\n\n        if (!this.tree.treeControl.getChildren) {\n            throw getTreeControlFunctionsMissingError();\n        }\n\n        this.tree.treeControl.getChildren(this.data)\n            .pipe(takeUntil(this.destroyed))\n            .subscribe((result) => {\n                this.children = result;\n                this.updateChildrenNodes();\n            });\n\n        this.nodeOutlet.changes\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => this.updateChildrenNodes());\n    }\n\n    ngOnDestroy() {\n        this.clear();\n        super.ngOnDestroy();\n    }\n\n    /** Add children dataNodes to the NodeOutlet */\n    protected updateChildrenNodes(): void {\n        if (this.nodeOutlet.length && this.children) {\n            this.tree.renderNodeChanges(\n                this.children, this.dataDiffer, this.nodeOutlet.first.viewContainer, this.data\n            );\n        } else {\n            // Reset the data differ if there's no children nodes displayed\n            this.dataDiffer.diff([]);\n        }\n    }\n\n    /** Clear the children dataNodes. */\n    protected clear(): void {\n        if (this.nodeOutlet && this.nodeOutlet.first) {\n            this.nodeOutlet.first.viewContainer.clear();\n            this.dataDiffer.diff([]);\n        }\n    }\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directive, ElementRef, Input, OnDestroy, Optional, Renderer2 } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { CdkTree, CdkTreeNode } from './tree';\n\n\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\n@Directive({\n    selector: '[cdkTreeNodePadding]'\n})\nexport class CdkTreeNodePadding<T> implements OnDestroy {\n\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    @Input('cdkTreeNodePadding')\n    get level(): number { return this._level; }\n    set level(value: number) { this.setLevelInput(value); }\n\n    /* tslint:disable-next-line:naming-convention orthodox-getter-and-setter */\n    _level: number;\n\n    @Input('cdkTreeNodePaddingIndent')\n    get indent(): number | string { return this._indent; }\n    set indent(indent: number | string) { this.setIndentInput(indent); }\n\n    /* tslint:disable-next-line:naming-convention orthodox-getter-and-setter */\n    _indent: number = 20;\n\n    /** CSS units used for the indentation value. */\n    indentUnits = 'px';\n\n    private destroyed = new Subject<void>();\n\n    constructor(\n        protected treeNode: CdkTreeNode<T>,\n        protected tree: CdkTree<T>,\n        private renderer: Renderer2,\n        private element: ElementRef<HTMLElement>,\n        @Optional() private dir: Directionality\n    ) {\n\n        if (this.dir && this.dir.change) {\n            this.dir.change\n                .pipe(takeUntil(this.destroyed))\n                .subscribe(() => this.setPadding());\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    // tslint:disable-next-line:naming-convention\n    protected setLevelInput(value: number) {\n        // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n        // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n        // they set 0 explicitly.\n        this._level = coerceNumberProperty(value, null)!;\n        this.setPadding();\n    }\n\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    protected setIndentInput(indent: number | string) {\n        let value = indent;\n        let units = 'px';\n\n        if (typeof indent === 'string') {\n            const parts = indent.split(cssUnitPattern);\n            value = parts[0];\n            units = parts[1] || units;\n        }\n\n        this.indentUnits = units;\n        this._indent = coerceNumberProperty(value);\n        this.setPadding();\n    }\n\n    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n    protected paddingIndent(): string | null {\n        const basicPadding = 12;\n        const nodeLevel = (this.treeNode.data && this.tree.treeControl.getLevel)\n            ? this.tree.treeControl.getLevel(this.treeNode.data)\n            : null;\n\n        const level = this._level || nodeLevel;\n\n        return `${level ? (level * this._indent) + basicPadding : basicPadding}px`;\n    }\n\n    protected setPadding() {\n        const padding = this.paddingIndent();\n        const paddingProp = this.dir && this.dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n\n        this.renderer.setStyle(this.element.nativeElement, paddingProp, padding);\n    }\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTree, CdkTreeNode } from './tree';\n\n\n@Directive({\n    selector: '[cdkTreeNodeToggle]',\n    host: {\n        '(click)': 'toggle($event)'\n    }\n})\nexport class CdkTreeNodeToggle<T> {\n    @Input('cdkTreeNodeToggleRecursive')\n    get recursive(): boolean {\n        return this._recursive;\n    }\n\n    set recursive(value: boolean) {\n        this._recursive = value;\n    }\n\n    private _recursive = false;\n\n    constructor(protected tree: CdkTree<T>, protected treeNode: CdkTreeNode<T>) {}\n\n    toggle(event: Event): void {\n        this.recursive\n            ? this.tree.treeControl.toggleDescendants(this.treeNode.data)\n            : this.tree.treeControl.toggle(this.treeNode.data);\n\n        event.stopPropagation();\n    }\n}\n","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { CdkNestedTreeNode } from './nested-node';\nimport { CdkTreeNodeDef } from './node';\nimport { CdkTreeNodeOutlet } from './outlet';\nimport { CdkTreeNodePadding } from './padding';\nimport { CdkTreeNodeToggle } from './toggle';\nimport { CdkTree, CdkTreeNode } from './tree';\n\n\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet\n];\n\n@NgModule({\n    imports: [CommonModule],\n    exports: EXPORTED_DECLARATIONS,\n    declarations: EXPORTED_DECLARATIONS,\n    providers: [FocusMonitor]\n})\nexport class CdkTreeModule {}\n"]}