{"version":3,"file":"tree.es5.js","sources":["../../../packages/cdk/tree/tree.module.ts","../../../packages/cdk/tree/toggle.ts","../../../packages/cdk/tree/padding.ts","../../../packages/cdk/tree/nested-node.ts","../../../packages/cdk/tree/tree.ts","../../../packages/cdk/tree/tree-errors.ts","../../../packages/cdk/tree/node.ts","../../../packages/cdk/tree/outlet.ts","../../../packages/cdk/tree/control/nested-tree-control.ts","../../../packages/cdk/tree/control/flat-tree-control.ts","../../../packages/cdk/tree/control/base-tree-control.ts"],"sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { CdkNestedTreeNode } from './nested-node';\nimport { CdkTreeNodeDef } from './node';\nimport { CdkTreeNodeOutlet } from './outlet';\nimport { CdkTreeNodePadding } from './padding';\nimport { CdkTreeNodeToggle } from './toggle';\nimport { CdkTree, CdkTreeNode } from './tree';\n\n\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet\n];\n\n@NgModule({\n    imports: [CommonModule],\n    exports: EXPORTED_DECLARATIONS,\n    declarations: EXPORTED_DECLARATIONS,\n    providers: [FocusMonitor]\n})\nexport class CdkTreeModule {}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTree, CdkTreeNode } from './tree';\n\n\n@Directive({\n    selector: '[cdkTreeNodeToggle]',\n    host: {\n        '(click)': 'toggle($event)'\n    }\n})\nexport class CdkTreeNodeToggle<T> {\n    @Input('cdkTreeNodeToggleRecursive')\n    get recursive(): boolean {\n        return this._recursive;\n    }\n\n    set recursive(value: boolean) {\n        this._recursive = value;\n    }\n\n    private _recursive = false;\n\n    constructor(protected tree: CdkTree<T>, protected treeNode: CdkTreeNode<T>) {}\n\n    toggle(event: Event): void {\n        this.recursive\n            ? this.tree.treeControl.toggleDescendants(this.treeNode.data)\n            : this.tree.treeControl.toggle(this.treeNode.data);\n\n        event.stopPropagation();\n    }\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { Directive, ElementRef, Input, OnDestroy, Optional, Renderer2 } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { CdkTree, CdkTreeNode } from './tree';\n\n\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\n@Directive({\n    selector: '[cdkTreeNodePadding]'\n})\nexport class CdkTreeNodePadding<T> implements OnDestroy {\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    @Input('cdkTreeNodePadding')\n    get level(): number {\n        return this._level;\n    }\n\n    set level(value: number) {\n        this._level = value;\n\n        this.setPadding();\n    }\n\n    /* tslint:disable-next-line:naming-convention */\n    protected _level: number;\n\n    @Input('cdkTreeNodePaddingIndent')\n    get indent(): number {\n        return this._indent;\n    }\n\n    set indent(value: number) {\n        this._indent = value;\n\n        this.setPadding();\n    }\n\n    /* tslint:disable-next-line:naming-convention */\n    protected _indent: number;\n\n    private destroyed = new Subject<void>();\n\n    constructor(\n        protected treeNode: CdkTreeNode<T>,\n        protected tree: CdkTree<T>,\n        private renderer: Renderer2,\n        private element: ElementRef<HTMLElement>,\n        @Optional() private dir: Directionality\n    ) {\n\n        if (this.dir && this.dir.change) {\n            this.dir.change\n                .pipe(takeUntil(this.destroyed))\n                .subscribe(() => this.setPadding());\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n    protected paddingIndent(): string | null {\n        const basicPadding = 12;\n        const nodeLevel = (this.treeNode.data && this.tree.treeControl.getLevel)\n            ? this.tree.treeControl.getLevel(this.treeNode.data)\n            : null;\n\n        const level = this._level || nodeLevel;\n\n        return `${level ? (level * this._indent) + basicPadding : basicPadding}px`;\n    }\n\n    protected setPadding() {\n        const padding = this.paddingIndent();\n        const paddingProp = this.dir && this.dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n\n        this.renderer.setStyle(this.element.nativeElement, paddingProp, padding);\n    }\n}\n","import {\n    AfterContentInit,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    IterableDiffers,\n    IterableDiffer,\n    OnDestroy,\n    QueryList\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { CdkTreeNodeOutlet } from './outlet';\nimport { CdkTree, CdkTreeNode } from './tree';\nimport { getTreeControlFunctionsMissingError } from './tree-errors';\n\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * For example:\n *   ```html\n *   <cdk-mested-tree-node>\n *     {{node.name}}\n *     <ng-template cdkTreeNodeOutlet></ng-template>\n *   </cdk-tree-node>\n *   ```\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\n * like this:\n *   ```html\n *   <cdk-nested-tree-node>\n *     {{node.name}}\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>\n *   </cdk-tree-node>\n *   ```\n */\n@Directive({\n    selector: 'cdk-nested-tree-node',\n    exportAs: 'cdkNestedTreeNode',\n    host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.role]': 'role',\n        class: 'cdk-tree-node cdk-nested-tree-node'\n    },\n    providers: [{ provide: CdkTreeNode, useExisting: CdkNestedTreeNode }]\n})\nexport class CdkNestedTreeNode<T> extends CdkTreeNode<T> implements AfterContentInit, OnDestroy {\n    /** The children node placeholder. */\n    @ContentChildren(CdkTreeNodeOutlet) nodeOutlet: QueryList<CdkTreeNodeOutlet>;\n\n    /** The children data dataNodes of current node. They will be placed in `CdkTreeNodeOutlet`. */\n    protected children: T[];\n\n    /** Differ used to find the changes in the data provided by the data source. */\n    private dataDiffer: IterableDiffer<T>;\n\n    constructor(\n        protected elementRef: ElementRef,\n        tree: CdkTree<T>,\n        protected differs: IterableDiffers\n    ) {\n        super(elementRef, tree);\n    }\n\n    ngAfterContentInit() {\n        this.dataDiffer = this.differs.find([]).create(this.tree.trackBy);\n\n        if (!this.tree.treeControl.getChildren) {\n            throw getTreeControlFunctionsMissingError();\n        }\n\n        this.tree.treeControl.getChildren(this.data)\n            .pipe(takeUntil(this.destroyed))\n            .subscribe((result) => {\n                this.children = result;\n                this.updateChildrenNodes();\n            });\n\n        this.nodeOutlet.changes\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => this.updateChildrenNodes());\n    }\n\n    ngOnDestroy() {\n        this.clear();\n        super.ngOnDestroy();\n    }\n\n    /** Add children dataNodes to the NodeOutlet */\n    protected updateChildrenNodes(): void {\n        if (this.nodeOutlet.length && this.children) {\n            this.tree.renderNodeChanges(\n                this.children, this.dataDiffer, this.nodeOutlet.first.viewContainer, this.data\n            );\n        } else {\n            // Reset the data differ if there's no children nodes displayed\n            this.dataDiffer.diff([]);\n        }\n    }\n\n    /** Clear the children dataNodes. */\n    protected clear(): void {\n        if (this.nodeOutlet && this.nodeOutlet.first) {\n            this.nodeOutlet.first.viewContainer.clear();\n            this.dataDiffer.diff([]);\n        }\n    }\n}\n","import { CollectionViewer, DataSource } from '@angular/cdk/collections';\nimport {\n    AfterContentChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    Input,\n    IterableChangeRecord,\n    IterableDiffer,\n    IterableDiffers,\n    OnDestroy,\n    OnInit,\n    QueryList,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation,\n    TrackByFunction, Inject, forwardRef\n} from '@angular/core';\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { BehaviorSubject, Observable, of as observableOf, Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { TreeControl } from './control/tree-control';\nimport { CdkTreeNodeDef, CdkTreeNodeOutletContext } from './node';\nimport { CdkTreeNodeOutlet } from './outlet';\nimport {\n    getTreeControlMissingError,\n    getTreeMissingMatchingNodeDefError,\n    getTreeMultipleDefaultNodeDefsError,\n    getTreeNoValidDataSourceError\n} from './tree-errors';\n\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\n@Component({\n    selector: 'cdk-tree',\n    exportAs: 'cdkTree',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        class: 'cdk-tree',\n        role: 'tree'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CdkTree<T> implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\n\n    /** The tree controller */\n    @Input() treeControl: TreeControl<T>;\n\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data\n     * relative to the function to know if a node should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    @Input() trackBy: TrackByFunction<T>;\n\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(CdkTreeNodeOutlet, {static: true}) nodeOutlet: CdkTreeNodeOutlet;\n\n    /** The tree node template for the tree */\n    @ContentChildren(CdkTreeNodeDef) nodeDefs: QueryList<CdkTreeNodeDef<T>>;\n\n    // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n    //     Remove the MAX_VALUE in viewChange\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     */\n    viewChange = new BehaviorSubject<{ start: number; end: number }>({ start: 0, end: Number.MAX_VALUE });\n\n    /** Differ used to find the changes in the data provided by the data source. */\n    protected dataDiffer: IterableDiffer<T>;\n\n    /** Subject that emits when the component has been destroyed. */\n    private onDestroy = new Subject<void>();\n\n    /** Stores the node definition that does not have a when predicate. */\n    private defaultNodeDef: CdkTreeNodeDef<T> | null;\n\n    /** Data subscription */\n    private dataSubscription: Subscription | null;\n\n    /** Level of nodes */\n    private levels: Map<T, number> = new Map<T, number>();\n\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a dara array to render.\n     */\n    @Input()\n    get dataSource(): DataSource<T> | Observable<T[]> | T[] {\n        return this._dataSource;\n    }\n\n    set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n        if (this._dataSource !== dataSource) {\n            this.switchDataSource(dataSource);\n        }\n    }\n\n    private _dataSource: DataSource<T> | Observable<T[]> | T[];\n\n    constructor(protected differs: IterableDiffers, protected changeDetectorRef: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.dataDiffer = this.differs.find([]).create(this.trackBy);\n\n        if (!this.treeControl) {\n            throw getTreeControlMissingError();\n        }\n    }\n\n    ngOnDestroy() {\n        this.nodeOutlet.viewContainer.clear();\n\n        this.onDestroy.next();\n        this.onDestroy.complete();\n\n        // tslint:disable-next-line:no-unbound-method\n        if (this._dataSource && typeof (this.dataSource as DataSource<T>).disconnect === 'function') {\n            (this.dataSource as DataSource<T>).disconnect(this);\n        }\n\n        if (this.dataSubscription) {\n            this.dataSubscription.unsubscribe();\n            this.dataSubscription = null;\n        }\n    }\n\n    ngAfterContentChecked() {\n        const defaultNodeDefs = this.nodeDefs.filter((def) => !def.when);\n\n        if (defaultNodeDefs.length > 1) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this.defaultNodeDef = defaultNodeDefs[0];\n\n        if (this.dataSource && this.nodeDefs && !this.dataSubscription) {\n            this.observeRenderChanges();\n        }\n    }\n\n    /** Check for changes made in the data and render each change (node added/removed/moved). */\n    renderNodeChanges(\n        data: T[] | ReadonlyArray<T>,\n        dataDiffer: IterableDiffer<T> = this.dataDiffer,\n        viewContainer: ViewContainerRef = this.nodeOutlet.viewContainer,\n        parentData?: T\n    ) {\n        const changes = dataDiffer.diff(data);\n\n        if (!changes) { return; }\n\n        changes.forEachOperation((item: IterableChangeRecord<T>,\n                                  adjustedPreviousIndex: number | null,\n                                  currentIndex: number | null) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[currentIndex!], currentIndex!, viewContainer, parentData);\n            } else if (currentIndex == null) {\n                viewContainer.remove(adjustedPreviousIndex!);\n                this.levels.delete(item.item);\n            } else {\n                const view = viewContainer.get(adjustedPreviousIndex!);\n                viewContainer.move(view!, currentIndex);\n            }\n        });\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     */\n    getNodeDef(data: T, i: number): CdkTreeNodeDef<T> {\n        if (this.nodeDefs.length === 1) { return this.nodeDefs.first; }\n\n        const nodeDef = this.nodeDefs.find((def) => def.when && def.when(i, data)) || this.defaultNodeDef;\n\n        if (!nodeDef) { throw getTreeMissingMatchingNodeDefError(); }\n\n        return nodeDef;\n    }\n\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     */\n    insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T) {\n        const node = this.getNodeDef(nodeData, index);\n\n        // Node context that will be provided to created embedded view\n        const context = new CdkTreeNodeOutletContext<T>(nodeData);\n\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        /* tslint:disable-next-line:no-typeof-undefined */\n        } else if (typeof parentData !== 'undefined' && this.levels.has(parentData)) {\n            context.level = this.levels.get(parentData)! + 1;\n        } else {\n            context.level = 0;\n        }\n\n        this.levels.set(nodeData, context.level);\n\n        // Use default tree nodeOutlet, or nested node's nodeOutlet\n        const container = viewContainer ? viewContainer : this.nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n\n    /** Set up a subscription for the data provided by the data source. */\n    private observeRenderChanges() {\n        let dataStream: Observable<T[] | ReadonlyArray<T>> | undefined;\n\n        // Cannot use `instanceof DataSource` since the data source could be a literal with\n        // `connect` function and may not extends DataSource.\n        // tslint:disable-next-line:no-unbound-method\n        if (typeof (this._dataSource as DataSource<T>).connect === 'function') {\n            dataStream = (this._dataSource as DataSource<T>).connect(this);\n        } else if (this._dataSource instanceof Observable) {\n            dataStream = this._dataSource;\n        } else if (Array.isArray(this._dataSource)) {\n            dataStream = observableOf(this._dataSource);\n        }\n\n        if (dataStream) {\n            this.dataSubscription = dataStream\n                .pipe(takeUntil(this.onDestroy))\n                .subscribe((data) => this.renderNodeChanges(data));\n        } else {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     */\n    private switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n        // tslint:disable-next-line:no-unbound-method\n        if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n            (this.dataSource as DataSource<T>).disconnect(this);\n        }\n\n        if (this.dataSubscription) {\n            this.dataSubscription.unsubscribe();\n            this.dataSubscription = null;\n        }\n\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) { this.nodeOutlet.viewContainer.clear(); }\n\n        this._dataSource = dataSource;\n\n        if (this.nodeDefs) { this.observeRenderChanges(); }\n    }\n}\n\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\n@Directive({\n    selector: 'cdk-tree-node',\n    exportAs: 'cdkTreeNode',\n    host: {\n        class: 'cdk-tree-node',\n\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        '[attr.role]': 'role'\n    }\n})\nexport class CdkTreeNode<T> implements IFocusableOption, OnDestroy {\n    /**\n     * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n     * in `CdkTree` and set the data to it.\n     */\n    static mostRecentTreeNode: CdkTreeNode<any> | null = null;\n\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    protected destroyed = new Subject<void>();\n\n    get data(): T {\n        return this._data;\n    }\n\n    set data(value: T) {\n        this._data = value;\n    }\n\n    private _data: T;\n\n    get isExpanded(): boolean {\n        return this.tree.treeControl.isExpanded(this._data);\n    }\n\n    get level(): number {\n        return this.tree.treeControl.getLevel ? this.tree.treeControl.getLevel(this._data) : 0;\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        @Inject(forwardRef(() => CdkTree)) public tree: CdkTree<T>\n    ) {\n        CdkTreeNode.mostRecentTreeNode = this;\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n}\n","/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nexport function getTreeNoValidDataSourceError() {\n  return Error(`A valid data source must be provided.`);\n}\n\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nexport function getTreeMultipleDefaultNodeDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nexport function getTreeMissingMatchingNodeDefError() {\n  return Error(`Could not find a matching node definition for the provided node data.`);\n}\n\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nexport function getTreeControlMissingError() {\n  return Error(`Could not find a tree control for the tree.`);\n}\n\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nexport function getTreeControlFunctionsMissingError() {\n  return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n/** Context provided to the tree node component. */\nexport class CdkTreeNodeOutletContext<T> {\n    /** Data for the node. */\n    $implicit: T;\n\n    /** Depth of the node. */\n    level: number;\n\n    /** Index location of the node. */\n    index?: number;\n\n    /** Length of the number of total dataNodes. */\n    count?: number;\n\n    constructor(data: T) {\n        this.$implicit = data;\n    }\n}\n\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n@Directive({\n    selector: '[cdkTreeNodeDef]',\n    inputs: [\n        'when: cdkTreeNodeDefWhen'\n    ]\n})\nexport class CdkTreeNodeDef<T> {\n    /**\n     * Function that should return true if this node template should be used for the provided node\n     * data and index. If left undefined, this node will be considered the default node template to\n     * use when no other when functions return true for the data.\n     * For every node, there must be at least one when function that passes or an undefined to\n     * default.\n     */\n    when: (index: number, nodeData: T) => boolean;\n\n    /** @docs-private */\n    constructor(public template: TemplateRef<any>) {}\n}\n","import { ChangeDetectorRef, Directive, ViewContainerRef } from '@angular/core';\n\n\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({ selector: '[cdkTreeNodeOutlet]' })\nexport class CdkTreeNodeOutlet {\n    constructor(public viewContainer: ViewContainerRef, public changeDetectorRef: ChangeDetectorRef) {}\n}\n","import { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { BaseTreeControl } from './base-tree-control';\n\n\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nexport class NestedTreeControl<T> extends BaseTreeControl<T> {\n\n    /** Construct with nested tree function getChildren. */\n    constructor(public getChildren: (dataNode: T) => Observable<T[]>) {\n        super();\n    }\n\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     */\n    expandAll(): void {\n        this.expansionModel.clear();\n        const allNodes = this.dataNodes.reduce((accumulator: T[], dataNode) =>\n            [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n        this.expansionModel.select(...allNodes);\n    }\n\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n    getDescendants(dataNode: T): T[] {\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n\n        return descendants.splice(1);\n    }\n\n    /** A helper function to get descendants recursively. */\n    // todo нужно придумать другое название и понять в чем отличие между getDescendants и _getDescendants\n    /* tslint:disable-next-line:naming-convention */\n    private _getDescendants(descendants: T[], dataNode: T): void {\n        descendants.push(dataNode);\n\n        this.getChildren(dataNode)\n            .pipe(take(1))\n            .subscribe((children) => {\n                if (children && children.length > 0) {\n                    children.forEach((child: T) => this._getDescendants(descendants, child));\n                }\n            });\n    }\n}\n","import { BaseTreeControl } from './base-tree-control';\n\n\nexport function defaultCompareValues(firstValue, secondValue): boolean {\n    return firstValue === secondValue;\n}\n\nexport function defaultCompareViewValues(firstViewValue, secondViewValue): boolean {\n    return RegExp(secondViewValue, 'gi').test(firstViewValue);\n}\n\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nexport class FlatTreeControl<T> extends BaseTreeControl<T> {\n    /** Construct with flat tree data node functions getLevel, isExpandable, getValue and getViewValue. */\n    constructor(\n        public getLevel: (dataNode: T) => number,\n        public isExpandable: (dataNode: T) => boolean,\n        /** getValue will be used to determine if the tree contains value or not. Used in method hasValue */\n        public getValue: (dataNode) => any,\n        /** getViewValue will be used for filter nodes. Returned value will be first argument in filterNodesFunction */\n        public getViewValue: (dataNode) => string,\n        /** compareValues will be used to comparing values. */\n        public compareValues: (firstValue, secondValue) => boolean = defaultCompareValues,\n        /** compareValues will be used to comparing values. */\n        public compareViewValues: (firstViewValue, secondViewValue) => boolean = defaultCompareViewValues\n    ) {\n        super();\n    }\n\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     */\n    getDescendants(dataNode: T): T[] {\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        const results: T[] = [];\n\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1;\n             i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]);\n             i++\n        ) {\n            results.push(this.dataNodes[i]);\n        }\n\n        return results;\n    }\n\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     */\n    expandAll(): void {\n        this.expansionModel.select(...this.dataNodes);\n    }\n\n    getParents(node: any, result: T[]): T[] {\n        if (node.parent) {\n            result.unshift(node.parent);\n\n            return this.getParents(node.parent, result);\n        } else {\n            return result;\n        }\n    }\n\n    hasValue(value: string): T | undefined {\n        return this.dataNodes.find((node: any) => this.compareValues(this.getValue(node), value));\n    }\n\n    filterNodes(value: string): void {\n        this.filterModel.clear();\n\n        const filteredNodes = this.dataNodes.filter(\n            (node: any) => this.compareViewValues(this.getViewValue(node), value)\n        );\n\n        const filteredNodesWithTheirParents = new Set();\n        filteredNodes.forEach((filteredNode) => {\n            this.getParents(filteredNode, []).forEach((node) => filteredNodesWithTheirParents.add(node));\n\n            filteredNodesWithTheirParents.add(filteredNode);\n        });\n\n        this.filterModel.select(...Array.from(filteredNodesWithTheirParents));\n\n        this.filterValue.next(value);\n    }\n}\n","import { SelectionModel } from '@angular/cdk/collections';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nimport { TreeControl } from './tree-control';\n\n\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\n/* tslint:disable-next-line:naming-convention */\nexport abstract class BaseTreeControl<T> implements TreeControl<T> {\n\n    dataNodes: T[];\n\n    /** A selection model with multi-selection to track expansion status. */\n    expansionModel: SelectionModel<T> = new SelectionModel<T>(true);\n\n    filterModel: SelectionModel<T> = new SelectionModel<T>(true);\n\n    filterValue = new BehaviorSubject<string>('');\n\n    /** Get depth of a given data node, return the level number. This is for flat tree node. */\n    getLevel: (dataNode: T) => number;\n\n    /**\n     * Whether the data node is expandable. Returns true if expandable.\n     * This is for flat tree node.\n     */\n    isExpandable: (dataNode: T) => boolean;\n\n    /** Gets a stream that emits whenever the given data node's children change. */\n    getChildren: (dataNode: T) => Observable<T[]>;\n\n    /** Gets a list of descendent data nodes of a subtree rooted at given data node recursively. */\n    abstract getDescendants(dataNode: T): T[];\n\n    /** Expands all data nodes in the tree. */\n    abstract expandAll(): void;\n\n    /** Toggles one single data node's expanded/collapsed state. */\n    toggle(dataNode: T): void {\n        if (this.filterValue.value) { return; }\n\n        this.expansionModel.toggle(dataNode);\n    }\n\n    /** Expands one single data node. */\n    expand(dataNode: T): void {\n        if (this.filterValue.value) { return; }\n\n        this.expansionModel.select(dataNode);\n    }\n\n    /** Collapses one single data node. */\n    collapse(dataNode: T): void {\n        if (this.filterValue.value) { return; }\n\n        this.expansionModel.deselect(dataNode);\n    }\n\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n    isExpanded(dataNode: T): boolean {\n        return this.expansionModel.isSelected(dataNode);\n    }\n\n    /** Toggles a subtree rooted at `node` recursively. */\n    toggleDescendants(dataNode: T): void {\n        this.expansionModel.isSelected(dataNode)\n            ? this.collapseDescendants(dataNode)\n            : this.expandDescendants(dataNode);\n    }\n\n    /** Collapse all dataNodes in the tree. */\n    collapseAll(): void {\n        this.expansionModel.clear();\n    }\n\n    /** Expands a subtree rooted at given data node recursively. */\n    expandDescendants(dataNode: T): void {\n        const toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed);\n    }\n\n    /** Collapses a subtree rooted at given data node recursively. */\n    collapseDescendants(dataNode: T): void {\n        const toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed);\n    }\n}\n"],"names":["tslib_1.__extends","observableOf"],"mappings":"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"}