{"version":3,"file":"tree.es5.js","sources":["../../../packages/cdk/tree/tree.module.ts","../../../packages/cdk/tree/toggle.ts","../../../packages/cdk/tree/padding.ts","../../../packages/cdk/tree/nested-node.ts","../../../packages/cdk/tree/tree.ts","../../../packages/cdk/tree/tree-errors.ts","../../../packages/cdk/tree/node.ts","../../../packages/cdk/tree/outlet.ts","../../../packages/cdk/tree/control/nested-tree-control.ts","../../../packages/cdk/tree/control/flat-tree-control.ts","../../../packages/cdk/tree/control/base-tree-control.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\n\nimport { CdkNestedTreeNode } from './nested-node';\nimport { CdkTreeNodeDef } from './node';\nimport { CdkTreeNodeOutlet } from './outlet';\nimport { CdkTreeNodePadding } from './padding';\nimport { CdkTreeNodeToggle } from './toggle';\nimport { CdkTree, CdkTreeNode } from './tree';\n\n\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet\n];\n\n@NgModule({\n    imports: [CommonModule],\n    exports: EXPORTED_DECLARATIONS,\n    declarations: EXPORTED_DECLARATIONS,\n    providers: [FocusMonitor]\n})\nexport class CdkTreeModule {}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTree, CdkTreeNode } from './tree';\n\n\n@Directive({\n    selector: '[cdkTreeNodeToggle]',\n    host: {\n        '(click)': 'toggle($event)'\n    }\n})\nexport class CdkTreeNodeToggle<T> {\n    @Input('cdkTreeNodeToggleRecursive')\n    get recursive(): boolean { return this._recursive; }\n\n    set recursive(value: boolean) { this._recursive = value; }\n\n    private _recursive = false;\n\n    constructor(protected tree: CdkTree<T>, protected treeNode: CdkTreeNode<T>) {}\n\n    toggle(event: Event): void {\n        this.recursive\n            ? this.tree.treeControl.toggleDescendants(this.treeNode.data)\n            : this.tree.treeControl.toggle(this.treeNode.data);\n\n        event.stopPropagation();\n    }\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { Directive, ElementRef, Input, OnDestroy, Optional, Renderer2 } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { CdkTree, CdkTreeNode } from './tree';\n\n\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\n@Directive({\n    selector: '[cdkTreeNodePadding]'\n})\nexport class CdkTreeNodePadding<T> implements OnDestroy {\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    @Input('cdkTreeNodePadding')\n    get level(): number {\n        return this._level;\n    }\n\n    set level(value: number) {\n        this._level = value;\n\n        this.setPadding();\n    }\n\n    /* tslint:disable-next-line:naming-convention */\n    protected _level: number;\n\n    @Input('cdkTreeNodePaddingIndent')\n    get indent(): number {\n        return this._indent;\n    }\n\n    set indent(value: number) {\n        this._indent = value;\n\n        this.setPadding();\n    }\n\n    /* tslint:disable-next-line:naming-convention */\n    protected _indent: number;\n\n    private destroyed = new Subject<void>();\n\n    constructor(\n        protected treeNode: CdkTreeNode<T>,\n        protected tree: CdkTree<T>,\n        private renderer: Renderer2,\n        private element: ElementRef<HTMLElement>,\n        @Optional() private dir: Directionality\n    ) {\n\n        if (this.dir && this.dir.change) {\n            this.dir.change\n                .pipe(takeUntil(this.destroyed))\n                .subscribe(() => this.setPadding());\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n    protected paddingIndent(): string | null {\n        const nodeLevel = (this.treeNode.data && this.tree.treeControl.getLevel)\n            ? this.tree.treeControl.getLevel(this.treeNode.data)\n            : null;\n\n        const level = this._level || nodeLevel;\n\n        return level ? `${(level * this._indent) + 12}px` : '12px';\n    }\n\n    protected setPadding() {\n        const padding = this.paddingIndent();\n        const paddingProp = this.dir && this.dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n\n        this.renderer.setStyle(this.element.nativeElement, paddingProp, padding);\n    }\n}\n","import {\n    AfterContentInit,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    IterableDiffers,\n    IterableDiffer,\n    OnDestroy,\n    QueryList\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { CdkTreeNodeOutlet } from './outlet';\nimport { CdkTree, CdkTreeNode } from './tree';\nimport { getTreeControlFunctionsMissingError } from './tree-errors';\n\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * For example:\n *   ```html\n *   <cdk-mested-tree-node>\n *     {{node.name}}\n *     <ng-template cdkTreeNodeOutlet></ng-template>\n *   </cdk-tree-node>\n *   ```\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\n * like this:\n *   ```html\n *   <cdk-nested-tree-node>\n *     {{node.name}}\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>\n *   </cdk-tree-node>\n *   ```\n */\n@Directive({\n    selector: 'cdk-nested-tree-node',\n    exportAs: 'cdkNestedTreeNode',\n    host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.role]': 'role',\n        class: 'cdk-tree-node cdk-nested-tree-node'\n    },\n    providers: [{ provide: CdkTreeNode, useExisting: CdkNestedTreeNode }]\n})\nexport class CdkNestedTreeNode<T> extends CdkTreeNode<T> implements AfterContentInit, OnDestroy {\n    /** The children node placeholder. */\n    @ContentChildren(CdkTreeNodeOutlet) nodeOutlet: QueryList<CdkTreeNodeOutlet>;\n\n    /** The children data dataNodes of current node. They will be placed in `CdkTreeNodeOutlet`. */\n    protected children: T[];\n\n    /** Differ used to find the changes in the data provided by the data source. */\n    private dataDiffer: IterableDiffer<T>;\n\n    constructor(protected elementRef: ElementRef, protected tree: CdkTree<T>, protected differs: IterableDiffers) {\n        super(elementRef, tree);\n    }\n\n    ngAfterContentInit() {\n        this.dataDiffer = this.differs.find([]).create(this.tree.trackBy);\n\n        if (!this.tree.treeControl.getChildren) {\n            throw getTreeControlFunctionsMissingError();\n        }\n\n        this.tree.treeControl.getChildren(this.data)\n            .pipe(takeUntil(this.destroyed))\n            .subscribe((result) => {\n                this.children = result;\n                this.updateChildrenNodes();\n            });\n\n        this.nodeOutlet.changes\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => this.updateChildrenNodes());\n    }\n\n    ngOnDestroy() {\n        this.clear();\n        super.ngOnDestroy();\n    }\n\n    /** Add children dataNodes to the NodeOutlet */\n    protected updateChildrenNodes(): void {\n        if (this.nodeOutlet.length && this.children) {\n            this.tree.renderNodeChanges(\n                this.children, this.dataDiffer, this.nodeOutlet.first.viewContainer, this.data\n            );\n        } else {\n            // Reset the data differ if there's no children nodes displayed\n            this.dataDiffer.diff([]);\n        }\n    }\n\n    /** Clear the children dataNodes. */\n    protected clear(): void {\n        if (this.nodeOutlet && this.nodeOutlet.first) {\n            this.nodeOutlet.first.viewContainer.clear();\n            this.dataDiffer.diff([]);\n        }\n    }\n}\n","import { CollectionViewer, DataSource } from '@angular/cdk/collections';\nimport {\n    AfterContentChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    Input,\n    IterableChangeRecord,\n    IterableDiffer,\n    IterableDiffers,\n    OnDestroy,\n    OnInit,\n    QueryList,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation,\n    TrackByFunction, Inject, forwardRef\n} from '@angular/core';\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { BehaviorSubject, Observable, of as observableOf, Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { ITreeControl } from './control/tree-control';\nimport { CdkTreeNodeDef, CdkTreeNodeOutletContext } from './node';\nimport { CdkTreeNodeOutlet } from './outlet';\nimport {\n    getTreeControlFunctionsMissingError,\n    getTreeControlMissingError,\n    getTreeMissingMatchingNodeDefError,\n    getTreeMultipleDefaultNodeDefsError,\n    getTreeNoValidDataSourceError\n} from './tree-errors';\n\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\n@Component({\n    selector: 'cdk-tree',\n    exportAs: 'cdkTree',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        class: 'cdk-tree',\n        role: 'tree'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CdkTree<T> implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\n\n    /** The tree controller */\n    @Input() treeControl: ITreeControl<T>;\n\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data\n     * relative to the function to know if a node should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    @Input() trackBy: TrackByFunction<T>;\n\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(CdkTreeNodeOutlet, {static: true}) nodeOutlet: CdkTreeNodeOutlet;\n\n    /** The tree node template for the tree */\n    @ContentChildren(CdkTreeNodeDef) nodeDefs: QueryList<CdkTreeNodeDef<T>>;\n\n    // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n    //     Remove the MAX_VALUE in viewChange\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     */\n    viewChange = new BehaviorSubject<{ start: number; end: number }>({ start: 0, end: Number.MAX_VALUE });\n\n    /** Differ used to find the changes in the data provided by the data source. */\n    protected dataDiffer: IterableDiffer<T>;\n\n    /** Subject that emits when the component has been destroyed. */\n    private onDestroy = new Subject<void>();\n\n    /** Stores the node definition that does not have a when predicate. */\n    private defaultNodeDef: CdkTreeNodeDef<T> | null;\n\n    /** Data subscription */\n    private dataSubscription: Subscription | null;\n\n    /** Level of nodes */\n    private levels: Map<T, number> = new Map<T, number>();\n\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a dara array to render.\n     */\n    @Input()\n    get dataSource(): DataSource<T> | Observable<T[]> | T[] {\n        return this._dataSource;\n    }\n\n    set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n        if (this._dataSource !== dataSource) {\n            this.switchDataSource(dataSource);\n        }\n    }\n\n    private _dataSource: DataSource<T> | Observable<T[]> | T[];\n\n    constructor(protected differs: IterableDiffers, protected changeDetectorRef: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.dataDiffer = this.differs.find([]).create(this.trackBy);\n\n        if (!this.treeControl) {\n            throw getTreeControlMissingError();\n        }\n    }\n\n    ngOnDestroy() {\n        this.nodeOutlet.viewContainer.clear();\n\n        this.onDestroy.next();\n        this.onDestroy.complete();\n\n        // tslint:disable-next-line:no-unbound-method\n        if (this._dataSource && typeof (this.dataSource as DataSource<T>).disconnect === 'function') {\n            (this.dataSource as DataSource<T>).disconnect(this);\n        }\n\n        if (this.dataSubscription) {\n            this.dataSubscription.unsubscribe();\n            this.dataSubscription = null;\n        }\n    }\n\n    ngAfterContentChecked() {\n        const defaultNodeDefs = this.nodeDefs.filter((def) => !def.when);\n\n        if (defaultNodeDefs.length > 1) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this.defaultNodeDef = defaultNodeDefs[0];\n\n        if (this.dataSource && this.nodeDefs && !this.dataSubscription) {\n            this.observeRenderChanges();\n        }\n    }\n\n    /** Check for changes made in the data and render each change (node added/removed/moved). */\n    renderNodeChanges(\n        data: T[] | ReadonlyArray<T>,\n        dataDiffer: IterableDiffer<T> = this.dataDiffer,\n        viewContainer: ViewContainerRef = this.nodeOutlet.viewContainer,\n        parentData?: T\n    ) {\n        const changes = dataDiffer.diff(data);\n\n        if (!changes) { return; }\n\n        changes.forEachOperation((item: IterableChangeRecord<T>,\n                                  adjustedPreviousIndex: number | null,\n                                  currentIndex: number | null) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[currentIndex!], currentIndex!, viewContainer, parentData);\n            } else if (currentIndex == null) {\n                viewContainer.remove(adjustedPreviousIndex!);\n                this.levels.delete(item.item);\n            } else {\n                const view = viewContainer.get(adjustedPreviousIndex!);\n                viewContainer.move(view!, currentIndex);\n            }\n        });\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     */\n    getNodeDef(data: T, i: number): CdkTreeNodeDef<T> {\n        if (this.nodeDefs.length === 1) { return this.nodeDefs.first; }\n\n        const nodeDef = this.nodeDefs.find((def) => def.when && def.when(i, data)) || this.defaultNodeDef;\n\n        if (!nodeDef) { throw getTreeMissingMatchingNodeDefError(); }\n\n        return nodeDef;\n    }\n\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     */\n    insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T) {\n        const node = this.getNodeDef(nodeData, index);\n\n        // Node context that will be provided to created embedded view\n        const context = new CdkTreeNodeOutletContext<T>(nodeData);\n\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        /* tslint:disable-next-line:no-typeof-undefined */\n        } else if (typeof parentData !== 'undefined' && this.levels.has(parentData)) {\n            context.level = this.levels.get(parentData)! + 1;\n        } else {\n            context.level = 0;\n        }\n\n        this.levels.set(nodeData, context.level);\n\n        // Use default tree nodeOutlet, or nested node's nodeOutlet\n        const container = viewContainer ? viewContainer : this.nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n\n    /** Set up a subscription for the data provided by the data source. */\n    private observeRenderChanges() {\n        let dataStream: Observable<T[] | ReadonlyArray<T>> | undefined;\n\n        // Cannot use `instanceof DataSource` since the data source could be a literal with\n        // `connect` function and may not extends DataSource.\n        // tslint:disable-next-line:no-unbound-method\n        if (typeof (this._dataSource as DataSource<T>).connect === 'function') {\n            dataStream = (this._dataSource as DataSource<T>).connect(this);\n        } else if (this._dataSource instanceof Observable) {\n            dataStream = this._dataSource;\n        } else if (Array.isArray(this._dataSource)) {\n            dataStream = observableOf(this._dataSource);\n        }\n\n        if (dataStream) {\n            this.dataSubscription = dataStream\n                .pipe(takeUntil(this.onDestroy))\n                .subscribe((data) => this.renderNodeChanges(data));\n        } else {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     */\n    private switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n        // tslint:disable-next-line:no-unbound-method\n        if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n            (this.dataSource as DataSource<T>).disconnect(this);\n        }\n\n        if (this.dataSubscription) {\n            this.dataSubscription.unsubscribe();\n            this.dataSubscription = null;\n        }\n\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) { this.nodeOutlet.viewContainer.clear(); }\n\n        this._dataSource = dataSource;\n\n        if (this.nodeDefs) { this.observeRenderChanges(); }\n    }\n}\n\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\n@Directive({\n    selector: 'cdk-tree-node',\n    exportAs: 'cdkTreeNode',\n    host: {\n        class: 'cdk-tree-node',\n\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        '[attr.role]': 'role'\n    }\n})\nexport class CdkTreeNode<T> implements IFocusableOption, OnDestroy {\n    /**\n     * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n     * in `CdkTree` and set the data to it.\n     */\n    static mostRecentTreeNode: CdkTreeNode<any> | null = null;\n\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    protected destroyed = new Subject<void>();\n\n    get data(): T {\n        return this._data;\n    }\n\n    set data(value: T) {\n        this._data = value;\n\n        this.setRoleFromData();\n    }\n\n    private _data: T;\n\n    get isExpanded(): boolean {\n        return this.tree.treeControl.isExpanded(this._data);\n    }\n\n    get level(): number {\n        return this.tree.treeControl.getLevel ? this.tree.treeControl.getLevel(this._data) : 0;\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        @Inject(forwardRef(() => CdkTree)) protected tree: CdkTree<T>\n    ) {\n        CdkTreeNode.mostRecentTreeNode = this as CdkTreeNode<T>;\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    private setRoleFromData(): void {\n        if (this.tree.treeControl.isExpandable) {\n            this.role = this.tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n        } else {\n            if (!this.tree.treeControl.getChildren) {\n                throw getTreeControlFunctionsMissingError();\n            }\n\n            this.tree.treeControl.getChildren(this._data).pipe(takeUntil(this.destroyed))\n                .subscribe((children) => {\n                    this.role = children && children.length ? 'group' : 'treeitem';\n                });\n        }\n    }\n}\n","/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nexport function getTreeNoValidDataSourceError() {\n  return Error(`A valid data source must be provided.`);\n}\n\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nexport function getTreeMultipleDefaultNodeDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nexport function getTreeMissingMatchingNodeDefError() {\n  return Error(`Could not find a matching node definition for the provided node data.`);\n}\n\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nexport function getTreeControlMissingError() {\n  return Error(`Could not find a tree control for the tree.`);\n}\n\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nexport function getTreeControlFunctionsMissingError() {\n  return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n/** Context provided to the tree node component. */\nexport class CdkTreeNodeOutletContext<T> {\n    /** Data for the node. */\n    $implicit: T;\n\n    /** Depth of the node. */\n    level: number;\n\n    /** Index location of the node. */\n    index?: number;\n\n    /** Length of the number of total dataNodes. */\n    count?: number;\n\n    constructor(data: T) {\n        this.$implicit = data;\n    }\n}\n\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n@Directive({\n    selector: '[cdkTreeNodeDef]',\n    inputs: [\n        'when: cdkTreeNodeDefWhen'\n    ]\n})\nexport class CdkTreeNodeDef<T> {\n    /**\n     * Function that should return true if this node template should be used for the provided node\n     * data and index. If left undefined, this node will be considered the default node template to\n     * use when no other when functions return true for the data.\n     * For every node, there must be at least one when function that passes or an undefined to\n     * default.\n     */\n    when: (index: number, nodeData: T) => boolean;\n\n    /** @docs-private */\n    constructor(public template: TemplateRef<any>) {}\n}\n","import { ChangeDetectorRef, Directive, ViewContainerRef } from '@angular/core';\n\n\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({ selector: '[cdkTreeNodeOutlet]' })\nexport class CdkTreeNodeOutlet {\n    constructor(public viewContainer: ViewContainerRef, public changeDetectorRef: ChangeDetectorRef) {}\n}\n","import { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { BaseTreeControl } from './base-tree-control';\n\n\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nexport class NestedTreeControl<T> extends BaseTreeControl<T> {\n\n    /** Construct with nested tree function getChildren. */\n    constructor(public getChildren: (dataNode: T) => Observable<T[]>) {\n        super();\n    }\n\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the ITreeControl must be set to all root level\n     * data nodes of the tree.\n     */\n    expandAll(): void {\n        this.expansionModel.clear();\n        const allNodes = this.dataNodes.reduce((accumulator: T[], dataNode) =>\n            [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n        this.expansionModel.select(...allNodes);\n    }\n\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n    getDescendants(dataNode: T): T[] {\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n\n        return descendants.splice(1);\n    }\n\n    /** A helper function to get descendants recursively. */\n    // todo нужно придумать другое название и понять в чем отличие между getDescendants и _getDescendants\n    /* tslint:disable-next-line:naming-convention */\n    private _getDescendants(descendants: T[], dataNode: T): void {\n        descendants.push(dataNode);\n\n        this.getChildren(dataNode)\n            .pipe(take(1))\n            .subscribe((children) => {\n                if (children && children.length > 0) {\n                    children.forEach((child: T) => this._getDescendants(descendants, child));\n                }\n            });\n    }\n}\n","import { BaseTreeControl } from './base-tree-control';\n\n\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nexport class FlatTreeControl<T> extends BaseTreeControl<T> {\n\n    /** Construct with flat tree data node functions getLevel and isExpandable. */\n    constructor(public getLevel: (dataNode: T) => number, public isExpandable: (dataNode: T) => boolean) {\n        super();\n    }\n\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the ITreeControl must be flattened tree nodes\n     * with correct levels.\n     */\n    getDescendants(dataNode: T): T[] {\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        const results: T[] = [];\n\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1;\n             i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]);\n             i++\n        ) {\n            results.push(this.dataNodes[i]);\n        }\n\n        return results;\n    }\n\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the ITreeControl must be set to all flattened\n     * data nodes of the tree.\n     */\n    expandAll(): void {\n        this.expansionModel.select(...this.dataNodes);\n    }\n}\n","import { SelectionModel } from '@angular/cdk/collections';\nimport { Observable } from 'rxjs';\n\nimport { ITreeControl } from './tree-control';\n\n\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\n// todo здесь явно ошибка проектирования, абстрактный класс реализует функционал\n/* tslint:disable-next-line:naming-convention */\nexport abstract class BaseTreeControl<T> implements ITreeControl<T> {\n\n    /** Saved data node for `expandAll` action. */\n    dataNodes: T[];\n\n    /** A selection model with multi-selection to track expansion status. */\n    expansionModel: SelectionModel<T> = new SelectionModel<T>(true);\n\n    /** Get depth of a given data node, return the level number. This is for flat tree node. */\n    getLevel: (dataNode: T) => number;\n\n    /**\n     * Whether the data node is expandable. Returns true if expandable.\n     * This is for flat tree node.\n     */\n    isExpandable: (dataNode: T) => boolean;\n\n    /** Gets a stream that emits whenever the given data node's children change. */\n    getChildren: (dataNode: T) => Observable<T[]>;\n\n    /** Gets a list of descendent data nodes of a subtree rooted at given data node recursively. */\n    abstract getDescendants(dataNode: T): T[];\n\n    /** Expands all data nodes in the tree. */\n    abstract expandAll(): void;\n\n    /** Toggles one single data node's expanded/collapsed state. */\n    toggle(dataNode: T): void {\n        this.expansionModel.toggle(dataNode);\n    }\n\n    /** Expands one single data node. */\n    expand(dataNode: T): void {\n        this.expansionModel.select(dataNode);\n    }\n\n    /** Collapses one single data node. */\n    collapse(dataNode: T): void {\n        this.expansionModel.deselect(dataNode);\n    }\n\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n    isExpanded(dataNode: T): boolean {\n        return this.expansionModel.isSelected(dataNode);\n    }\n\n    /** Toggles a subtree rooted at `node` recursively. */\n    toggleDescendants(dataNode: T): void {\n        this.expansionModel.isSelected(dataNode)\n            ? this.collapseDescendants(dataNode)\n            : this.expandDescendants(dataNode);\n    }\n\n    /** Collapse all dataNodes in the tree. */\n    collapseAll(): void {\n        this.expansionModel.clear();\n    }\n\n    /** Expands a subtree rooted at given data node recursively. */\n    expandDescendants(dataNode: T): void {\n        const toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed);\n    }\n\n    /** Collapses a subtree rooted at given data node recursively. */\n    collapseDescendants(dataNode: T): void {\n        const toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed);\n    }\n}\n"],"names":["tslib_1.__extends","observableOf"],"mappings":";;;;;;;;;;;;;;;;;;;AUAA;;;;;;;AASA,AAAA,IAAA;;;;;;;;IAAA,SAAA,eAAA,GAAA;;;;QAMI,IAAJ,CAAA,cAAkB,GAAsB,IAAI,cAAc,CAAI,IAAI,CAAC,CAAC;KAiEnE;;;;;;;IA5CG,eAAJ,CAAA,SAAA,CAAA,MAAU;;;;;IAAN,UAAO,QAAW,EAAtB;QACQ,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;KACxC,CAAL;;;;;;;IAGI,eAAJ,CAAA,SAAA,CAAA,MAAU;;;;;IAAN,UAAO,QAAW,EAAtB;QACQ,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;KACxC,CAAL;;;;;;;IAGI,eAAJ,CAAA,SAAA,CAAA,QAAY;;;;;IAAR,UAAS,QAAW,EAAxB;QACQ,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;KAC1C,CAAL;;;;;;;IAGI,eAAJ,CAAA,SAAA,CAAA,UAAc;;;;;IAAV,UAAW,QAAW,EAA1B;QACQ,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;KACnD,CAAL;;;;;;;IAGI,eAAJ,CAAA,SAAA,CAAA,iBAAqB;;;;;IAAjB,UAAkB,QAAW,EAAjC;QACQ,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,QAAQ,CAAC;cAClC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC;cAClC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;KAC1C,CAAL;;;;;;IAGI,eAAJ,CAAA,SAAA,CAAA,WAAe;;;;IAAX,YAAJ;QACQ,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;KAC/B,CAAL;;;;;;;IAGI,eAAJ,CAAA,SAAA,CAAA,iBAAqB;;;;;IAAjB,UAAkB,QAAW,EAAjC;;;QACA,IAAc,aAAa,GAAG,CAAC,QAAQ,CAAC,CAAxC;QACQ,aAAa,CAAC,IAAI,CAA1B,KAAA,CAAQ,aAAa,EAAS,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAA3D,CAA6D;QACrD,CAAA,EAAR,GAAQ,IAAI,CAAC,cAAc,EAAC,MAAM,CAAlC,KAAA,CAAA,EAAA,EAAsC,aAAa,CAAnD,CAAqD;KAChD,CAAL;;;;;;;IAGI,eAAJ,CAAA,SAAA,CAAA,mBAAuB;;;;;IAAnB,UAAoB,QAAW,EAAnC;;;QACA,IAAc,aAAa,GAAG,CAAC,QAAQ,CAAC,CAAxC;QACQ,aAAa,CAAC,IAAI,CAA1B,KAAA,CAAQ,aAAa,EAAS,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAA3D,CAA6D;QACrD,CAAA,EAAR,GAAQ,IAAI,CAAC,cAAc,EAAC,QAAQ,CAApC,KAAA,CAAA,EAAA,EAAwC,aAAa,CAArD,CAAuD;KAClD,CAAL;IACA,OAAA,eAAC,CAAD;CAAC,EAAD,CAAA;;;;;;;;;;AD5EA,AAAA,IAAA;;;;;IAAwCA,SAAxC,CAAA,eAAA,EAAA,MAAA,CAAA,CAA0D;;IAGtD,SAAJ,eAAA,CAAuB,QAAiC,EAAS,YAAsC,EAAvG;QAAI,IAAJ,KAAA,GACQ,MADR,CAAA,IAAA,CAAA,IAAA,CACe,IADf,IAAA,CAEK;QAFkB,KAAvB,CAAA,QAA+B,GAAR,QAAQ,CAAyB;QAAS,KAAjE,CAAA,YAA6E,GAAZ,YAAY,CAA0B;;KAElG;;;;;;;;;;;;;;;IAQD,eAAJ,CAAA,SAAA,CAAA,cAAkB;;;;;;;;IAAd,UAAe,QAAW,EAA9B;;QACA,IAAc,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAA3D;;QACA,IAAc,OAAO,GAAQ,EAAE,CAA/B;;;;;;;QAQQ,KAAK,IAAI,CAAC,GAAG,UAAU,GAAG,CAAC,EACtB,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EACvF,CAAC,EAAE,EACN;YACE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;SACnC;QAED,OAAO,OAAO,CAAC;KAClB,CAAL;;;;;;;;;;;;;;IAQI,eAAJ,CAAA,SAAA,CAAA,SAAa;;;;;;;IAAT,YAAJ;;QACQ,CAAA,EAAR,GAAQ,IAAI,CAAC,cAAc,EAAC,MAAM,CAAlC,KAAA,CAAA,EAAA,EAAsC,IAAI,CAAC,SAAS,CAApD,CAAsD;KACjD,CAAL;IACA,OAAA,eAAC,CAAD;CAAC,CA1CuC,eAAe,CA0CvD,CAAA;;;;;;;;;;ADvCA,AAAA,IAAA;;;;;IAA0CA,SAA1C,CAAA,iBAAA,EAAA,MAAA,CAAA,CAA4D;;IAGxD,SAAJ,iBAAA,CAAuB,WAA6C,EAApE;QAAI,IAAJ,KAAA,GACQ,MADR,CAAA,IAAA,CAAA,IAAA,CACe,IADf,IAAA,CAEK;QAFkB,KAAvB,CAAA,WAAkC,GAAX,WAAW,CAAkC;;KAE/D;;;;;;;;;;;;;;IAQD,iBAAJ,CAAA,SAAA,CAAA,SAAa;;;;;;;IAAT,YAAJ;QAAI,IAAJ,KAAA,GAAA,IAAA,CAKK;;QAJG,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;;QACpC,IAAc,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM;;;;;QAAC,UAAC,WAAgB,EAAE,QAAQ,EAA1E;YACY,OAAI,WAAW,CAA3B,MAAA,CAAgC,KAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAA7D,CAA+D,QAAQ,CAAvE,CAAA,CAAA;SAAwE,GAAE,EAAE,CAAC,CAA7E;QACQ,CAAA,EAAR,GAAQ,IAAI,CAAC,cAAc,EAAC,MAAM,CAAlC,KAAA,CAAA,EAAA,EAAsC,QAAQ,CAA9C,CAAgD;KAC3C,CAAL;;;;;;;IAGI,iBAAJ,CAAA,SAAA,CAAA,cAAkB;;;;;IAAd,UAAe,QAAW,EAA9B;;QACA,IAAc,WAAW,GAAG,EAAE,CAA9B;QACQ,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QAE5C,OAAO,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;KAChC,CAAL;;;;;;;;;;;;;IAKY,iBAAZ,CAAA,SAAA,CAAA,eAA2B;;;;;;;;;IAAvB,UAAwB,WAAgB,EAAE,QAAW,EAAzD;QAAI,IAAJ,KAAA,GAAA,IAAA,CAUK;QATG,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE3B,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;aACrB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACb,SAAS;;;;QAAC,UAAC,QAAQ,EAAhC;YACgB,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;gBACjC,QAAQ,CAAC,OAAO;;;;gBAAC,UAAC,KAAQ,EAA9C,EAAmD,OAAA,KAAI,CAAC,eAAe,CAAC,WAAW,EAAE,KAAK,CAAC,CAA3F,EAA2F,EAAC,CAAC;aAC5E;SACJ,EAAC,CAAC;KACV,CAAL;IACA,OAAA,iBAAC,CAAD;CAAC,CA1CyC,eAAe,CA0CzD,CAAA;;;;;;;;;;;ADjDA;;;;AAOA,AAAA,IAAA,iBAAA,kBAAA,YAAA;IAEI,SAAJ,iBAAA,CAAuB,aAA+B,EAAS,iBAAoC,EAAnG;QAAuB,IAAvB,CAAA,aAAoC,GAAb,aAAa,CAAkB;QAAS,IAA/D,CAAA,iBAAgF,GAAjB,iBAAiB,CAAmB;KAAI;;QAFvG,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW,EAAE,QAAQ,EAAE,qBAAqB,EAAE,EAA9C,EAAA;;;;QAPA,EAAA,IAAA,EAAuC,gBAAgB,EAAvD;QAAA,EAAA,IAAA,EAAS,iBAAiB,EAA1B;;IAUA,OAAA,iBAAC,CAAD;CAAC,EAAD,CAAA;;;;;;ADVA;;;;AAIA,AAAA,IAAA;;;;;IAaI,SAAJ,wBAAA,CAAgB,IAAO,EAAvB;QACQ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;KACzB;IACL,OAAA,wBAAC,CAAD;CAAC,EAAD,CAAA,CAAC;;;;;;AAMD,AAAA,IAAA,cAAA,kBAAA,YAAA;;IAiBI,SAAJ,cAAA,CAAuB,QAA0B,EAAjD;QAAuB,IAAvB,CAAA,QAA+B,GAAR,QAAQ,CAAkB;KAAI;;QAjBrD,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW;oBACP,QAAQ,EAAE,kBAAkB;oBAC5B,MAAM,EAAE;wBACJ,0BAA0B;qBAC7B;iBACJ,EAAD,EAAA;;;;QA/BA,EAAA,IAAA,EAAoB,WAAW,EAA/B;;IA4CA,OAAA,cAAC,CAAD;CAAC,EAAD,CAAA;;;;;;;;;;;ADxCA,AAAA,SAAgB,6BAA6B,GAA7C;IACE,OAAO,KAAK,CAAC,uCAAuC,CAAC,CAAC;CACvD;;;;;;AAMD,AAAA,SAAgB,mCAAmC,GAAnD;IACE,OAAO,KAAK,CAAC,sEAAsE,CAAC,CAAC;CACtF;;;;;;AAMD,AAAA,SAAgB,kCAAkC,GAAlD;IACE,OAAO,KAAK,CAAC,uEAAuE,CAAC,CAAC;CACvF;;;;;;AAMD,AAAA,SAAgB,0BAA0B,GAA1C;IACE,OAAO,KAAK,CAAC,6CAA6C,CAAC,CAAC;CAC7D;;;;;;AAMD,AAAA,SAAgB,mCAAmC,GAAnD;IACE,OAAO,KAAK,CAAC,gEAAgE,CAAC,CAAC;CAChF;;;;;;ADrCD;;;;;AAwCA,AAAA,IAAA,OAAA,kBAAA,YAAA;IAuEI,SAAJ,OAAA,CAA0B,OAAwB,EAAY,iBAAoC,EAAlG;QAA0B,IAA1B,CAAA,OAAiC,GAAP,OAAO,CAAiB;QAAY,IAA9D,CAAA,iBAA+E,GAAjB,iBAAiB,CAAmB;;;;;;;QAnC9F,IAAJ,CAAA,UAAc,GAAG,IAAI,eAAe,CAAiC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;;;;QAM9F,IAAZ,CAAA,SAAqB,GAAG,IAAI,OAAO,EAAQ,CAAC;;;;QAShC,IAAZ,CAAA,MAAkB,GAAmB,IAAI,GAAG,EAAa,CAAC;KAoB4C;IAblG,MAAJ,CAAA,cAAA,CACQ,OADR,CAAA,SAAA,EAAA,YACkB,EADlB;;;;;;;;;;;;QAAI,YAAJ;YAEQ,OAAO,IAAI,CAAC,WAAW,CAAC;SAC3B;;;;;QAED,UAAe,UAAiD,EAApE;YACQ,IAAI,IAAI,CAAC,WAAW,KAAK,UAAU,EAAE;gBACjC,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;aACrC;SACJ;;;KANL,CAAA,CAAK;;;;IAYD,OAAJ,CAAA,SAAA,CAAA,QAAY;;;IAAR,YAAJ;QACQ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAE7D,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACnB,MAAM,0BAA0B,EAAE,CAAC;SACtC;KACJ,CAAL;;;;IAEI,OAAJ,CAAA,SAAA,CAAA,WAAe;;;IAAX,YAAJ;QACQ,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QAEtC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;;QAG1B,IAAI,IAAI,CAAC,WAAW,IAAI,OAAO,oBAAC,IAAI,CAAC,UAAU,IAAmB,UAAU,KAAK,UAAU,EAAE;YACzF,oBAAC,IAAI,CAAC,UAAU,IAAmB,UAAU,CAAC,IAAI,CAAC,CAAC;SACvD;QAED,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACvB,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC;YACpC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;SAChC;KACJ,CAAL;;;;IAEI,OAAJ,CAAA,SAAA,CAAA,qBAAyB;;;IAArB,YAAJ;;QACA,IAAc,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM;;;;QAAC,UAAC,GAAG,EAAzD,EAA8D,OAAA,CAAC,GAAG,CAAC,IAAI,CAAvE,EAAuE,EAAC,CAAxE;QAEQ,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5B,MAAM,mCAAmC,EAAE,CAAC;SAC/C;QACD,IAAI,CAAC,cAAc,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;QAEzC,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAC5D,IAAI,CAAC,oBAAoB,EAAE,CAAC;SAC/B;KACJ,CAAL;;;;;;;;;;IAGI,OAAJ,CAAA,SAAA,CAAA,iBAAqB;;;;;;;;IAAjB,UACI,IAA4B,EAC5B,UAA+C,EAC/C,aAA+D,EAC/D,UAAc,EAJtB;QAAI,IAAJ,KAAA,GAAA,IAAA,CAyBK;QAvBG,IAAR,UAAA,KAAA,KAAA,CAAA,EAAQ,EAAA,UAAR,GAAwC,IAAI,CAAC,UAAU,CAAvD,EAAA;QACQ,IAAR,aAAA,KAAA,KAAA,CAAA,EAAQ,EAAA,aAAR,GAA0C,IAAI,CAAC,UAAU,CAAC,aAAa,CAAvE,EAAA;;QAGA,IAAc,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAA7C;QAEQ,IAAI,CAAC,OAAO,EAAE;YAAE,OAAO;SAAE;QAEzB,OAAO,CAAC,gBAAgB;;;;;;QAAC,UAAC,IAA6B,EAC7B,qBAAoC,EACpC,YAA2B,EAF7D;YAGY,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,EAAE;gBAC5B,KAAI,CAAC,UAAU,CAAC,IAAI,oBAAC,YAAY,GAAE,qBAAE,YAAY,IAAG,aAAa,EAAE,UAAU,CAAC,CAAC;aAClF;iBAAM,IAAI,YAAY,IAAI,IAAI,EAAE;gBAC7B,aAAa,CAAC,MAAM,oBAAC,qBAAqB,GAAE,CAAC;gBAC7C,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACjC;iBAAM;;gBACnB,IAAsB,IAAI,GAAG,aAAa,CAAC,GAAG,oBAAC,qBAAqB,GAAE,CAAtE;gBACgB,aAAa,CAAC,IAAI,oBAAC,IAAI,IAAG,YAAY,CAAC,CAAC;aAC3C;SACJ,EAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;KAC1C,CAAL;;;;;;;;;;;;;;;;IAQI,OAAJ,CAAA,SAAA,CAAA,UAAc;;;;;;;;;IAAV,UAAW,IAAO,EAAE,CAAS,EAAjC;QACQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YAAE,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;SAAE;;QAEvE,IAAc,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI;;;;QAAC,UAAC,GAAG,EAA/C,EAAoD,OAAA,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAjF,EAAiF,EAAC,IAAI,IAAI,CAAC,cAAc,CAAzG;QAEQ,IAAI,CAAC,OAAO,EAAE;YAAE,MAAM,kCAAkC,EAAE,CAAC;SAAE;QAE7D,OAAO,OAAO,CAAC;KAClB,CAAL;;;;;;;;;;;;;;IAMI,OAAJ,CAAA,SAAA,CAAA,UAAc;;;;;;;;;IAAV,UAAW,QAAW,EAAE,KAAa,EAAE,aAAgC,EAAE,UAAc,EAA3F;;QACA,IAAc,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAArD;;;QAGA,IAAc,OAAO,GAAG,IAAI,wBAAwB,CAAI,QAAQ,CAAC,CAAjE;;;QAIQ,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;YAC3B,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;;SAEvD;aAAM,IAAI,OAAO,UAAU,KAAK,WAAW,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;YACzE,OAAO,CAAC,KAAK,GAAG,mBAAA,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,KAAI,CAAC,CAAC;SACpD;aAAM;YACH,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC;SACrB;QAED,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;;;QAGjD,IAAc,SAAS,GAAG,aAAa,GAAG,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAvF;QACQ,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;;;;QAK5D,IAAI,WAAW,CAAC,kBAAkB,EAAE;YAChC,WAAW,CAAC,kBAAkB,CAAC,IAAI,GAAG,QAAQ,CAAC;SAClD;KACJ,CAAL;;;;;;;IAGY,OAAZ,CAAA,SAAA,CAAA,oBAAgC;;;;;IAA5B,YAAJ;QAAI,IAAJ,KAAA,GAAA,IAAA,CAqBK;;QApBL,IAAY,UAA0D,CAAtE;;;;QAKQ,IAAI,OAAO,oBAAC,IAAI,CAAC,WAAW,IAAmB,OAAO,KAAK,UAAU,EAAE;YACnE,UAAU,GAAG,oBAAC,IAAI,CAAC,WAAW,IAAmB,OAAO,CAAC,IAAI,CAAC,CAAC;SAClE;aAAM,IAAI,IAAI,CAAC,WAAW,YAAY,UAAU,EAAE;YAC/C,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;SACjC;aAAM,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YACxC,UAAU,GAAGC,EAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC/C;QAED,IAAI,UAAU,EAAE;YACZ,IAAI,CAAC,gBAAgB,GAAG,UAAU;iBAC7B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBAC/B,SAAS;;;;YAAC,UAAC,IAAI,EAAhC,EAAqC,OAAA,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAjE,EAAiE,EAAC,CAAC;SAC1D;aAAM;YACH,MAAM,6BAA6B,EAAE,CAAC;SACzC;KACJ,CAAL;;;;;;;;;;;;;;IAOY,OAAZ,CAAA,SAAA,CAAA,gBAA4B;;;;;;;;IAAxB,UAAyB,UAAiD,EAA9E;;QAEQ,IAAI,IAAI,CAAC,WAAW,IAAI,OAAO,oBAAC,IAAI,CAAC,WAAW,IAAmB,UAAU,KAAK,UAAU,EAAE;YAC1F,oBAAC,IAAI,CAAC,UAAU,IAAmB,UAAU,CAAC,IAAI,CAAC,CAAC;SACvD;QAED,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACvB,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC;YACpC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;SAChC;;QAGD,IAAI,CAAC,UAAU,EAAE;YAAE,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;SAAE;QAE3D,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAE9B,IAAI,IAAI,CAAC,QAAQ,EAAE;YAAE,IAAI,CAAC,oBAAoB,EAAE,CAAC;SAAE;KACtD,CAAL;;QA5OA,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW;oBACP,QAAQ,EAAE,UAAU;oBACpB,QAAQ,EAAE,SAAS;oBACnB,QAAQ,EAAE,iDAAiD;oBAC3D,IAAI,EAAE;wBACF,KAAK,EAAE,UAAU;wBACjB,IAAI,EAAE,MAAM;qBACf;oBACD,aAAa,EAAE,iBAAiB,CAAC,IAAI;oBACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAClD,EAAD,EAAA;;;;QAvCA,EAAA,IAAA,EAAI,eAAe,EAAnB;QARA,EAAA,IAAA,EAAI,iBAAiB,EAArB;;;QAmDA,WAAA,EAAA,CAAA,EAAA,IAAA,EAAK,KAAK,EAAV,CAAA;QAQA,OAAA,EAAA,CAAA,EAAA,IAAA,EAAK,KAAK,EAAV,CAAA;QAGA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAK,SAAS,EAAd,IAAA,EAAA,CAAe,iBAAiB,EAAE,EAAC,MAAM,EAAE,IAAI,EAAC,EAAhD,EAAA,CAAA;QAGA,QAAA,EAAA,CAAA,EAAA,IAAA,EAAK,eAAe,EAApB,IAAA,EAAA,CAAqB,cAAc,EAAnC,EAAA,CAAA;QA8BA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAK,KAAK,EAAV,CAAA;;IAmLA,OAAA,OAAC,CAAD;CAAC,EAAD,CAAA,CAAC;AAlOD;;;;AAuOA,AAAA,IAAA,WAAA,kBAAA,YAAA;IA0CI,SAAJ,WAAA,CACkB,UAAsB,EACa,IAAgB,EAFrE;QACkB,IAAlB,CAAA,UAA4B,GAAV,UAAU,CAAY;QACa,IAArD,CAAA,IAAyD,GAAJ,IAAI,CAAY;QA1BxD,IAAb,CAAA,IAAiB,GAAyB,UAAU,CAAC;QAEvC,IAAd,CAAA,SAAuB,GAAG,IAAI,OAAO,EAAQ,CAAC;QA0BtC,WAAW,CAAC,kBAAkB,sBAAG,IAAI,EAAkB,CAAC;KAC3D;IAzBD,MAAJ,CAAA,cAAA,CAAQ,WAAR,CAAA,SAAA,EAAA,MAAY,EAAZ;;;;QAAI,YAAJ;YACQ,OAAO,IAAI,CAAC,KAAK,CAAC;SACrB;;;;;QAED,UAAS,KAAQ,EAArB;YACQ,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YAEnB,IAAI,CAAC,eAAe,EAAE,CAAC;SAC1B;;;KANL,CAAA,CAAK;IAUD,MAAJ,CAAA,cAAA,CAAQ,WAAR,CAAA,SAAA,EAAA,YAAkB,EAAlB;;;;QAAI,YAAJ;YACQ,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACvD;;;KAAL,CAAA,CAAK;IAED,MAAJ,CAAA,cAAA,CAAQ,WAAR,CAAA,SAAA,EAAA,OAAa,EAAb;;;;QAAI,YAAJ;YACQ,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SAC1F;;;KAAL,CAAA,CAAK;;;;IASD,WAAJ,CAAA,SAAA,CAAA,WAAe;;;IAAX,YAAJ;QACQ,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;KAC7B,CAAL;;;;IAEI,WAAJ,CAAA,SAAA,CAAA,KAAS;;;IAAL,YAAJ;QACQ,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;KACzC,CAAL;;;;;IAEY,WAAZ,CAAA,SAAA,CAAA,eAA2B;;;;IAAvB,YAAJ;QAAI,IAAJ,KAAA,GAAA,IAAA,CAaK;QAZG,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE;YACpC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,OAAO,GAAG,UAAU,CAAC;SACrF;aAAM;YACH,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;gBACpC,MAAM,mCAAmC,EAAE,CAAC;aAC/C;YAED,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBACxE,SAAS;;;;YAAC,UAAC,QAAQ,EAApC;gBACoB,KAAI,CAAC,IAAI,GAAG,QAAQ,IAAI,QAAQ,CAAC,MAAM,GAAG,OAAO,GAAG,UAAU,CAAC;aAClE,EAAC,CAAC;SACV;KACJ,CAAL;;;;;IAvDW,WAAX,CAAA,kBAA6B,GAA4B,IAAI,CAAC;;QAhB9D,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW;oBACP,QAAQ,EAAE,eAAe;oBACzB,QAAQ,EAAE,aAAa;oBACvB,IAAI,EAAE;wBACF,KAAK,EAAE,eAAe;wBAEtB,sBAAsB,EAAE,YAAY;wBACpC,mBAAmB,EAAE,oCAAoC;wBACzD,aAAa,EAAE,MAAM;qBACxB;iBACJ,EAAD,EAAA;;;;QA7RA,EAAA,IAAA,EAAI,UAAU,EAAd;QA+TA,EAAA,IAAA,EAA2D,OAAO,EAAlE,UAAA,EAAA,CAAA,EAAA,IAAA,EAAS,MAAM,EAAf,IAAA,EAAA,CAAgB,UAAU;;;wBAAC,YAA3B,EAAiC,OAAA,OAAO,CAAxC,EAAwC,EAAC,EAAzC,EAAA,CAAA,EAAA;;;QA1BA,IAAA,EAAA,CAAA,EAAA,IAAA,EAAK,KAAK,EAAV,CAAA;;IAsDA,OAAA,WAAC,CAAD;CAAC,EAAD,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AD7TA,AAAA,IAAA,iBAAA,kBAAA,UAAA,MAAA,EAAA;IAU0CD,SAA1C,CAAA,iBAAA,EAAA,MAAA,CAAA,CAAwD;IAUpD,SAAJ,iBAAA,CAA0B,UAAsB,EAAY,IAAgB,EAAY,OAAwB,EAAhH;QAAI,IAAJ,KAAA,GACQ,MADR,CAAA,IAAA,CAAA,IAAA,EACc,UAAU,EAAE,IAAI,CAAC,IAD/B,IAAA,CAEK;QAFqB,KAA1B,CAAA,UAAoC,GAAV,UAAU,CAAY;QAAY,KAA5D,CAAA,IAAgE,GAAJ,IAAI,CAAY;QAAY,KAAxF,CAAA,OAA+F,GAAP,OAAO,CAAiB;;KAE3G;;;;IAED,iBAAJ,CAAA,SAAA,CAAA,kBAAsB;;;IAAlB,YAAJ;QAAI,IAAJ,KAAA,GAAA,IAAA,CAiBK;QAhBG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAElE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;YACpC,MAAM,mCAAmC,EAAE,CAAC;SAC/C;QAED,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;aACvC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC/B,SAAS;;;;QAAC,UAAC,MAAM,EAA9B;YACgB,KAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;YACvB,KAAI,CAAC,mBAAmB,EAAE,CAAC;SAC9B,EAAC,CAAC;QAEP,IAAI,CAAC,UAAU,CAAC,OAAO;aAClB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC/B,SAAS;;;QAAC,YAAvB,EAA6B,OAAA,KAAI,CAAC,mBAAmB,EAAE,CAAvD,EAAuD,EAAC,CAAC;KACpD,CAAL;;;;IAEI,iBAAJ,CAAA,SAAA,CAAA,WAAe;;;IAAX,YAAJ;QACQ,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,MAAR,CAAA,SAAA,CAAc,WAAW,CAAzB,IAAA,CAAA,IAAA,CAA2B,CAAC;KACvB,CAAL;;;;;;;IAGc,iBAAd,CAAA,SAAA,CAAA,mBAAiC;;;;;IAA7B,YAAJ;QACQ,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE;YACzC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CACvB,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,IAAI,CACjF,CAAC;SACL;aAAM;;YAEH,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAC5B;KACJ,CAAL;;;;;;;IAGc,iBAAd,CAAA,SAAA,CAAA,KAAmB;;;;;IAAf,YAAJ;QACQ,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE;YAC1C,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;YAC5C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAC5B;KACJ,CAAL;;QAlEA,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW;oBACP,QAAQ,EAAE,sBAAsB;oBAChC,QAAQ,EAAE,mBAAmB;oBAC7B,IAAI,EAAE;wBACF,sBAAsB,EAAE,YAAY;wBACpC,aAAa,EAAE,MAAM;wBACrB,KAAK,EAAE,oCAAoC;qBAC9C;oBACD,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,iBAAiB,EAAE,CAAC;iBACxE,EAAD,EAAA;;;;QA3CA,EAAA,IAAA,EAAI,UAAU,EAAd;QASA,EAAA,IAAA,EAAS,OAAO,EAAhB;QARA,EAAA,IAAA,EAAI,eAAe,EAAnB;;;QA6CA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAK,eAAe,EAApB,IAAA,EAAA,CAAqB,iBAAiB,EAAtC,EAAA,CAAA;;IAuDA,OAAA,iBAAC,CAAD;CAAC,CAzDyC,WAAW,CAyDrD,CAAA;;;;;;ADzGA;;;;;AAYA,AAAA,IAAA,kBAAA,kBAAA,YAAA;IAmCI,SAAJ,kBAAA,CACkB,QAAwB,EACxB,IAAgB,EAClB,QAAmB,EACnB,OAAgC,EACpB,GAAmB,EAL/C;QAAI,IAAJ,KAAA,GAAA,IAAA,CAaK;QAZa,IAAlB,CAAA,QAA0B,GAAR,QAAQ,CAAgB;QACxB,IAAlB,CAAA,IAAsB,GAAJ,IAAI,CAAY;QAClB,IAAhB,CAAA,QAAwB,GAAR,QAAQ,CAAW;QACnB,IAAhB,CAAA,OAAuB,GAAP,OAAO,CAAyB;QACpB,IAA5B,CAAA,GAA+B,GAAH,GAAG,CAAgB;QAPnC,IAAZ,CAAA,SAAqB,GAAG,IAAI,OAAO,EAAQ,CAAC;QAUpC,IAAI,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;YAC7B,IAAI,CAAC,GAAG,CAAC,MAAM;iBACV,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBAC/B,SAAS;;;YAAC,YAA3B,EAAiC,OAAA,KAAI,CAAC,UAAU,EAAE,CAAlD,EAAkD,EAAC,CAAC;SAC3C;KACJ;IA3CD,MAAJ,CAAA,cAAA,CACQ,kBADR,CAAA,SAAA,EAAA,OACa,EADb;;;;;;QAAI,YAAJ;YAEQ,OAAO,IAAI,CAAC,MAAM,CAAC;SACtB;;;;;QAED,UAAU,KAAa,EAA3B;YACQ,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YAEpB,IAAI,CAAC,UAAU,EAAE,CAAC;SACrB;;;KANL,CAAA,CAAK;IAWD,MAAJ,CAAA,cAAA,CACQ,kBADR,CAAA,SAAA,EAAA,QACc,EADd;;;;QAAI,YAAJ;YAEQ,OAAO,IAAI,CAAC,OAAO,CAAC;SACvB;;;;;QAED,UAAW,KAAa,EAA5B;YACQ,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YAErB,IAAI,CAAC,UAAU,EAAE,CAAC;SACrB;;;KANL,CAAA,CAAK;;;;IA4BD,kBAAJ,CAAA,SAAA,CAAA,WAAe;;;IAAX,YAAJ;QACQ,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;KAC7B,CAAL;;;;;;;IAGc,kBAAd,CAAA,SAAA,CAAA,aAA2B;;;;;IAAvB,YAAJ;;QACA,IAAc,SAAS,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ;cACjE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;cAClD,IAAI,CAAlB;;QAEA,IAAc,KAAK,GAAG,IAAI,CAAC,MAAM,IAAI,SAAS,CAA9C;QAEQ,OAAO,KAAK,GAAM,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,IAAI,EAAE,GAArD,IAAyD,GAAG,MAAM,CAAC;KAC9D,CAAL;;;;;IAEc,kBAAd,CAAA,SAAA,CAAA,UAAwB;;;;IAApB,YAAJ;;QACA,IAAc,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAA5C;;QACA,IAAc,WAAW,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,KAAK,KAAK,GAAG,cAAc,GAAG,aAAa,CAAjG;QAEQ,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;KAC5E,CAAL;;QAvEA,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW;oBACP,QAAQ,EAAE,sBAAsB;iBACnC,EAAD,EAAA;;;;QATA,EAAA,IAAA,EAAkB,WAAW,EAA7B;QAAA,EAAA,IAAA,EAAS,OAAO,EAAhB;QAJA,EAAA,IAAA,EAA4D,SAAS,EAArE;QAAA,EAAA,IAAA,EAAoB,UAAU,EAA9B;QADA,EAAA,IAAA,EAAS,cAAc,EAAvB,UAAA,EAAA,CAAA,EAAA,IAAA,EAoDS,QAAQ,EApDjB,CAAA,EAAA;;;QAiBA,KAAA,EAAA,CAAA,EAAA,IAAA,EAAK,KAAK,EAAV,IAAA,EAAA,CAAW,oBAAoB,EAA/B,EAAA,CAAA;QAcA,MAAA,EAAA,CAAA,EAAA,IAAA,EAAK,KAAK,EAAV,IAAA,EAAA,CAAW,0BAA0B,EAArC,EAAA,CAAA;;IAqDA,OAAA,kBAAC,CAAD;CAAC,EAAD,CAAA;;;;;;ADpFA;;;AAKA,AAAA,IAAA,iBAAA,kBAAA,YAAA;IAcI,SAAJ,iBAAA,CAA0B,IAAgB,EAAY,QAAwB,EAA9E;QAA0B,IAA1B,CAAA,IAA8B,GAAJ,IAAI,CAAY;QAAY,IAAtD,CAAA,QAA8D,GAAR,QAAQ,CAAgB;QAFlE,IAAZ,CAAA,UAAsB,GAAG,KAAK,CAAC;KAEmD;IAP9E,MAAJ,CAAA,cAAA,CACQ,iBADR,CAAA,SAAA,EAAA,WACiB,EADjB;;;;QAAI,YAAJ,EAC+B,OAAO,IAAI,CAAC,UAAU,CAAC,EAAE;;;;;QAEpD,UAAc,KAAc,EAAhC,EAAoC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,EAAE;;;KAF9D,CAAA,CAAwD;;;;;IAQpD,iBAAJ,CAAA,SAAA,CAAA,MAAU;;;;IAAN,UAAO,KAAY,EAAvB;QACQ,IAAI,CAAC,SAAS;cACR,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;cAC3D,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAEvD,KAAK,CAAC,eAAe,EAAE,CAAC;KAC3B,CAAL;;QAtBA,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW;oBACP,QAAQ,EAAE,qBAAqB;oBAC/B,IAAI,EAAE;wBACF,SAAS,EAAE,gBAAgB;qBAC9B;iBACJ,EAAD,EAAA;;;;QARA,EAAA,IAAA,EAAS,OAAO,EAAhB;QAAA,EAAA,IAAA,EAAkB,WAAW,EAA7B;;;QAUA,SAAA,EAAA,CAAA,EAAA,IAAA,EAAK,KAAK,EAAV,IAAA,EAAA,CAAW,4BAA4B,EAAvC,EAAA,CAAA;;IAgBA,OAAA,iBAAC,CAAD;CAAC,EAAD,CAAA;;;;;;AD5BA;AAYA,IAAM,qBAAqB,GAAG;IAC1B,iBAAiB;IACjB,cAAc;IACd,kBAAkB;IAClB,iBAAiB;IACjB,OAAO;IACP,WAAW;IACX,iBAAiB;CACpB,CAAD;AAEA,AAAA,IAAA,aAAA,kBAAA,YAAA;IAAA,SAAA,aAAA,GAAA;KAM6B;;QAN7B,EAAA,IAAA,EAAC,QAAQ,EAAT,IAAA,EAAA,CAAU;oBACN,OAAO,EAAE,CAAC,YAAY,CAAC;oBACvB,OAAO,EAAE,qBAAqB;oBAC9B,YAAY,EAAE,qBAAqB;oBACnC,SAAS,EAAE,CAAC,YAAY,CAAC;iBAC5B,EAAD,EAAA;;IAC4B,OAA5B,aAA6B,CAA7B;CAA6B,EAA7B,CAAA;;;;;;;;;;;;;;"}