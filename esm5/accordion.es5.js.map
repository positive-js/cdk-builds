{"version":3,"file":"accordion.es5.js","sources":["../../../src/cdk/accordion/index.ts","../../../src/cdk/accordion/accordion-module.ts","../../../src/cdk/accordion/accordion-item.ts","../../../src/cdk/accordion/accordion.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","import { NgModule } from '@angular/core';\n\nimport { CdkAccordion } from './accordion';\nimport { CdkAccordionItem } from './accordion-item';\n\n\n@NgModule({\n  exports: [\n      CdkAccordion, CdkAccordionItem\n  ],\n  declarations: [\n      CdkAccordion, CdkAccordionItem\n  ]\n})\nexport class CdkAccordionModule {}\n","import {\n    Output,\n    Directive,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    Optional,\n    ChangeDetectorRef,\n    SkipSelf\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@ptsecurity/cdk/collections';\nimport { Subscription } from 'rxjs';\n\nimport { CdkAccordion } from './accordion';\n\n\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n@Directive({\n    selector: 'cdk-accordion-item, [cdkAccordionItem]',\n    exportAs: 'cdkAccordionItem',\n    providers: [\n        // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n        // to the same accordion.\n        {provide: CdkAccordion, useValue: undefined}\n    ]\n})\nexport class CdkAccordionItem implements OnDestroy {\n\n    /** Whether the AccordionItem is expanded. */\n    @Input()\n    get expanded(): any {\n        return this._expanded;\n    }\n\n    set expanded(expanded: any) {\n        // tslint:disable:no-parameter-reassignment\n        expanded = coerceBooleanProperty(expanded);\n\n        // Only emit events and update the internal value if the value changes.\n        if (this._expanded !== expanded) {\n            this._expanded = expanded;\n            this.expandedChange.emit(expanded);\n\n            if (expanded) {\n                this.opened.emit();\n                /**\n                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                 * the name value is the id of the accordion.\n                 */\n                const accordionId = this.accordion ? this.accordion.id : this.id;\n                this._expansionDispatcher.notify(this.id, accordionId);\n            } else {\n                this.closed.emit();\n            }\n\n            // Ensures that the animation will run when the value is set outside of an `@Input`.\n            // This includes cases like the open, close and toggle methods.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    /** Whether the AccordionItem is disabled. */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(disabled: any) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n    /** Event emitted every time the AccordionItem is closed. */\n    @Output() closed: EventEmitter<void> = new EventEmitter<void>();\n    /** Event emitted every time the AccordionItem is opened. */\n    @Output() opened: EventEmitter<void> = new EventEmitter<void>();\n    /** Event emitted when the AccordionItem is destroyed. */\n    @Output() destroyed: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Emits whenever the expanded state of the accordion changes.\n     * Primarily used to facilitate two-way binding.\n     * @docs-private\n     */\n    @Output() expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The unique AccordionItem id. */\n    readonly id: string = `cdk-accordion-child-${nextId++}`;\n    /** Subscription to openAll/closeAll events. */\n    private openCloseAllSubscription = Subscription.EMPTY;\n\n    private _expanded = false;\n\n    private _disabled: boolean = false;\n\n    constructor(@Optional() @SkipSelf() public accordion: CdkAccordion,\n                private _changeDetectorRef: ChangeDetectorRef,\n                protected _expansionDispatcher: UniqueSelectionDispatcher) {\n\n        this.removeUniqueSelectionListener =\n            _expansionDispatcher.listen((id: string, accordionId: string) => {\n                if (this.accordion && !this.accordion.multi &&\n                    this.accordion.id === accordionId && this.id !== id) {\n                    this.expanded = false;\n                }\n            });\n\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this.openCloseAllSubscription = this.subscribeToOpenCloseAllActions();\n        }\n    }\n\n    /** Emits an event for the accordion item being destroyed. */\n    ngOnDestroy() {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this.removeUniqueSelectionListener();\n        this.openCloseAllSubscription.unsubscribe();\n    }\n\n    /** Toggles the expanded state of the accordion item. */\n    toggle(): void {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    }\n\n    /** Sets the expanded state of the accordion item to false. */\n    close(): void {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    }\n\n    /** Sets the expanded state of the accordion item to true. */\n    open(): void {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    }\n\n    /** Unregister function for _expansionDispatcher. */\n    // tslint:disable:no-empty\n    private removeUniqueSelectionListener: () => void = () => {};\n\n    private subscribeToOpenCloseAllActions(): Subscription {\n        return this.accordion.openCloseAllActions.subscribe((expanded) => {\n            // Only change expanded state if item is enabled\n            if (!this.disabled) {\n                this.expanded = expanded;\n            }\n        });\n    }\n}\n","import { Directive, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { Subject } from 'rxjs';\n\n\n/** Used to generate unique ID for each accordion. */\nlet nextId = 0;\n\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n@Directive({\n    selector: 'cdk-accordion, [cdkAccordion]',\n    exportAs: 'cdkAccordion'\n})\nexport class CdkAccordion implements OnDestroy, OnChanges {\n    /** Emits when the state of the accordion changes */\n    readonly stateChanges = new Subject<SimpleChanges>();\n\n    /** Stream that emits true/false when openAll/closeAll is triggered. */\n    readonly openCloseAllActions: Subject<boolean> = new Subject<boolean>();\n\n    /** A readonly id value to use for unique selection coordination. */\n    readonly id = `cdk-accordion-${nextId++}`;\n\n    /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n    @Input()\n    get multi(): boolean {\n        return this._multi;\n    }\n\n    set multi(multi: boolean) {\n        this._multi = coerceBooleanProperty(multi);\n    }\n\n    private _multi: boolean = false;\n\n    /** Opens all enabled accordion items in an accordion where multi is enabled. */\n    openAll(): void {\n        this.openCloseAll(true);\n    }\n\n    /** Closes all enabled accordion items in an accordion where multi is enabled. */\n    closeAll(): void {\n        this.openCloseAll(false);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.stateChanges.next(changes);\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    private openCloseAll(expanded: boolean): void {\n        if (this.multi) {\n            this.openCloseAllActions.next(expanded);\n        }\n    }\n}\n"],"names":["tslib_1.__decorate","tslib_1.__metadata","tslib_1.__param","nextId"],"mappings":"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"}