{"version":3,"file":"activedescendant-key-manager.js","sourceRoot":"","sources":["../../../../../../src/cdk/a11y/key-manager/activedescendant-key-manager.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,cAAc,EAAyB,MAAM,oBAAoB,CAAC;AAgB3E,IAAA;IAAmD,sDAAkC;;;;IAEjF;;;;OAIG;;;;;;IACH,kDAAa;;;;;IAAb,UAAc,KAAa;QACvB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC;SACvC;QACD,iBAAM,aAAa,YAAC,KAAK,CAAC,CAAC;QAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE,CAAC;SACrC;KACJ;qCAhCL;EAiBmD,cAAc,EAiBhE,CAAA;AAjBD,sCAiBC","sourcesContent":["\nimport { ListKeyManager, IListKeyManagerOption } from './list-key-manager';\n\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface IHighlightable extends IListKeyManagerOption {\n    // Applies the styles for an active item to this item.\n    setActiveStyles(): void;\n\n    // Applies the styles for an inactive item to this item.\n    setInactiveStyles(): void;\n}\n\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<IHighlightable & T> {\n\n    /**\n     * This method sets the active item to the item at the specified index.\n     * It also adds active styles to the newly active item and removes active\n     * styles from the previously active item.\n     */\n    setActiveItem(index: number): void {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n        super.setActiveItem(index);\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n\n}\n"]}