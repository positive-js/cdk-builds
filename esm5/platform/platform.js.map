{"version":3,"file":"platform.js","sourceRoot":"","sources":["../../../../../src/cdk/platform/platform.ts"],"names":[],"mappings":";;;;AACA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;;;AAI3C,qBAAM,kBAAkB,GAAG,CAAC,OAAM,CAAC,IAAI,CAAC,KAAK,WAAW,IAAI,mBAAC,IAAW,EAAC,CAAC,eAAe,CAAC,CAAC;;;;;;;;;;yBASlE,OAAO,QAAQ,KAAK,QAAQ,IAAI,CAAC,CAAC,QAAQ;;;;oBAG/C,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;;;;uBAGlD,IAAI,CAAC,SAAS,IAAI,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;;;;qBAI/D,IAAI,CAAC,SAAS;YAC3B,CAAC,CAAC,CAAC,CAAC,mBAAC,MAAa,EAAC,CAAC,MAAM,IAAI,kBAAkB,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;;;;sBAK5E,IAAI,CAAC,SAAS;YAC5B,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO;;;;mBAG3E,IAAI,CAAC,SAAS,IAAI,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;YACzE,CAAC,mBAAC,MAAa,EAAC,CAAC,QAAQ;;;;uBAOV,IAAI,CAAC,SAAS,IAAI,sBAAsB,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;;;;uBAIlE,IAAI,CAAC,SAAS,IAAI,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO;;;;sBAMxE,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,MAAM;;;gBAzCzF,UAAU;;;;mBAXX;;SAYa,QAAQ","sourcesContent":["\nimport { Injectable } from '@angular/core';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nconst hasV8BreakIterator = (typeof(Intl) !== 'undefined' && (Intl as any).v8BreakIterator);\n\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\n@Injectable()\nexport class Platform {\n    /** Whether the Angular application is being rendered in the browser. */\n    isBrowser: boolean = typeof document === 'object' && !!document;\n\n    /** Whether the current browser is Microsoft Edge. */\n    EDGE: boolean = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n\n    /** Whether the current rendering engine is Microsoft Trident. */\n    TRIDENT: boolean = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n    /** Whether the current rendering engine is Blink. */\n        // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n    BLINK: boolean = this.isBrowser &&\n        (!!((window as any).chrome || hasV8BreakIterator) && !!CSS && !this.EDGE && !this.TRIDENT);\n\n    /** Whether the current rendering engine is WebKit. */\n        // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n        // ensure that Webkit runs standalone and is not used as another engine's base.\n    WEBKIT: boolean = this.isBrowser &&\n        /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n\n    /** Whether the current platform is Apple iOS. */\n    IOS: boolean = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n        !(window as any).MSStream;\n\n    /** Whether the current browser is Firefox. */\n        // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n        // them self as Gecko-like browsers and modify the userAgent's according to that.\n        // Since we only cover one explicit Firefox case, we can simply check for Firefox\n        // instead of having an unstable check for Gecko.\n    FIREFOX: boolean = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n\n    /** Whether the current platform is Android. */\n        // Trident on mobile adds the android platform to the userAgent to trick detections.\n    ANDROID: boolean = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n\n    /** Whether the current browser is Safari. */\n        // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n        // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n        // Safari browser should also use Webkit as its layout engine.\n    SAFARI: boolean = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n}\n"]}