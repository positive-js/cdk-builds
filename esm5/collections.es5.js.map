{"version":3,"file":"collections.es5.js","sources":["../../../src/cdk/collections/index.ts","../../../src/cdk/collections/unique-selection-dispatcher.ts","../../../src/cdk/collections/selection.ts","../../../src/cdk/collections/array-data-source.ts","../../../src/cdk/collections/data-source.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","import { Injectable, OnDestroy } from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable({providedIn: 'root'})\nexport class UniqueSelectionDispatcher implements OnDestroy {\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\n\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n  notify(id: string, name: string) {\n    for (const listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /**\n   * Listen for future changes to item selection.\n   * @return Function used to deregister listener\n   */\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\n\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n}\n","import { Subject } from 'rxjs';\n\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nexport class SelectionModel<T> {\n    /** Event emitted when the value has changed. */\n    onChange: Subject<SelectionChange<T>> | null = this._emitChanges ? new Subject() : null;\n\n    /** Currently-selected values. */\n    private _selection: Set<T> = new Set();\n\n    /** Keeps track of the deselected options that haven't been emitted by the change event. */\n    private _deselectedToEmit: T[] = [];\n\n    /** Keeps track of the selected options that haven't been emitted by the change event. */\n    private _selectedToEmit: T[] = [];\n\n    /** Cache for the array value of the selected items. */\n    private _selected: T[] | null;\n\n    constructor(\n        private _multiple = false,\n        initiallySelectedValues?: T[],\n        private _emitChanges = true\n    ) {\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach((value) => this._markSelected(value));\n            } else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n\n    /** Selected values. */\n    get selected(): T[] {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n\n        return this._selected;\n    }\n\n    /**\n     * Selects a value or an array of values.\n     */\n    select(...values: T[]): void {\n        this._verifyValueAssignment(values);\n\n        values.forEach((value) => this._markSelected(value));\n\n        this._emitChangeEvent();\n    }\n\n    /**\n     * Deselects a value or an array of values.\n     */\n    deselect(...values: T[]): void {\n        this._verifyValueAssignment(values);\n\n        values.forEach((value) => this._unmarkSelected(value));\n\n        this._emitChangeEvent();\n    }\n\n    /**\n     * Toggles a value between selected and deselected.\n     */\n    toggle(value: T): void {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n\n    /**\n     * Clears all of the selected values.\n     */\n    clear(): void {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    }\n\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value: T): boolean {\n        return this._selection.has(value);\n    }\n\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty(): boolean {\n        return this._selection.size === 0;\n    }\n\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate?: (a: T, b: T) => number): void {\n        if (this._multiple && this._selected) { this._selected.sort(predicate); }\n    }\n\n    /** Emits a change event and clears the records of selected and deselected values. */\n    private _emitChangeEvent(): void {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            const eventData = new SelectionChange<T>(this, this._selectedToEmit, this._deselectedToEmit);\n\n            if (this.onChange) { this.onChange.next(eventData); }\n\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n\n    /** Selects a value. */\n    private _markSelected(value: T): void {\n        if (!this.isSelected(value)) {\n            if (!this._multiple) { this._unmarkAll(); }\n\n            this._selection.add(value);\n\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n\n    /** Deselects a value. */\n    private _unmarkSelected(value: T): void {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n\n    /** Clears out the selected values. */\n    private _unmarkAll(): void {\n        if (!this.isEmpty()) {\n            this._selection.forEach((value) => this._unmarkSelected(value));\n        }\n    }\n\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    private _verifyValueAssignment(values: T[]) {\n        if (values.length > 1 && !this._multiple) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n}\n\n/**\n * Event emitted when the value of a MatSelectionModel has changed.\n * @docs-private\n */\nexport class SelectionChange<T> {\n    constructor(\n        /** Model that dispatched the event. */\n        public source: SelectionModel<T>,\n        /** Options that were added to the model. */\n        public added: T[],\n        /** Options that were removed from the model. */\n        public removed: T[]) {\n    }\n}\n\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n */\nexport function getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n","import { Observable, of as observableOf } from 'rxjs';\n\nimport { DataSource } from './data-source';\n\n\n/** DataSource wrapper for a native array. */\nexport class ArrayDataSource<T> extends DataSource<T> {\n    constructor(private _data: T[] | Observable<T[]>) {\n        super();\n    }\n\n    connect(): Observable<T[]> {\n        return this._data instanceof Observable ? this._data : observableOf(this._data);\n    }\n\n    disconnect() {}\n}\n","import { Observable } from 'rxjs';\n\nimport { ICollectionViewer } from './collection-viewer';\n\n\nexport abstract class DataSource<T> {\n    /**\n     * Connects a collection viewer (such as a data-table) to this data source. Note that\n     * the stream provided will be accessed during change detection and should not directly change\n     * values that are bound in template views.\n     * @param collectionViewer The component that exposes a view over the data provided by this\n     *     data source.\n     * @returns Observable that emits a new value when the data changes.\n     */\n    abstract connect(collectionViewer: ICollectionViewer): Observable<T[]>;\n\n    /**\n     * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\n     * to perform any clean-up or tear-down operations when a view is being destroyed.\n     *\n     * @param collectionViewer The component that exposes a view over the data provided by this\n     *     data source.\n     */\n    abstract disconnect(collectionViewer: ICollectionViewer): void;\n}\n"],"names":["tslib_1.__decorate","observableOf","tslib_1.__extends"],"mappings":"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"}