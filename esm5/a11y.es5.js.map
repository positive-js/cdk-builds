{"version":3,"file":"a11y.es5.js","sources":["../../../packages/cdk/a11y/key-manager/focus-key-manager.ts","../../../packages/cdk/a11y/key-manager/activedescendant-key-manager.ts","../../../packages/cdk/a11y/key-manager/list-key-manager.ts"],"sourcesContent":["import { FocusOrigin } from '@angular/cdk/a11y';\n\nimport { ListKeyManager, ListKeyManagerOption } from './list-key-manager';\n\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply it's label.\n */\nexport interface IFocusableOption extends ListKeyManagerOption {\n    // Focuses the `FocusableOption`. */\n    focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<IFocusableOption & T> {\n    private origin: FocusOrigin = 'program';\n\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin: FocusOrigin): this {\n        this.origin = origin;\n\n        return this;\n    }\n\n    /**\n     * Sets the active item or index to the item that is specified and focuses it.\n     * @param item Item to be set as active.\n     */\n    setActiveItem(item: number | T): void;\n\n    setActiveItem(item: any): void {\n        super.setActiveItem(item);\n\n        if (this.activeItem) {\n            this.activeItem.focus(this.origin);\n        }\n    }\n}\n","\nimport { ListKeyManager, ListKeyManagerOption } from './list-key-manager';\n\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\n// tslint:disable-next-line naming-convention\nexport interface Highlightable extends ListKeyManagerOption {\n    // Applies the styles for an active item to this item.\n    setActiveStyles(): void;\n\n    // Applies the styles for an inactive item to this item.\n    setInactiveStyles(): void;\n}\n\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<Highlightable & T> {\n\n    /**\n     * Sets the active item to the item at the specified index and adds the\n     * active styles to the newly active item. Also removes active styles\n     * from the previously active item.\n     * @param index Index of the item to be set as active.\n     */\n    setActiveItem(index: number): void;\n\n    /**\n     * Sets the active item to the item to the specified one and adds the\n     * active styles to the it. Also removes active styles from the\n     * previously active item.\n     * @param item Item to be set as active.\n     */\n    setActiveItem(item: T): void;\n\n    /**\n     * This method sets the active item to the item at the specified index.\n     * It also adds active styles to the newly active item and removes active\n     * styles from the previously active item.\n     */\n    setActiveItem(index: any): void {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n\n        super.setActiveItem(index);\n\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n","import { QueryList } from '@angular/core';\nimport {\n    UP_ARROW,\n    DOWN_ARROW,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    TAB,\n    A,\n    Z,\n    ZERO,\n    NINE\n} from '@ptsecurity/cdk/keycodes';\nimport { Subject, Subscription } from 'rxjs';\nimport { debounceTime, filter, map, tap } from 'rxjs/operators';\n\n\n// This interface is for items that can be passed to a ListKeyManager.\n// tslint:disable-next-line naming-convention\nexport interface ListKeyManagerOption {\n    // Whether the option is disabled.\n    disabled?: boolean;\n\n    // Gets the label for this option.\n    getLabel?(): string;\n}\n\n/* tslint:disable:member-ordering */\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n    tabOut: Subject<void> = new Subject<void>();\n\n    /** Stream that emits whenever the active item of the list manager changes. */\n    change = new Subject<number>();\n\n    previousActiveItemIndex = -1;\n\n    // Index of the currently active item.\n    get activeItemIndex(): number {\n        return this._activeItemIndex;\n    }\n\n    private _activeItemIndex = -1;\n\n    // The active item.\n    get activeItem(): T | null {\n        return this._activeItem;\n    }\n\n    private _activeItem: T;\n\n    private wrap: boolean = false;\n    private letterKeyStream = new Subject<string>();\n    private typeaheadSubscription = Subscription.EMPTY;\n    private vertical = true;\n    private horizontal: 'ltr' | 'rtl' | null;\n\n    private scrollSize: number = 0;\n\n    // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n    private pressedLetters: string[] = [];\n\n    constructor(private _items: QueryList<T>) {\n        if (_items instanceof QueryList) {\n\n            _items.changes.subscribe((newItems: QueryList<T>) => {\n\n                if (this._activeItem) {\n                    const itemArray = newItems.toArray();\n                    const newIndex = itemArray.indexOf(this._activeItem);\n\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n\n    withScrollSize(scrollSize: number): this {\n        this.scrollSize = scrollSize;\n\n        return this;\n    }\n\n    /**\n     * Turns on wrapping mode, which ensures that the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     */\n\n    withWrap(): this {\n        this.wrap = true;\n\n        return this;\n    }\n\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled: boolean = true): this {\n        this.vertical = enabled;\n\n        return this;\n    }\n\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n        this.horizontal = direction;\n\n        return this;\n    }\n\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param searchLetterIndex letter index for incremental search, if is -1 search is disabled\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval: number = 200, searchLetterIndex: number = 0): this {\n        if (this._items.length && this._items.some((item) => typeof item.getLabel !== 'function')) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n\n        this.typeaheadSubscription.unsubscribe();\n\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters and convert those\n        // letters back into a string. Afterwards find the first item that starts with that string and select it.\n        this.typeaheadSubscription = this.letterKeyStream.pipe(\n            tap((keyCode) => this.pressedLetters.push(keyCode)),\n            debounceTime(debounceInterval),\n            filter(() => this.pressedLetters.length > 0),\n            map(() => this.pressedLetters.join(''))\n        ).subscribe((inputString) => {\n            if (searchLetterIndex === -1) {\n                this.pressedLetters = [];\n\n                return;\n            }\n\n            const items = this._items.toArray();\n\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                const index = (this._activeItemIndex + i) % items.length;\n                const item = items[index];\n\n                if (\n                    !item.disabled &&\n                    item.getLabel!().toUpperCase().trim().indexOf(inputString) === searchLetterIndex\n                ) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n\n            this.pressedLetters = [];\n        });\n\n        return this;\n    }\n\n    /**\n     * Sets the active item to the item at the index specified.\n     * @param index The index of the item to be set as active or item The item to be set as active.\n     */\n    setActiveItem(index: number | T): void;\n\n    /**\n     * Sets the active item to the item at the index specified.\n     * @param item The index of the item to be set as active.\n     */\n    setActiveItem(item: any): void {\n        this.previousActiveItemIndex = this._activeItemIndex;\n\n        this.updateActiveItem(item);\n\n        if (this._activeItemIndex !== this.previousActiveItemIndex) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    onKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n\n                return;\n\n            case DOWN_ARROW:\n                if (this.vertical) {\n                    this.setNextItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case UP_ARROW:\n                if (this.vertical) {\n                    this.setPreviousItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case RIGHT_ARROW:\n                if (this.horizontal === 'ltr') {\n                    this.setNextItemActive();\n                    break;\n                } else if (this.horizontal === 'rtl') {\n                    this.setPreviousItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case LEFT_ARROW:\n                if (this.horizontal === 'ltr') {\n                    this.setPreviousItemActive();\n                    break;\n                } else if (this.horizontal === 'rtl') {\n                    this.setNextItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            default:\n                // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                if (event.key && event.key.length === 1) {\n                    this.letterKeyStream.next(event.key.toLocaleUpperCase());\n                } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                    this.letterKeyStream.next(String.fromCharCode(keyCode));\n                }\n\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n\n        this.pressedLetters = [];\n        event.preventDefault();\n    }\n\n    // Sets the active item to the first enabled item in the list.\n    setFirstItemActive(): void {\n        this.setActiveItemByIndex(0, 1);\n    }\n\n    // Sets the active item to the last enabled item in the list.\n    setLastItemActive(): void {\n        this.setActiveItemByIndex(this._items.length - 1, -1);\n    }\n\n    // Sets the active item to the next enabled item in the list.\n    setNextItemActive(): void {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this.setActiveItemByDelta(1);\n    }\n\n    // Sets the active item to a previous enabled item in the list.\n    setPreviousItemActive(): void {\n        this._activeItemIndex < 0 && this.wrap ? this.setLastItemActive()\n            : this.setActiveItemByDelta(-1);\n    }\n\n    setNextPageItemActive(delta: number = this.scrollSize): void {\n        const nextItemIndex = this._activeItemIndex + delta;\n\n        if (nextItemIndex >= this._items.length) {\n            this.setLastItemActive();\n        } else {\n            this.setActiveItemByDelta(delta);\n        }\n    }\n\n    setPreviousPageItemActive(delta: number = this.scrollSize): void {\n        const nextItemIndex = this._activeItemIndex - delta;\n\n        if (nextItemIndex <= 0) {\n            this.setFirstItemActive();\n        } else {\n            this.setActiveItemByDelta(-delta);\n        }\n    }\n\n    /**\n     * Allows setting the active without any other effects.\n     * @param index Index of the item to be set as active.\n     */\n    updateActiveItem(index: number): void;\n\n    /**\n     * Allows setting the active item without any other effects.\n     * @param item Item to be set as active or index Index of the item to be set as active..\n     */\n    // tslint:disable-next-line:unified-signatures\n    updateActiveItem(item: number | T): void;\n\n    updateActiveItem(item: any): void {\n        const itemArray = this._items.toArray();\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n\n        this._activeItemIndex = index;\n        this._activeItem = itemArray[index];\n    }\n\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n    private skipPredicateFn = (item: T) => item.disabled;\n\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    private setActiveItemByDelta(delta: number): void {\n        this.wrap ? this.setActiveInWrapMode(delta) : this.setActiveInDefaultMode(delta);\n    }\n\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    private setActiveInWrapMode(delta: number): void {\n        const items = this.getItemsArray();\n\n        for (let i = 1; i <= items.length; i++) {\n            const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n            const item = items[index];\n\n            if (!this.skipPredicateFn(item)) {\n                this.setActiveItem(index);\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    private setActiveInDefaultMode(delta: number): void {\n        this.setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    private setActiveItemByIndex(index: number, fallbackDelta: number): void {\n        const items = this.getItemsArray();\n\n        if (!items[index]) { return; }\n\n        let curIndex = index;\n        while (this.skipPredicateFn(items[curIndex])) {\n            curIndex += fallbackDelta;\n\n            if (!items[curIndex]) { return; }\n        }\n\n        this.setActiveItem(curIndex);\n    }\n\n    /** Returns the items as an array. */\n    private getItemsArray(): T[] {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n\n/* tslint:enable:member-ordering */\n"],"names":["tslib_1.__extends"],"mappings":"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"}