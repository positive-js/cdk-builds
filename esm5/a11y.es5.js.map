{"version":3,"file":"a11y.es5.js","sources":["../../../packages/cdk/a11y/a11y-module.ts","../../../packages/cdk/a11y/aria-describer/aria-describer.ts","../../../packages/cdk/a11y/aria-describer/aria-reference.ts","../../../packages/cdk/a11y/focus-monitor/focus-monitor.ts","../../../packages/cdk/a11y/key-manager/focus-key-manager.ts","../../../packages/cdk/a11y/key-manager/activedescendant-key-manager.ts","../../../packages/cdk/a11y/key-manager/list-key-manager.ts"],"sourcesContent":["import { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { CdkMonitorFocus, FOCUS_MONITOR_PROVIDER } from './focus-monitor/focus-monitor';\n\n\n@NgModule({\n  imports: [CommonModule, PlatformModule],\n  declarations: [CdkMonitorFocus],\n  exports: [CdkMonitorFocus],\n  providers: [\n    FOCUS_MONITOR_PROVIDER\n  ]\n})\nexport class A11yModule {}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    Inject,\n    Injectable,\n    OnDestroy\n} from '@angular/core';\nimport {of} from \"rxjs\";\n\nimport { addAriaReferencedId, getAriaReferenceIds, removeAriaReferencedId } from './aria-reference';\n\n\n/**\n * Interface used to register message elements and keep a count of how many registrations have\n * the sa me  messag'rxjs'the reference to the message element used for the `aria-describedby`.\n */\n// tslint:disable-next-line naming-convention\nexport interface RegisteredMessage {\n    /** The element containing the message. */\n    messageElement: Element;\n\n    /** The number of elements that reference this message element via `aria-describedby`. */\n    referenceCount: number;\n}\n\n/** ID used for the body container where all messages are appended. */\nexport const MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n\n/** ID prefix used for each created message element. */\nexport const CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n\n/** Attribute given to each host element that is described by a message element. */\nexport const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n\n/** Global map of all registered message elements that have been placed into the document. */\nconst messageRegistry = new Map<string, RegisteredMessage>();\n\n/** Container for all registered messages. */\nlet messagesContainer: HTMLElement | null = null;\n\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class AriaDescriber implements OnDestroy {\n    private _document: Document;\n\n    constructor(@Inject(DOCUMENT) _document: any) {\n        this._document = _document;\n    }\n\n    /**\n     * Adds to the host element an aria-describedby reference to a hidden element that contains\n     * the message. If the same message has already been registered, then it will reuse the created\n     * message element.\n     */\n    describe(hostElement: Element, message: string) {\n        if (!this._canBeDescribed(hostElement, message)) {\n            return;\n        }\n\n        if (!messageRegistry.has(message)) {\n            this._createMessageElement(message);\n        }\n\n        if (!this._isElementDescribedByMessage(hostElement, message)) {\n            this._addMessageReference(hostElement, message);\n        }\n    }\n\n    /** Removes the host element's aria-describedby reference to the message element. */\n    removeDescription(hostElement: Element, message: string) {\n        if (!this._isElementNode(hostElement)) {\n            return;\n        }\n\n        if (this._isElementDescribedByMessage(hostElement, message)) {\n            this._removeMessageReference(hostElement, message);\n        }\n\n        const registeredMessage = messageRegistry.get(message);\n        if (registeredMessage && registeredMessage.referenceCount === 0) {\n            this._deleteMessageElement(message);\n        }\n\n        if (messagesContainer && messagesContainer.childNodes.length === 0) {\n            this._deleteMessagesContainer();\n        }\n    }\n\n    /** Unregisters all created message elements and removes the message container. */\n    ngOnDestroy() {\n        const describedElements =\n            this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n\n        for (let i = 0; i < describedElements.length; i++) {\n            this._removeCdkDescribedByReferenceIds(describedElements[i]);\n            describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n        }\n\n        if (messagesContainer) {\n            this._deleteMessagesContainer();\n        }\n\n        messageRegistry.clear();\n    }\n\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     */\n    private _createMessageElement(message: string) {\n        const messageElement = this._document.createElement('div');\n        messageElement.setAttribute('id', `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`);\n        messageElement.appendChild(this._document.createTextNode(message));\n\n        this._createMessagesContainer();\n        messagesContainer!.appendChild(messageElement);\n\n        messageRegistry.set(message, {messageElement, referenceCount: 0});\n    }\n\n    /** Deletes the message element from the global messages container. */\n    private _deleteMessageElement(message: string) {\n        const registeredMessage = messageRegistry.get(message);\n        const messageElement = registeredMessage && registeredMessage.messageElement;\n        if (messagesContainer && messageElement) {\n            messagesContainer.removeChild(messageElement);\n        }\n        messageRegistry.delete(message);\n    }\n\n    /** Creates the global container for all aria-describedby messages. */\n    private _createMessagesContainer() {\n        if (!messagesContainer) {\n            const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);\n\n            // When going from the server to the client, we may end up in a situation where there's\n            // already a container on the page, but we don't have a reference to it. Clear the\n            // old container so we don't get duplicates. Doing this, instead of emptying the previous\n            // container, should be slightly faster.\n            if (preExistingContainer) {\n                preExistingContainer.parentNode!.removeChild(preExistingContainer);\n            }\n\n            messagesContainer = this._document.createElement('div');\n            messagesContainer.id = MESSAGES_CONTAINER_ID;\n            messagesContainer.setAttribute('aria-hidden', 'true');\n            messagesContainer.style.display = 'none';\n            this._document.body.appendChild(messagesContainer);\n        }\n    }\n\n    /** Deletes the global messages container. */\n    private _deleteMessagesContainer() {\n        if (messagesContainer && messagesContainer.parentNode) {\n            messagesContainer.parentNode.removeChild(messagesContainer);\n            messagesContainer = null;\n        }\n    }\n\n    /** Removes all cdk-describedby messages that are hosted through the element. */\n    private _removeCdkDescribedByReferenceIds(element: Element) {\n        // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n        const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\n            .filter((id) => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) !== 0);\n        element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     */\n    private _addMessageReference(element: Element, message: string) {\n        const registeredMessage = messageRegistry.get(message)!;\n\n        // Add the aria-describedby reference and set the\n        // describedby_host attribute to mark the element.\n        addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n\n        registeredMessage.referenceCount++;\n    }\n\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     */\n    private _removeMessageReference(element: Element, message: string) {\n        const registeredMessage = messageRegistry.get(message)!;\n        registeredMessage.referenceCount--;\n\n        removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n\n    /** Returns true if the element has been described by the provided message ID. */\n    private _isElementDescribedByMessage(element: Element, message: string): boolean {\n        const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n        const registeredMessage = messageRegistry.get(message);\n        const messageId = registeredMessage && registeredMessage.messageElement.id;\n\n        return !!messageId && referenceIds.indexOf(messageId) !== -1;\n    }\n\n    /** Determines whether a message can be described on a particular element. */\n    private _canBeDescribed(element: Element, message: string): boolean {\n        if (!this._isElementNode(element)) {\n            return false;\n        }\n\n        const trimmedMessage = message == null ? '' : `${message}`.trim();\n        const ariaLabel = element.getAttribute('aria-label');\n\n        // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the element,\n        // because screen readers will end up reading out the same text twice in a row.\n        return trimmedMessage ? (!ariaLabel || ariaLabel.trim() !== trimmedMessage) : false;\n    }\n\n    /** Checks whether a node is an Element node. */\n    private _isElementNode(element: Node): element is Element {\n        return element.nodeType === this._document.ELEMENT_NODE;\n    }\n}\n","const ID_DELIMINATOR = ' ';\n\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function addAriaReferencedId(el: Element, attr: string, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n\n  if (ids.some((existingId) => existingId.trim() === id.trim())) { return; }\n  ids.push(id.trim());\n\n  el.setAttribute(attr, ids.join(ID_DELIMINATOR));\n}\n\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function removeAriaReferencedId(el: Element, attr: string, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  const filteredIds = ids.filter((val) => val !== id.trim());\n\n  el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));\n}\n\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function getAriaReferenceIds(el: Element, attr: string): string[] {\n  // Get string array of all individual ids (whitespace deliminated) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n","import { Platform, supportsPassiveEventListeners } from '@angular/cdk/platform';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Injectable,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    SkipSelf\n} from '@angular/core';\nimport { Observable, Subject, Subscription, of as observableOf } from 'rxjs';\n\n\n// Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n// tslint:disable-next-line naming-convention\ninterface MonitoredElementInfo {\n    checkChildren: boolean;\n    subject: Subject<FocusOrigin>;\n    unlisten(): void;\n}\n\n\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\n@Injectable({providedIn: 'root'})\nexport class FocusMonitor implements OnDestroy {\n    /** The focus origin that the next focus event is a result of. */\n    private _origin: FocusOrigin = null;\n\n    /** The FocusOrigin of the last focus event tracked by the FocusMonitor. */\n    private _lastFocusOrigin: FocusOrigin;\n\n    /** Whether the window has just been focused. */\n    private _windowFocused = false;\n\n    /** The target of the last touch event. */\n    private _lastTouchTarget: EventTarget | null;\n\n    /** The timeout id of the touch timeout, used to cancel timeout later. */\n    private _touchTimeoutId: number;\n\n    /** The timeout id of the window focus timeout. */\n    private _windowFocusTimeoutId: number;\n\n    /** The timeout id of the origin clearing timeout. */\n    private _originTimeoutId: number;\n\n    /** Map of elements being monitored to their info. */\n    private _elementInfo = new Map<HTMLElement, MonitoredElementInfo>();\n\n    /** The number of elements currently being monitored. */\n    private _monitoredElementCount = 0;\n\n    constructor(private _ngZone: NgZone, private _platform: Platform) {}\n\n    /**\n     * Monitors focus on an element and applies appropriate CSS classes.\n     * @param element The element to monitor\n     * @param checkChildren Whether to count the element as focused when its children are focused.\n     * @returns An observable that emits when the focus state of the element changes.\n     *     When the element is blurred, null will be emitted.\n     */\n    monitor(element: HTMLElement, checkChildren: boolean = false): Observable<FocusOrigin> {\n        if (!this._platform.isBrowser) {\n            return observableOf(null);\n        }\n        // Check if we're already monitoring this element.\n        if (this._elementInfo.has(element)) {\n            const cachedInfo = this._elementInfo.get(element);\n            cachedInfo!.checkChildren = checkChildren;\n\n            return cachedInfo!.subject.asObservable();\n        }\n\n        // Create monitored element info.\n        const info: MonitoredElementInfo = {\n            unlisten: () => {}, // tslint:disable-line no-empty\n            checkChildren,\n            subject: new Subject<FocusOrigin>()\n        };\n        this._elementInfo.set(element, info);\n        this._incrementMonitoredElementCount();\n\n        // Start listening. We need to listen in capture phase since focus events don't bubble.\n        const focusListener = (event: FocusEvent) => this._onFocus(event, element);\n        const blurListener = (event: FocusEvent) => this._onBlur(event, element);\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('focus', focusListener, true);\n            element.addEventListener('blur', blurListener, true);\n        });\n\n        // Create an unlisten function for later.\n        info.unlisten = () => {\n            element.removeEventListener('focus', focusListener, true);\n            element.removeEventListener('blur', blurListener, true);\n        };\n\n        return info.subject.asObservable();\n    }\n\n    /**\n     * Stops monitoring an element and removes all focus classes.\n     * @param element The element to stop monitoring.\n     */\n    stopMonitoring(element: HTMLElement): void {\n        const elementInfo = this._elementInfo.get(element);\n\n        if (elementInfo) {\n            elementInfo.unlisten();\n            elementInfo.subject.complete();\n\n            this._setClasses(element);\n            this._elementInfo.delete(element);\n            this._decrementMonitoredElementCount();\n        }\n    }\n\n    /**\n     * Focuses the element via the specified focus origin.\n     * @param element The element to focus.\n     * @param origin The focus origin.\n     */\n    focusVia(element: HTMLElement, origin: FocusOrigin): void {\n        this._setOriginForCurrentEventQueue(origin);\n\n        // `focus` isn't available on the server\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    ngOnDestroy() {\n        this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n    }\n\n    /**\n     * Handles blur events on a registered element.\n     * @param event The blur event.\n     * @param element The monitored element.\n     */\n    _onBlur(event: FocusEvent, element: HTMLElement) {\n        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n        // order to focus another child of the monitored element.\n        const elementInfo = this._elementInfo.get(element);\n\n        if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n                element.contains(event.relatedTarget))) {\n            return;\n        }\n\n        this._setClasses(element);\n        elementInfo.subject.next(null);\n    }\n\n    /** A map of global objects to lists of current listeners. */\n    private _unregisterGlobalListeners = () => {};  // tslint:disable-line no-empty\n\n    /** Register necessary event listeners on the document and window. */\n    private _registerGlobalListeners() {\n        // Do nothing if we're not on the browser platform.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n\n        // On keydown record the origin and clear any touch event that may be in progress.\n        const documentKeydownListener = () => {\n            this._lastTouchTarget = null;\n            this._setOriginForCurrentEventQueue('keyboard');\n        };\n\n        // On mousedown record the origin only if there is not touch target, since a mousedown can\n        // happen as a result of a touch event.\n        const documentMousedownListener = () => {\n            if (!this._lastTouchTarget) {\n                this._setOriginForCurrentEventQueue('mouse');\n            }\n        };\n\n        // When the touchstart event fires the focus event is not yet in the event queue. This means\n        // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\n        // see if a focus happens.\n        const documentTouchstartListener = (event: TouchEvent) => {\n            if (this._touchTimeoutId != null) { clearTimeout(this._touchTimeoutId); }\n\n            this._lastTouchTarget = event.target;\n\n            this._touchTimeoutId = window.setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n        };\n\n        // Make a note of when the window regains focus, so we can restore the origin info for the\n        // focused element.\n        const windowFocusListener = () => {\n            this._windowFocused = true;\n\n            this._windowFocusTimeoutId = window.setTimeout(() => this._windowFocused = false, 0);\n        };\n\n        // Note: we listen to events in the capture phase so we can detect them even if the user stops\n        // propagation.\n        this._ngZone.runOutsideAngular(() => {\n            document.addEventListener('keydown', documentKeydownListener, true);\n            document.addEventListener('mousedown', documentMousedownListener, true);\n            document.addEventListener('touchstart', documentTouchstartListener,\n                supportsPassiveEventListeners() ? ({ passive: true, capture: true } as any) : true);\n            window.addEventListener('focus', windowFocusListener);\n        });\n\n        this._unregisterGlobalListeners = () => {\n            document.removeEventListener('keydown', documentKeydownListener, true);\n            document.removeEventListener('mousedown', documentMousedownListener, true);\n            document.removeEventListener('touchstart', documentTouchstartListener,\n                supportsPassiveEventListeners() ? ({ passive: true, capture: true } as any) : true);\n            window.removeEventListener('focus', windowFocusListener);\n\n            // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n            clearTimeout(this._windowFocusTimeoutId);\n            clearTimeout(this._touchTimeoutId);\n            clearTimeout(this._originTimeoutId);\n        };\n    }\n\n    private _toggleClass(element: Element, className: string, shouldSet: boolean) {\n        if (shouldSet) {\n            element.classList.add(className);\n        } else {\n            element.classList.remove(className);\n        }\n    }\n\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param element The element to update the classes on.\n     * @param origin The focus origin.\n     */\n    private _setClasses(element: HTMLElement, origin?: FocusOrigin): void {\n        const elementInfo = this._elementInfo.get(element);\n\n        if (elementInfo) {\n            this._toggleClass(element, 'cdk-focused', !!origin);\n            this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n            this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n            this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n            this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n        }\n    }\n\n    /**\n     * Sets the origin and schedules an async function to clear it at the end of the event queue.\n     * @param origin The origin to set.\n     */\n    private _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n        this._ngZone.runOutsideAngular(() => {\n            this._origin = origin;\n\n            this._originTimeoutId = window.setTimeout(() => this._origin = null);\n        });\n    }\n\n    /**\n     * Checks whether the given focus event was caused by a touchstart event.\n     * @param event The focus event to check.\n     * @returns Whether the event was caused by a touch.\n     */\n    private _wasCausedByTouch(event: FocusEvent): boolean {\n        // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n        // Consider the following dom structure:\n        //\n        // <div #parent tabindex=\"0\" cdkFocusClasses>\n        //   <div #child (click)=\"#parent.focus()\"></div>\n        // </div>\n        //\n        // If the user touches the #child element and the #parent is programmatically focused as a\n        // result, this code will still consider it to have been caused by the touch event and will\n        // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n        // relatively small edge-case that can be worked around by using\n        // focusVia(parentEl, 'program') to focus the parent element.\n        //\n        // If we decide that we absolutely must handle this case correctly, we can do so by listening\n        // for the first focus event after the touchstart, and then the first blur event after that\n        // focus event. When that blur event fires we know that whatever follows is not a result of the\n        // touchstart.\n        const focusTarget = event.target;\n\n        return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n            (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n    }\n\n    /**\n     * Handles focus events on a registered element.\n     * @param event The focus event.\n     * @param element The monitored element.\n     */\n    private _onFocus(event: FocusEvent, element: HTMLElement) {\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n        // focus event affecting the monitored element. If we want to use the origin of the first event\n        // instead we should check for the cdk-focused class here and return if the element already has\n        // it. (This only matters for elements that have includesChildren = true).\n\n        // If we are not counting child-element-focus as focused, make sure that the event target is the\n        // monitored element itself.\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {\n            return;\n        }\n\n        // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n        // 1) The window has just regained focus, in which case we want to restore the focused state of\n        //    the element from before the window blurred.\n        // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n        // 3) The element was programmatically focused, in which case we should mark the origin as\n        //    'program'.\n        let origin = this._origin;\n        if (!origin) {\n            if (this._windowFocused && this._lastFocusOrigin) {\n                origin = this._lastFocusOrigin;\n            } else if (this._wasCausedByTouch(event)) {\n                origin = 'touch';\n            } else {\n                origin = 'program';\n            }\n        }\n\n        this._setClasses(element, origin);\n        this._emitOrigin(elementInfo.subject, origin);\n        this._lastFocusOrigin = origin;\n    }\n\n    private _emitOrigin(subject: Subject<FocusOrigin>, origin: FocusOrigin) {\n        this._ngZone.run(() => subject.next(origin));\n    }\n\n    private _incrementMonitoredElementCount() {\n        // Register global listeners when first element is monitored.\n        if (++this._monitoredElementCount === 1) {\n            this._registerGlobalListeners();\n        }\n    }\n\n    private _decrementMonitoredElementCount() {\n        // Unregister global listeners when last element is unmonitored.\n        if (!--this._monitoredElementCount) {\n            this._unregisterGlobalListeners();\n            this._unregisterGlobalListeners = () => {};  // tslint:disable-line no-empty\n        }\n    }\n}\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n@Directive({\n    selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n})\nexport class CdkMonitorFocus implements OnDestroy {\n\n    @Output() cdkFocusChange = new EventEmitter<FocusOrigin>();\n\n    private _monitorSubscription: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        this._monitorSubscription = this._focusMonitor.monitor(\n            this._elementRef.nativeElement,\n            this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n            .subscribe((origin) => this.cdkFocusChange.emit(origin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n        this._monitorSubscription.unsubscribe();\n    }\n}\n\n/** @docs-private @deprecated */\nexport function FOCUS_MONITOR_PROVIDER_FACTORY(parentDispatcher: FocusMonitor, ngZone: NgZone, platform: Platform) {\n    return parentDispatcher || new FocusMonitor(ngZone, platform);\n}\n\n/** @docs-private */\nexport const FOCUS_MONITOR_PROVIDER = {\n    // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.\n    provide: FocusMonitor,\n    deps: [[new Optional(), new SkipSelf(), FocusMonitor], NgZone, Platform],\n    useFactory: FOCUS_MONITOR_PROVIDER_FACTORY\n};\n","import { FocusOrigin } from '../focus-monitor/focus-monitor';\n\nimport { ListKeyManager, ListKeyManagerOption } from './list-key-manager';\n\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply it's label.\n */\nexport interface IFocusableOption extends ListKeyManagerOption {\n    // Focuses the `FocusableOption`. */\n    focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<IFocusableOption & T> {\n    private _origin: FocusOrigin = 'program';\n\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin: FocusOrigin): this {\n        this._origin = origin;\n\n        return this;\n    }\n\n    /**\n     * Sets the active item or index to the item that is specified and focuses it.\n     * @param item Item to be set as active.\n     */\n    setActiveItem(item: number | T): void;\n\n    setActiveItem(item: any): void {\n        super.setActiveItem(item);\n\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n","\nimport { ListKeyManager, ListKeyManagerOption } from './list-key-manager';\n\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\n// tslint:disable-next-line naming-convention\nexport interface Highlightable extends ListKeyManagerOption {\n    // Applies the styles for an active item to this item.\n    setActiveStyles(): void;\n\n    // Applies the styles for an inactive item to this item.\n    setInactiveStyles(): void;\n}\n\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<Highlightable & T> {\n\n    /**\n     * Sets the active item to the item at the specified index and adds the\n     * active styles to the newly active item. Also removes active styles\n     * from the previously active item.\n     * @param index Index of the item to be set as active.\n     */\n    setActiveItem(index: number): void;\n\n    /**\n     * Sets the active item to the item to the specified one and adds the\n     * active styles to the it. Also removes active styles from the\n     * previously active item.\n     * @param item Item to be set as active.\n     */\n    setActiveItem(item: T): void;\n\n    /**\n     * This method sets the active item to the item at the specified index.\n     * It also adds active styles to the newly active item and removes active\n     * styles from the previously active item.\n     */\n    setActiveItem(index: any): void {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n\n        super.setActiveItem(index);\n\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n","import { QueryList } from '@angular/core';\nimport {\n    UP_ARROW,\n    DOWN_ARROW,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    TAB,\n    A,\n    Z,\n    ZERO,\n    NINE\n} from '@ptsecurity/cdk/keycodes';\nimport { Subject, Subscription } from 'rxjs';\nimport { debounceTime, filter, map, tap } from 'rxjs/operators';\n\n\n// This interface is for items that can be passed to a ListKeyManager.\n// tslint:disable-next-line naming-convention\nexport interface ListKeyManagerOption {\n    // Whether the option is disabled.\n    disabled?: boolean;\n\n    // Gets the label for this option.\n    getLabel?(): string;\n}\n\n/* tslint:disable:member-ordering */\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n    tabOut: Subject<void> = new Subject<void>();\n\n    /** Stream that emits whenever the active item of the list manager changes. */\n    change = new Subject<number>();\n\n    previousActiveItemIndex = -1;\n    private _activeItemIndex = -1;\n    private _activeItem: T;\n    private _wrap: boolean = false;\n    private _letterKeyStream = new Subject<string>();\n    private _typeaheadSubscription = Subscription.EMPTY;\n    private _vertical = true;\n    private _horizontal: 'ltr' | 'rtl' | null;\n\n    private _scrollSize: number = 0;\n\n    // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n    private _pressedLetters: string[] = [];\n\n    constructor(private _items: QueryList<T>) {\n        if (_items instanceof QueryList) {\n\n            _items.changes.subscribe((newItems: QueryList<T>) => {\n\n                if (this._activeItem) {\n                    const itemArray = newItems.toArray();\n                    const newIndex = itemArray.indexOf(this._activeItem);\n\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n\n    withScrollSize(scrollSize: number): this {\n        this._scrollSize = scrollSize;\n\n        return this;\n    }\n\n    /**\n     * Turns on wrapping mode, which ensures that the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     */\n\n    withWrap(): this {\n        this._wrap = true;\n\n        return this;\n    }\n\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled: boolean = true): this {\n        this._vertical = enabled;\n\n        return this;\n    }\n\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n        this._horizontal = direction;\n\n        return this;\n    }\n\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param searchLetterIndex letter index for incremental search, if is -1 search is disabled\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval: number = 200, searchLetterIndex: number = 0): this {\n        if (this._items.length && this._items.some((item) => typeof item.getLabel !== 'function')) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n\n        this._typeaheadSubscription.unsubscribe();\n\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters and convert those\n        // letters back into a string. Afterwards find the first item that starts with that string and select it.\n        this._typeaheadSubscription = this._letterKeyStream.pipe(\n            tap((keyCode) => this._pressedLetters.push(keyCode)),\n            debounceTime(debounceInterval),\n            filter(() => this._pressedLetters.length > 0),\n            map(() => this._pressedLetters.join(''))\n        ).subscribe((inputString) => {\n            if (searchLetterIndex === -1) {\n                this._pressedLetters = [];\n\n                return;\n            }\n\n            const items = this._items.toArray();\n\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                const index = (this._activeItemIndex + i) % items.length;\n                const item = items[index];\n\n                if (\n                    !item.disabled &&\n                    item.getLabel!().toUpperCase().trim().indexOf(inputString) === searchLetterIndex\n                ) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n\n            this._pressedLetters = [];\n        });\n\n        return this;\n    }\n\n    /**\n     * Sets the active item to the item at the index specified.\n     * @param index The index of the item to be set as active or item The item to be set as active.\n     */\n    setActiveItem(index: number | T): void;\n\n    /**\n     * Sets the active item to the item at the index specified.\n     * @param item The index of the item to be set as active.\n     */\n    setActiveItem(item: any): void {\n        this.previousActiveItemIndex = this._activeItemIndex;\n\n        this.updateActiveItem(item);\n\n        if (this._activeItemIndex !== this.previousActiveItemIndex) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    onKeydown(event: KeyboardEvent): void {\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n\n                return;\n\n            case DOWN_ARROW:\n                if (this._vertical) {\n                    this.setNextItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case UP_ARROW:\n                if (this._vertical) {\n                    this.setPreviousItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case RIGHT_ARROW:\n                if (this._horizontal === 'ltr') {\n                    this.setNextItemActive();\n                    break;\n                } else if (this._horizontal === 'rtl') {\n                    this.setPreviousItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case LEFT_ARROW:\n                if (this._horizontal === 'ltr') {\n                    this.setPreviousItemActive();\n                    break;\n                } else if (this._horizontal === 'rtl') {\n                    this.setNextItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            default:\n                // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                if (event.key && event.key.length === 1) {\n                    this._letterKeyStream.next(event.key.toLocaleUpperCase());\n                } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                    this._letterKeyStream.next(String.fromCharCode(keyCode));\n                }\n\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n\n        this._pressedLetters = [];\n        event.preventDefault();\n    }\n\n    // Index of the currently active item.\n    get activeItemIndex(): number {\n        return this._activeItemIndex;\n    }\n\n    // The active item.\n    get activeItem(): T | null {\n        return this._activeItem;\n    }\n\n    // Sets the active item to the first enabled item in the list.\n    setFirstItemActive(): void {\n        this._setActiveItemByIndex(0, 1);\n    }\n\n    // Sets the active item to the last enabled item in the list.\n    setLastItemActive(): void {\n        this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n\n    // Sets the active item to the next enabled item in the list.\n    setNextItemActive(): void {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n\n    // Sets the active item to a previous enabled item in the list.\n    setPreviousItemActive(): void {\n        this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\n            : this._setActiveItemByDelta(-1);\n    }\n\n    setNextPageItemActive(delta: number = this._scrollSize): void {\n        const nextItemIndex = this._activeItemIndex + delta;\n\n        if (nextItemIndex >= this._items.length) {\n            this.setLastItemActive();\n        } else {\n            this._setActiveItemByDelta(delta);\n        }\n    }\n\n    setPreviousPageItemActive(delta: number = this._scrollSize): void {\n        const nextItemIndex = this._activeItemIndex - delta;\n\n        if (nextItemIndex <= 0) {\n            this.setFirstItemActive();\n        } else {\n            this._setActiveItemByDelta(-delta);\n        }\n    }\n\n    /**\n     * Allows setting the active without any other effects.\n     * @param index Index of the item to be set as active.\n     */\n    updateActiveItem(index: number): void;\n\n    /**\n     * Allows setting the active item without any other effects.\n     * @param item Item to be set as active or index Index of the item to be set as active..\n     */\n    updateActiveItem(item: number | T): void;\n\n    updateActiveItem(item: any): void {\n        const itemArray = this._items.toArray();\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n\n        this._activeItemIndex = index;\n        this._activeItem = itemArray[index];\n    }\n\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n    private _skipPredicateFn = (item: T) => item.disabled;\n\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    private _setActiveItemByDelta(delta: number): void {\n        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    private _setActiveInWrapMode(delta: number): void {\n        const items = this._getItemsArray();\n\n        for (let i = 1; i <= items.length; i++) {\n            const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n            const item = items[index];\n\n            if (!this._skipPredicateFn(item)) {\n                this.setActiveItem(index);\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    private _setActiveInDefaultMode(delta: number): void {\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    private _setActiveItemByIndex(index: number, fallbackDelta: number): void {\n        const items = this._getItemsArray();\n\n        if (!items[index]) { return; }\n\n        let curIndex = index;\n        while (this._skipPredicateFn(items[curIndex])) {\n            curIndex += fallbackDelta;\n\n            if (!items[curIndex]) { return; }\n        }\n\n        this.setActiveItem(curIndex);\n    }\n\n    /** Returns the items as an array. */\n    private _getItemsArray(): T[] {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n\n/* tslint:enable:member-ordering */\n"],"names":["observableOf","tslib_1.__extends"],"mappings":"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"}