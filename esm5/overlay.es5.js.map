{"version":3,"file":"overlay.es5.js","sources":["../../../src/cdk/overlay/index.ts","../../../src/cdk/overlay/fullscreen-overlay-container.ts","../../../src/cdk/overlay/overlay-module.ts","../../../src/cdk/overlay/overlay-directives.ts","../../../src/cdk/overlay/overlay.ts","../../../src/cdk/overlay/position/overlay-position-builder.ts","../../../src/cdk/overlay/position/global-position-strategy.ts","../../../src/cdk/overlay/position/connected-position-strategy.ts","../../../src/cdk/overlay/position/flexible-connected-position-strategy.ts","../../../src/cdk/overlay/overlay-ref.ts","../../../src/cdk/overlay/overlay-container.ts","../../../src/cdk/overlay/keyboard/overlay-keyboard-dispatcher.ts","../../../src/cdk/overlay/scroll/scroll-strategy-options.ts","../../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts","../../../src/cdk/overlay/position/scroll-clip.ts","../../../src/cdk/overlay/scroll/close-scroll-strategy.ts","../../../src/cdk/overlay/scroll/scroll-strategy.ts","../../../src/cdk/overlay/scroll/block-scroll-strategy.ts","../../../src/cdk/overlay/position/connected-position.ts","../../../src/cdk/overlay/overlay-config.ts","../../../src/cdk/overlay/scroll/noop-scroll-strategy.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵg,OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵf} from './keyboard/overlay-keyboard-dispatcher';\nexport {OVERLAY_CONTAINER_PROVIDER as ɵb,OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa} from './overlay-container';\nexport {CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵc,CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵe,CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵd} from './overlay-directives';","import {DOCUMENT} from '@angular/common';\nimport {Injectable, Inject, OnDestroy} from '@angular/core';\n\nimport {OverlayContainer} from './overlay-container';\n\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n@Injectable()\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\n  private _fullScreenEventName: string | undefined;\n  private _fullScreenListener: () => void;\n\n  constructor(@Inject(DOCUMENT) _document: any) {\n    super(_document);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement(): Element {\n        return this._document.fullscreenElement ||\n            this._document.webkitFullscreenElement ||\n            (this._document as any).mozFullScreenElement ||\n            (this._document as any).msFullscreenElement ||\n            null;\n    }\n\n  protected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n\n  private _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n\n    const fullscreenElement = this.getFullscreenElement();\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n\n  private _addFullscreenChangeListener(fn: () => void) {\n    const eventName = this._getEventName();\n\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n\n      this._document.addEventListener(eventName, fn);\n      this._fullScreenListener = fn;\n    }\n  }\n\n  private _getEventName(): string | undefined {\n    if (!this._fullScreenEventName) {\n      if (this._document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (this._document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if ((this._document as any).mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if ((this._document as any).msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n\n    return this._fullScreenEventName;\n  }\n}\n","import {NgModule, Provider} from '@angular/core';\nimport {BidiModule} from '@ptsecurity/cdk/bidi';\nimport {PortalModule} from '@ptsecurity/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@ptsecurity/cdk/scrolling';\n\nimport {OVERLAY_KEYBOARD_DISPATCHER_PROVIDER} from './keyboard/overlay-keyboard-dispatcher';\nimport {Overlay} from './overlay';\nimport {OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\nimport {\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    CdkConnectedOverlay,\n    CdkOverlayOrigin\n} from './overlay-directives';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\n\n\n@NgModule({\n    imports: [BidiModule, PortalModule, ScrollDispatchModule],\n    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollDispatchModule],\n    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n    providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER\n    ]\n})\nexport class OverlayModule {}\n\n\n/**\n * @deprecated Use `OverlayModule` instead.\n * @deletion-target 7.0.0\n */\nexport const OVERLAY_PROVIDERS: Provider[] = [\n    Overlay,\n    OverlayPositionBuilder,\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n    VIEWPORT_RULER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    ViewContainerRef\n} from '@angular/core';\nimport {Direction, Directionality} from '@ptsecurity/cdk/bidi';\nimport {coerceBooleanProperty} from '@ptsecurity/cdk/coercion';\nimport {ESCAPE} from '@ptsecurity/cdk/keycodes';\nimport {TemplatePortal} from '@ptsecurity/cdk/portal';\nimport {Subscription} from 'rxjs';\n\nimport {Overlay} from './overlay';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayRef} from './overlay-ref';\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\nimport {\n    IConnectedPosition,\n    FlexibleConnectedPositionStrategy\n} from './position/flexible-connected-position-strategy';\nimport {\n    RepositionScrollStrategy,\n    IRepositionScrollStrategyConfig,\n    IScrollStrategy\n} from './scroll/index';\n\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList: IConnectedPosition[] = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('cdk-connected-overlay-scroll-strategy');\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay: Overlay):\n    () => IScrollStrategy {\n    return (config?: IRepositionScrollStrategyConfig) => overlay.scrollStrategies.reposition(config);\n}\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n@Directive({\n    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n    exportAs: 'cdkOverlayOrigin'\n})\nexport class CdkOverlayOrigin {\n    constructor(\n        /** Reference to the element on which the directive is applied. */\n        public elementRef: ElementRef) { }\n}\n\n\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n@Directive({\n    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n    exportAs: 'cdkConnectedOverlay'\n})\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\n    /** Origin for the connected overlay. */\n    @Input('cdkConnectedOverlayOrigin') origin: CdkOverlayOrigin;\n\n    /** Registered connected position pairs. */\n    @Input('cdkConnectedOverlayPositions') positions: IConnectedPosition[];\n\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    @Input('cdkConnectedOverlayOffsetX')\n    get offsetX(): number { return this._offsetX; }\n    set offsetX(offsetX: number) {\n        this._offsetX = offsetX;\n\n        if (this._position) {\n            this._setPositions(this._position);\n        }\n    }\n\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    @Input('cdkConnectedOverlayOffsetY')\n    get offsetY() { return this._offsetY; }\n    set offsetY(offsetY: number) {\n        this._offsetY = offsetY;\n\n        if (this._position) {\n            this._setPositions(this._position);\n        }\n    }\n\n    /** The width of the overlay panel. */\n    @Input('cdkConnectedOverlayWidth') width: number | string;\n\n    /** The height of the overlay panel. */\n    @Input('cdkConnectedOverlayHeight') height: number | string;\n\n    /** The min width of the overlay panel. */\n    @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\n\n    /** The min height of the overlay panel. */\n    @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\n\n    /** The custom class to be set on the backdrop element. */\n    @Input('cdkConnectedOverlayBackdropClass') backdropClass: string;\n\n    /** Margin between the overlay and the viewport edges. */\n    @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\n\n    /** Strategy to be used when handling scroll events while the overlay is open. */\n    @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: IScrollStrategy =\n        this._scrollStrategy();\n\n    /** Whether the overlay is open. */\n    @Input('cdkConnectedOverlayOpen') open: boolean = false;\n\n    /** Whether or not the overlay should attach a backdrop. */\n    @Input('cdkConnectedOverlayHasBackdrop')\n    get hasBackdrop() { return this._hasBackdrop; }\n    set hasBackdrop(value: any) { this._hasBackdrop = coerceBooleanProperty(value); }\n\n    /** Whether or not the overlay should be locked when scrolling. */\n    @Input('cdkConnectedOverlayLockPosition')\n    get lockPosition() { return this._lockPosition; }\n    set lockPosition(value: any) { this._lockPosition = coerceBooleanProperty(value); }\n\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    @Input('cdkConnectedOverlayFlexibleDimensions')\n    get flexibleDiemsions() { return this._flexibleDimensions; }\n    set flexibleDiemsions(value: boolean) { this._flexibleDimensions = coerceBooleanProperty(value); }\n\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    @Input('cdkConnectedOverlayGrowAfterOpen')\n    get growAfterOpen() { return this._growAfterOpen; }\n    set growAfterOpen(value: boolean) { this._growAfterOpen = coerceBooleanProperty(value); }\n\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    @Input('cdkConnectedOverlayPush')\n    get push() { return this._push; }\n    set push(value: boolean) { this._push = coerceBooleanProperty(value); }\n\n    /** Event emitted when the backdrop is clicked. */\n    @Output() backdropClick = new EventEmitter<MouseEvent>();\n\n    /** Event emitted when the position has changed. */\n    @Output() positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n\n    /** Event emitted when the overlay has been attached. */\n    @Output() attach = new EventEmitter<void>();\n\n    /** Event emitted when the overlay has been detached. */\n    @Output() detach = new EventEmitter<void>();\n\n    private _overlayRef: OverlayRef;\n    private _templatePortal: TemplatePortal;\n    private _hasBackdrop = false;\n    private _lockPosition = false;\n    private _growAfterOpen = false;\n    private _flexibleDimensions = false;\n    private _push = false;\n    private _backdropSubscription = Subscription.EMPTY;\n    private _offsetX: number;\n    private _offsetY: number;\n    private _position: FlexibleConnectedPositionStrategy;\n\n    constructor(\n        private _overlay: Overlay,\n        templateRef: TemplateRef<any>,\n        viewContainerRef: ViewContainerRef,\n        @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) private _scrollStrategy,\n        @Optional() private _dir: Directionality) {\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    }\n\n    /** The associated overlay reference. */\n    get overlayRef(): OverlayRef {\n        return this._overlayRef;\n    }\n\n    /** The element's layout direction. */\n    get dir(): Direction {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n\n    ngOnDestroy() {\n        this._destroyOverlay();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this._position) {\n            if (changes['positions']) { //tslint:disable-line\n                this._position.withPositions(this.positions);\n            }\n\n            if (changes['lockPosition']) { //tslint:disable-line\n                this._position.withLockedPosition(this.lockPosition);\n            }\n\n            if (changes['origin']) { //tslint:disable-line\n                this._position.setOrigin(this.origin.elementRef);\n\n                if (this.open) {\n                    this._position.apply();\n                }\n            }\n        }\n\n        if (changes['open']) { //tslint:disable-line\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n\n    /** Creates an overlay */\n    private _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n\n        this._overlayRef = this._overlay.create(this._buildConfig());\n    }\n\n    /** Builds the overlay config based on the directive's inputs */\n    private _buildConfig(): OverlayConfig {\n        const positionStrategy = this._position = this._createPositionStrategy();\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n\n        return overlayConfig;\n    }\n\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this.origin.elementRef)\n            .withFlexibleDimensions(this.flexibleDiemsions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition);\n\n        this._setPositions(strategy);\n        strategy.positionChanges.subscribe((position) => this.positionChange.emit(position));\n\n        return strategy;\n    }\n\n    /**\n     * Sets the primary and fallback positions of a positions strategy,\n     * based on the current directive inputs.\n     */\n    private _setPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n        const positions: IConnectedPosition[] = this.positions.map((pos) => ({\n            originX: pos.originX,\n            originY: pos.originY,\n            overlayX: pos.overlayX,\n            overlayY: pos.overlayY,\n            offsetX: pos.offsetX || this.offsetX,\n            offsetY: pos.offsetY || this.offsetY\n        }));\n\n        positionStrategy.withPositions(positions);\n    }\n\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    private _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n\n            this._overlayRef!.keydownEvents().subscribe((event: KeyboardEvent) => { //tslint:disable-line\n                if (event.keyCode === ESCAPE) {\n                    this._detachOverlay();\n                }\n            });\n        } else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight\n            });\n        }\n\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n            this.attach.emit();\n        }\n\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe((event) => {\n                this.backdropClick.emit(event);\n            });\n        }\n    }\n\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    private _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this.detach.emit();\n        }\n\n        this._backdropSubscription.unsubscribe();\n    }\n\n    /** Destroys the overlay created by this directive. */\n    private _destroyOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n\n        this._backdropSubscription.unsubscribe();\n    }\n}\n\n\n/** @docs-private */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n","\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  Injector,\n  NgZone\n} from '@angular/core';\nimport {Directionality} from '@ptsecurity/cdk/bidi';\nimport {DomPortalOutlet} from '@ptsecurity/cdk/portal';\n\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayContainer} from './overlay-container';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {ScrollStrategyOptions} from './scroll/index';\n\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\n// it needs is different based on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n@Injectable()\nexport class Overlay {\n  private _appRef: ApplicationRef;\n\n  constructor(\n              /** Scrolling strategies that can be used when creating an overlay. */\n              public scrollStrategies: ScrollStrategyOptions,\n              private _overlayContainer: OverlayContainer,\n              private _componentFactoryResolver: ComponentFactoryResolver,\n              private _positionBuilder: OverlayPositionBuilder,\n              private _keyboardDispatcher: OverlayKeyboardDispatcher,\n              private _injector: Injector,\n              private _ngZone: NgZone,\n              @Inject(DOCUMENT) private _document: any,\n              private _directionality: Directionality) { }\n\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(config?: OverlayConfig): OverlayRef {\n    const host = this._createHostElement();\n    const pane = this._createPaneElement(host);\n    const portalOutlet = this._createPortalOutlet(pane);\n    const overlayConfig = new OverlayConfig(config);\n\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone,\n      this._keyboardDispatcher, this._document);\n  }\n\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n  position(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(host: HTMLElement): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n\n    return pane;\n  }\n\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n  private _createHostElement(): HTMLElement {\n    const host = this._document.createElement('div');\n    this._overlayContainer.getContainerElement().appendChild(host);\n\n    return host;\n  }\n\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\n    }\n\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n}\n","import {DOCUMENT} from '@angular/common';\nimport {ElementRef, Inject, Injectable, Optional} from '@angular/core';\nimport {Platform} from '@ptsecurity/cdk/platform';\nimport {ViewportRuler} from '@ptsecurity/cdk/scrolling';\n\nimport {IOriginConnectionPosition, IOverlayConnectionPosition} from './connected-position';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {GlobalPositionStrategy} from './global-position-strategy';\n\n\n/** Builder for overlay position strategy. */\n@Injectable({providedIn: 'root'})\nexport class OverlayPositionBuilder {\n    constructor(\n        private _viewportRuler: ViewportRuler,\n        @Inject(DOCUMENT) private _document: any,\n        // @deletion-target 7.0.0 `_platform` parameter to be made required.\n        @Optional() private _platform?: Platform) { }\n\n    /**\n     * Creates a global position strategy.\n     */\n    global(): GlobalPositionStrategy {\n        return new GlobalPositionStrategy();\n    }\n\n    /**\n     * Creates a relative position strategy.\n     * @param elementRef\n     * @param originPos\n     * @param overlayPos\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * @deletion-target 7.0.0\n     */\n    connectedTo(\n        elementRef: ElementRef,\n        originPos: IOriginConnectionPosition,\n        overlayPos: IOverlayConnectionPosition): ConnectedPositionStrategy {\n\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler,\n            this._document);\n    }\n\n    /**\n     * Creates a flexible position strategy.\n     * @param elementRef\n     */\n    flexibleConnectedTo(elementRef: ElementRef | HTMLElement): FlexibleConnectedPositionStrategy {\n        return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document,\n            this._platform);\n    }\n\n}\n","import {IOverlayReference} from '../overlay-reference';\n\nimport {IPositionStrategy} from './position-strategy';\n\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements IPositionStrategy {\n    /** The overlay to which this strategy is attached. */\n    private _overlayRef: IOverlayReference;\n    private _cssPosition: string = 'static';\n    private _topOffset: string = '';\n    private _bottomOffset: string = '';\n    private _leftOffset: string = '';\n    private _rightOffset: string = '';\n    private _alignItems: string = '';\n    private _justifyContent: string = '';\n    private _width: string = '';\n    private _height: string = '';\n\n    attach(overlayRef: IOverlayReference): void {\n        const config = overlayRef.getConfig();\n\n        this._overlayRef = overlayRef;\n\n        if (this._width && !config.width) {\n            overlayRef.updateSize({width: this._width});\n        }\n\n        if (this._height && !config.height) {\n            overlayRef.updateSize({height: this._height});\n        }\n\n        overlayRef.hostElement.classList.add('cdk-global-overlay-wrapper');\n    }\n\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value: string = ''): this {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n\n        return this;\n    }\n\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value: string = ''): this {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n\n        return this;\n    }\n\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value: string = ''): this {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n\n        return this;\n    }\n\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value: string = ''): this {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n\n        return this;\n    }\n\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @deletion-target 7.0.0\n     */\n    width(value: string = ''): this {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({width: value});\n        } else {\n            this._width = value;\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @deletion-target 7.0.0\n     */\n    height(value: string = ''): this {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({height: value});\n        } else {\n            this._height = value;\n        }\n\n        return this;\n    }\n\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset: string = ''): this {\n        this.left(offset);\n        this._justifyContent = 'center';\n\n        return this;\n    }\n\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset: string = ''): this {\n        this.top(offset);\n        this._alignItems = 'center';\n\n        return this;\n    }\n\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply(): void {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef.hasAttached()) {\n            return;\n        }\n\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n\n        styles.position = this._cssPosition;\n        styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n        styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n\n        if (config.width === '100%') {\n            parentStyles.justifyContent = 'flex-start';\n        } else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            } else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        } else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n\n        parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n    }\n\n    /**\n     * Noop implemented as a part of the IPositionStrategy interface.\n     * @docs-private\n     */\n    dispose(): void { } //tslint:disable-line\n}\n","import {ElementRef} from '@angular/core';\nimport {Direction} from '@ptsecurity/cdk/bidi';\nimport {Platform} from '@ptsecurity/cdk/platform';\nimport {CdkScrollable, ViewportRuler} from '@ptsecurity/cdk/scrolling';\nimport {Observable} from 'rxjs';\n\nimport {IOverlayReference} from '../overlay-reference';\n\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    IOriginConnectionPosition,\n    IOverlayConnectionPosition,\n} from './connected-position';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {IPositionStrategy} from './position-strategy';\n\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @deletion-target 7.0.0\n */\nexport class ConnectedPositionStrategy implements IPositionStrategy {\n    /**\n     * Reference to the underlying position strategy to which all the API calls are proxied.\n     * @docs-private\n     */\n    _positionStrategy: FlexibleConnectedPositionStrategy;\n\n    /** Ordered list of preferred positions, from most to least desirable. */\n    _preferredPositions: ConnectionPositionPair[] = [];\n\n    /** The overlay to which this strategy is attached. */\n    private _overlayRef: IOverlayReference;\n\n    private _direction: Direction | null;\n\n    /** Whether the we're dealing with an RTL context */\n    get _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n\n    /** Emits an event when the connection point changes. */\n    get onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n        return this._positionStrategy.positionChanges;\n    }\n\n    constructor(\n        originPos: IOriginConnectionPosition,\n        overlayPos: IOverlayConnectionPosition,\n        connectedTo: ElementRef,\n        viewportRuler: ViewportRuler,\n        document: Document,\n        // @deletion-target 7.0.0 `platform` parameter to be made required.\n        platform?: Platform) {\n\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy =\n            new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform)\n                .withFlexibleDimensions(false)\n                .withPush(false)\n                .withViewportMargin(0);\n\n        this.withFallbackPosition(originPos, overlayPos);\n    }\n\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions(): ConnectionPositionPair[] {\n        return this._preferredPositions;\n    }\n\n    /** Attach this position strategy to an overlay. */\n    attach(overlayRef: IOverlayReference): void {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n\n    /** Disposes all resources used by the position strategy. */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n\n    /** @docs-private */\n    detach() {\n        this._positionStrategy.detach();\n    }\n\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * @docs-private\n     */\n    apply(): void {\n        this._positionStrategy.apply();\n    }\n\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    recalculateLastPosition(): void {\n        this._positionStrategy.reapplyLastPosition();\n    }\n\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables: CdkScrollable[]) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n\n    /**\n     * Adds a new preferred fallback position.\n     * @param originPos\n     * @param overlayPos\n     */\n    withFallbackPosition(\n        originPos: IOriginConnectionPosition,\n        overlayPos: IOverlayConnectionPosition,\n        offsetX?: number,\n        offsetY?: number): this {\n\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n\n        return this;\n    }\n\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param dir New layout direction.\n     */\n    withDirection(dir: 'ltr' | 'rtl'): this {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        } else {\n            this._direction = dir;\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param offset New offset in the X axis.\n     */\n    withOffsetX(offset: number): this {\n        this._positionStrategy.withDefaultOffsetX(offset);\n\n        return this;\n    }\n\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param  offset New offset in the Y axis.\n     */\n    withOffsetY(offset: number): this {\n        this._positionStrategy.withDefaultOffsetY(offset);\n\n        return this;\n    }\n\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked: boolean): this {\n        this._positionStrategy.withLockedPosition(isLocked);\n\n        return this;\n    }\n\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param positions Position pairs to be set on the strategy.\n     */\n    withPositions(positions: ConnectionPositionPair[]): this {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n\n        return this;\n    }\n\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    setOrigin(origin: ElementRef): this {\n        this._positionStrategy.setOrigin(origin);\n\n        return this;\n    }\n}\n","import {ElementRef} from '@angular/core';\nimport {coerceCssPixelValue} from '@ptsecurity/cdk/coercion';\nimport {Platform} from '@ptsecurity/cdk/platform';\nimport {ViewportRuler, CdkScrollable} from '@ptsecurity/cdk/scrolling';\nimport {Observable, Subscription, Subject} from 'rxjs';\n\nimport {IOverlayReference} from '../overlay-reference';\n\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    ScrollingVisibility,\n    validateHorizontalPosition,\n    validateVerticalPosition\n} from './connected-position';\nimport {IPositionStrategy} from './position-strategy';\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\n\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class FlexibleConnectedPositionStrategy implements IPositionStrategy {\n\n    /** Ordered list of preferred positions, from most to least desirable. */\n    _preferredPositions: ConnectionPositionPair[] = [];\n\n    /** Observable sequence of position changes. */\n    positionChanges: Observable<ConnectedOverlayPositionChange> = Observable.create((observer) => {\n        const subscription = this._positionChanges.subscribe(observer);\n        this._positionChangeSubscriptions++;\n\n        return () => {\n            subscription.unsubscribe();\n            this._positionChangeSubscriptions--;\n        };\n    });\n\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n\n    /** The overlay to which this strategy is attached. */\n    private _overlayRef: IOverlayReference;\n\n    /** Whether we're performing the very first positioning of the overlay. */\n    private _isInitialRender = true;\n\n    /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n    private _lastBoundingBoxSize = {width: 0, height: 0};\n\n    /** Whether the overlay was pushed in a previous positioning. */\n    private _isPushed = false;\n\n    /** Whether the overlay can be pushed on-screen on the initial open. */\n    private _canPush = true;\n\n    /** Whether the overlay can grow via flexible width/height after the initial open. */\n    private _growAfterOpen = false;\n\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    private _hasFlexibleDimensions = true;\n\n    /** Whether the overlay position is locked. */\n    private _positionLocked = false;\n\n    /** Cached origin dimensions */\n    private _originRect: ClientRect;\n\n    /** Cached overlay dimensions */\n    private _overlayRect: ClientRect;\n\n    /** Cached viewport dimensions */\n    private _viewportRect: ClientRect;\n\n    /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n    private _viewportMargin = 0;\n\n    /** The Scrollable containers used to check scrollable view properties on position change. */\n    private scrollables: CdkScrollable[] = [];\n\n    /** The origin element against which the overlay will be positioned. */\n    private _origin: HTMLElement;\n\n    /** The overlay pane element. */\n    private _pane: HTMLElement;\n\n    /** Whether the strategy has been disposed of already. */\n    private _isDisposed: boolean;\n\n    /**\n     * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n     * within the viewport.\n     */\n    private _boundingBox: HTMLElement | null;\n\n    /** The last position to have been calculated as the best fit position. */\n    private _lastPosition: IConnectedPosition | null;\n\n    /** Subject that emits whenever the position changes. */\n    private _positionChanges = new Subject<ConnectedOverlayPositionChange>();\n\n    /** Subscription to viewport size changes. */\n    private _resizeSubscription = Subscription.EMPTY;\n\n    /** Default offset for the overlay along the x axis. */\n    private _offsetX = 0;\n\n    /** Default offset for the overlay along the y axis. */\n    private _offsetY = 0;\n\n    /** Selector to be used when finding the elements on which to set the transform origin. */\n    private _transformOriginSelector: string;\n\n    /** Amount of subscribers to the `positionChanges` stream. */\n    private _positionChangeSubscriptions = 0;\n\n    constructor(\n        connectedTo: ElementRef | HTMLElement,\n        private _viewportRuler: ViewportRuler,\n        private _document: Document,\n        // @deletion-target 7.0.0 `_platform` parameter to be made required.\n        private _platform?: Platform) {\n        this.setOrigin(connectedTo);\n    }\n\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef: IOverlayReference): void {\n        if (this._overlayRef && overlayRef !== this._overlayRef) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n\n        this._validatePositions();\n\n        overlayRef.hostElement.classList.add('cdk-overlay-connected-position-bounding-box');\n\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => this.apply());\n    }\n\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply(): void {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || (this._platform && !this._platform.isBrowser)) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n\n            return;\n        }\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._origin.getBoundingClientRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits: IFlexibleFit[] = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback: IFallbackPosition | undefined;\n\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) { //tslint:disable-line\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, pos); //tslint:disable-line\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos); //tslint:disable-line\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos); //tslint:disable-line\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n\n                continue;\n            }\n\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\n            }\n        }\n\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit: IFlexibleFit | null = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score =\n                    fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n\n            this._isPushed = false;\n            this._applyPosition(bestFit!.position, bestFit!.origin); //tslint:disable-line\n\n            return;\n        }\n\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            this._isPushed = true;\n            this._applyPosition(fallback!.position, fallback!.originPoint); //tslint:disable-line\n\n            return;\n        }\n\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback!.position, fallback!.originPoint); //tslint:disable-line\n    }\n\n    detach() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (!this._isDisposed) {\n            this.detach();\n            this._boundingBox = null;\n            this._positionChanges.complete();\n            this._isDisposed = true;\n        }\n    }\n\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition(): void {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._origin.getBoundingClientRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables: CdkScrollable[]) {\n        this.scrollables = scrollables;\n    }\n\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions: IConnectedPosition[]): this {\n        this._preferredPositions = positions;\n\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition!) === -1) { //tslint:disable-line\n            this._lastPosition = null;\n        }\n\n        this._validatePositions();\n\n        return this;\n    }\n\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin: number): this {\n        this._viewportMargin = margin;\n\n        return this;\n    }\n\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true): this {\n        this._hasFlexibleDimensions = flexibleDimensions;\n\n        return this;\n    }\n\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true): this {\n        this._growAfterOpen = growAfterOpen;\n\n        return this;\n    }\n\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true): this {\n        this._canPush = canPush;\n\n        return this;\n    }\n\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true): this {\n        this._positionLocked = isLocked;\n\n        return this;\n    }\n\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    setOrigin(origin: ElementRef | HTMLElement): this {\n        this._origin = origin instanceof ElementRef ? origin.nativeElement : origin;\n\n        return this;\n    }\n\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset: number): this {\n        this._offsetX = offset;\n\n        return this;\n    }\n\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset: number): this {\n        this._offsetY = offset;\n\n        return this;\n    }\n\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector: string): this {\n        this._transformOriginSelector = selector;\n\n        return this;\n    }\n\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    private _getOriginPoint(originRect: ClientRect, pos: IConnectedPosition): IPoint {\n        let x: number;\n        if (pos.originX === 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2); //tslint:disable-line\n        } else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX === 'start' ? startX : endX;\n        }\n\n        let y: number;\n        if (pos.originY === 'center') {\n            y = originRect.top + (originRect.height / 2); //tslint:disable-line\n        } else {\n            y = pos.originY === 'top' ? originRect.top : originRect.bottom;\n        }\n\n        return {x, y};\n    }\n\n\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    private _getOverlayPoint( //tslint:disable-line\n        originPoint: IPoint,\n        overlayRect: ClientRect,\n        pos: IConnectedPosition): IPoint {\n\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX: number;\n        if (pos.overlayX === 'center') {\n            overlayStartX = -overlayRect.width / 2; //tslint:disable-line\n        } else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        } else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n\n        let overlayStartY: number;\n        if (pos.overlayY === 'center') {\n            overlayStartY = -overlayRect.height / 2; //tslint:disable-line\n        } else {\n            overlayStartY = pos.overlayY === 'top' ? 0 : -overlayRect.height;\n        }\n\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY\n        };\n    }\n\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    private _getOverlayFit(point: IPoint, overlay: ClientRect, viewport: ClientRect,\n                           position: IConnectedPosition): IOverlayFit {\n\n        let {x, y} = point;\n        let offsetX = this._getOffset(position, 'x'); //tslint:disable-line\n        let offsetY = this._getOffset(position, 'y'); //tslint:disable-line\n\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n\n        if (offsetY) {\n            y += offsetY;\n        }\n\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x; //tslint:disable-line\n        let rightOverflow = (x + overlay.width) - viewport.width; //tslint:disable-line\n        let topOverflow = 0 - y; //tslint:disable-line\n        let bottomOverflow = (y + overlay.height) - viewport.height; //tslint:disable-line\n\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow); //tslint:disable-line\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow); //tslint:disable-line\n        let visibleArea = visibleWidth * visibleHeight; //tslint:disable-line\n\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth === overlay.width\n        };\n    }\n\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlat at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    private _canFitWithFlexibleDimensions(fit: IOverlayFit, point: IPoint, viewport: ClientRect) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = this._overlayRef.getConfig().minHeight;\n            const minWidth = this._overlayRef.getConfig().minWidth;\n\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n\n            return verticalFit && horizontalFit;\n        }\n    }\n\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start The starting point from which the overlay is pushed.\n     * @param overlay The overlay dimensions.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    private _pushOverlayOnScreen(start: IPoint, overlay: ClientRect): IPoint {\n        const viewport = this._viewportRect;\n\n        // Determine how much the overlay goes outside the viewport on each side, which we'll use to\n        // decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n        const overflowTop = Math.max(viewport.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - start.x, 0);\n\n        // Amount by which to push the overlay in each direction such that it remains on-screen.\n        let pushX, pushY = 0; //tslint:disable-line\n\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        } else {\n            pushX = viewport.left - start.x;\n        }\n\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        } else {\n            pushY = viewport.top - start.y;\n        }\n\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY\n        };\n    }\n\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    private _applyPosition(position: IConnectedPosition, originPoint: IPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChangeSubscriptions > 0) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n\n        this._isInitialRender = false;\n    }\n\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    private _setTransformOrigin(position: IConnectedPosition) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n\n        const elements: NodeListOf<HTMLElement> =\n            this._boundingBox!.querySelectorAll(this._transformOriginSelector); //tslint:disable-line\n        let xOrigin: 'left' | 'right' | 'center';\n        let yOrigin: 'top' | 'bottom' | 'center' = position.overlayY; //tslint:disable-line\n\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        } else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        } else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n\n        for (let i = 0; i < elements.length; i++) { //tslint:disable-line\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    private _calculateBoundingBoxRect(origin: IPoint, position: IConnectedPosition): IBoundingBoxRect {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom; //tslint:disable-line\n\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.bottom - origin.y;\n        } else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2; //tslint:disable-line\n            height = viewport.height - bottom + this._viewportMargin;\n        } else {\n            // If neither top nor bottom, it means that the overlay\n            // is vertically centered on the origin point.\n            const smallestDistanceToViewportEdge =\n                Math.min(viewport.bottom - origin.y, origin.y - viewport.left);\n            const previousHeight = this._lastBoundingBoxSize.height;\n\n            height = smallestDistanceToViewportEdge * 2; //tslint:disable-line\n            top = origin.y - smallestDistanceToViewportEdge;\n\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2); //tslint:disable-line\n            }\n        }\n\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge =\n            (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge =\n            (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n\n        let width, left, right; //tslint:disable-line\n\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.right - origin.x + this._viewportMargin;\n            width = origin.x - viewport.left;\n        } else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        } else {\n            // If neither start nor end, it means that the overlay\n            // is horizontally centered on the origin point.\n            const smallestDistanceToViewportEdge =\n                Math.min(viewport.right - origin.x, origin.x - viewport.top);\n            const previousWidth = this._lastBoundingBoxSize.width;\n\n            width = smallestDistanceToViewportEdge * 2; //tslint:disable-line\n            left = origin.x - smallestDistanceToViewportEdge;\n\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2); //tslint:disable-line\n            }\n        }\n\n        return {top, left, bottom, right, width, height};\n    }\n\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    private _setBoundingBoxStyles(origin: IPoint, position: IConnectedPosition): void {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n\n        const styles = {} as CSSStyleDeclaration;\n\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = '';\n            styles.width = styles.height = '100%';\n        } else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            } else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            } else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n\n        this._lastBoundingBoxSize = boundingBoxRect;\n\n        extendStyles(this._boundingBox!.style, styles); //tslint:disable-line\n    }\n\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    private _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox!.style, { //tslint:disable-line\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: ''\n        } as CSSStyleDeclaration);\n    }\n\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    private _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: ''\n        } as CSSStyleDeclaration);\n    }\n\n    /** Sets positioning styles to the overlay element. */\n    private _setOverlayElementStyles(originPoint: IPoint, position: IConnectedPosition): void {\n        const styles = {} as CSSStyleDeclaration;\n\n        if (this._hasExactPosition()) {\n            extendStyles(styles, this._getExactOverlayY(position, originPoint));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint));\n        } else {\n            styles.position = 'static';\n        }\n\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x'); //tslint:disable-line\n        let offsetY = this._getOffset(position, 'y'); //tslint:disable-line\n\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n\n        styles.transform = transformString.trim();\n\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n            styles.maxHeight = '';\n        }\n\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n            styles.maxWidth = '';\n        }\n\n        extendStyles(this._pane.style, styles);\n    }\n\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    private _getExactOverlayY(position: IConnectedPosition, originPoint: IPoint) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = {top: null, bottom: null} as CSSStyleDeclaration; //tslint:disable-line\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\n        }\n\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        } else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n\n        return styles;\n    }\n\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    private _getExactOverlayX(position: IConnectedPosition, originPoint: IPoint) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = {left: null, right: null} as CSSStyleDeclaration; //tslint:disable-line\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\n        }\n\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty: 'left' | 'right';\n\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        } else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        } else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n\n        return styles;\n    }\n\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    private _getScrollVisibility(): ScrollingVisibility {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._origin.getBoundingClientRect();\n        const overlayBounds =  this._pane.getBoundingClientRect();\n\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this.scrollables.map((scrollable) => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds)\n        };\n    }\n\n    /** Subtracts the amount that an element is overflowing on an axis from it's length. */\n    private _subtractOverflows(length: number, ...overflows: number[]): number {\n        return overflows.reduce((currentValue: number, currentOverflow: number) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    private _getNarrowedViewportRect(): ClientRect {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n        return {\n            top:    scrollPosition.top + this._viewportMargin,\n            left:   scrollPosition.left + this._viewportMargin,\n            right:  scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width:  width  - (2 * this._viewportMargin), //tslint:disable-line\n            height: height - (2 * this._viewportMargin) //tslint:disable-line\n        };\n    }\n\n    /** Whether the we're dealing with an RTL context */\n    private _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    private _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n\n    /** Retrieves the offset of a position along the x or y axis. */\n    private _getOffset(position: IConnectedPosition, axis: 'x' | 'y') {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n\n    /** Validates that the current position match the expected values. */\n    private _validatePositions(): void {\n        if (!this._preferredPositions.length) {\n            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        }\n\n        // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n        this._preferredPositions.forEach((pair) => {\n            validateHorizontalPosition('originX', pair.originX);\n            validateVerticalPosition('originY', pair.originY);\n            validateHorizontalPosition('overlayX', pair.overlayX);\n            validateVerticalPosition('overlayY', pair.overlayY);\n        });\n    }\n}\n\n/** A simple (x, y) coordinate. */\ninterface IPoint {\n    x: number;\n    y: number;\n}\n\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\ninterface IOverlayFit {\n    /** Whether the overlay fits completely in the viewport. */\n    isCompletelyWithinViewport: boolean;\n\n    /** Whether the overlay fits in the viewport on the y-axis. */\n    fitsInViewportVertically: boolean;\n\n    /** Whether the overlay fits in the viewport on the x-axis. */\n    fitsInViewportHorizontally: boolean;\n\n    /** The total visible area (in px^2) of the overlay inside the viewport. */\n    visibleArea: number;\n}\n\n/** Record of the measurments determining whether an overlay will fit in a specific position. */\ninterface IFallbackPosition {\n    position: IConnectedPosition;\n    originPoint: IPoint;\n    overlayPoint: IPoint;\n    overlayFit: IOverlayFit;\n    overlayRect: ClientRect;\n}\n\n/** Position and size of the overlay sizing wrapper for a specific position. */\ninterface IBoundingBoxRect {\n    top: number;\n    left: number;\n    bottom: number;\n    right: number;\n    height: number;\n    width: number;\n}\n\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\ninterface IFlexibleFit {\n    position: IConnectedPosition;\n    origin: IPoint;\n    overlayRect: ClientRect;\n    boundingBoxRect: IBoundingBoxRect;\n}\n\n/** A connected position as specified by the user. */\nexport interface IConnectedPosition {\n    originX: 'start' | 'center' | 'end';\n    originY: 'top' | 'center' | 'bottom';\n\n    overlayX: 'start' | 'center' | 'end';\n    overlayY: 'top' | 'center' | 'bottom';\n\n    weight?: number;\n    offsetX?: number;\n    offsetY?: number;\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(dest: CSSStyleDeclaration, source: CSSStyleDeclaration): CSSStyleDeclaration {\n    for (let key in source) { //tslint:disable-line\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n\n    return dest;\n}\n","\n\nimport {ComponentRef, EmbeddedViewRef, NgZone} from '@angular/core';\nimport {Direction, Directionality} from '@ptsecurity/cdk/bidi';\nimport {coerceCssPixelValue, coerceArray} from '@ptsecurity/cdk/coercion';\nimport {ComponentPortal, Portal, IPortalOutlet, TemplatePortal} from '@ptsecurity/cdk/portal';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\n\n\n/** An object where all of its properties cannot be written. */\nexport type ImmutableObject<T> = {\n    readonly [P in keyof T]: T[P];\n};\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements IPortalOutlet {\n    /** Stream of keydown events dispatched to this overlay. */\n    _keydownEvents = new Subject<KeyboardEvent>();\n\n    private _backdropElement: HTMLElement | null = null;\n    private _backdropClick: Subject<MouseEvent> = new Subject();\n    private _attachments = new Subject<void>();\n    private _detachments = new Subject<void>();\n\n    constructor(\n        private _portalOutlet: IPortalOutlet,\n        private _host: HTMLElement,\n        private _pane: HTMLElement,\n        private _config: ImmutableObject<OverlayConfig>,\n        private _ngZone: NgZone,\n        private _keyboardDispatcher: OverlayKeyboardDispatcher,\n        private _document: Document) {\n\n        if (_config.scrollStrategy) {\n            _config.scrollStrategy.attach(this);\n        }\n    }\n\n    /** The overlay's HTML element */\n    get overlayElement(): HTMLElement {\n        return this._pane;\n    }\n\n    /** The overlay's backdrop HTML element. */\n    get backdropElement(): HTMLElement | null {\n        return this._backdropElement;\n    }\n\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement(): HTMLElement {\n        return this._host;\n    }\n\n    attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n\n    attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n\n    attach(portal: any): any;\n\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal: Portal<any>): any {\n        let attachResult = this._portalOutlet.attach(portal); //tslint:disable-line\n\n        if (this._config.positionStrategy) {\n            this._config.positionStrategy.attach(this);\n        }\n\n        // Update the pane element with the given configuration.\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.enable();\n        }\n\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                // The overlay could've been detached before the zone has stabilized.\n                if (this.hasAttached()) {\n                    this.updatePosition();\n                }\n            });\n\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n\n        return attachResult;\n    }\n\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach(): any {\n        if (!this.hasAttached()) {\n            return;\n        }\n\n        this.detachBackdrop();\n\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n\n        if (this._config.positionStrategy && this._config.positionStrategy.detach) {\n            this._config.positionStrategy.detach();\n        }\n\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n\n        const detachmentResult = this._portalOutlet.detach();\n\n        // Only emit after everything is detached.\n        this._detachments.next();\n\n        // Remove this overlay from keyboard dispatcher tracking\n        this._keyboardDispatcher.remove(this);\n\n        return detachmentResult;\n    }\n\n    /** Cleans up the overlay from the DOM. */\n    dispose(): void {\n        const isAttached = this.hasAttached();\n\n        if (this._config.positionStrategy) {\n            this._config.positionStrategy.dispose();\n        }\n\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n\n        this.detachBackdrop();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = null!; //tslint:disable-line\n        }\n\n        this._pane = null!; //tslint:disable-line\n\n        if (isAttached) {\n            this._detachments.next();\n        }\n\n        this._detachments.complete();\n    }\n\n    /** Whether the overlay has attached content. */\n    hasAttached(): boolean {\n        return this._portalOutlet.hasAttached();\n    }\n\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick(): Observable<MouseEvent> {\n        return this._backdropClick.asObservable();\n    }\n\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments(): Observable<void> {\n        return this._attachments.asObservable();\n    }\n\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments(): Observable<void> {\n        return this._detachments.asObservable();\n    }\n\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents(): Observable<KeyboardEvent> {\n        return this._keydownEvents.asObservable();\n    }\n\n    /** Gets the the current overlay configuration, which is immutable. */\n    getConfig(): OverlayConfig {\n        return this._config;\n    }\n\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._config.positionStrategy) {\n            this._config.positionStrategy.apply();\n        }\n    }\n\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig: IOverlaySizeConfig) {\n        this._config = {...this._config, ...sizeConfig};\n        this._updateElementSize();\n    }\n\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir: Direction | Directionality) {\n        this._config = {...this._config, direction: dir};\n        this._updateElementDirection();\n    }\n\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection(): Direction {\n        const direction = this._config.direction;\n\n        if (!direction) {\n            return 'ltr';\n        }\n\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n\n    /** Updates the text direction of the overlay panel. */\n    private _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n\n    /** Updates the size of the overlay element based on the overlay config. */\n    private _updateElementSize() {\n        const style = this._pane.style;\n\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n\n    /** Toggles the pointer events for the overlay pane element. */\n    private _togglePointerEvents(enablePointer: boolean) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    }\n\n    /** Attaches a backdrop for this overlay. */\n    private _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement!.insertBefore(this._backdropElement, this._host); //tslint:disable-line\n\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click',\n            (event: MouseEvent) => this._backdropClick.next(event));\n\n        // Add class to fade-in the backdrop after one frame.\n        if (requestAnimationFrame !== undefined) {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        } else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    private _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode!.appendChild(this._host); //tslint:disable-line\n        }\n    }\n\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop(): void {\n        let backdropToDetach = this._backdropElement; //tslint:disable-line\n\n        if (backdropToDetach) {\n            let finishDetach = () => { //tslint:disable-line\n                // It may not be attached to anything in certain cases (e.g. unit tests).\n                if (backdropToDetach && backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n\n                // It is possible that a new portal has been attached to this overlay since we started\n                // removing the backdrop. If that is the case, only clear the backdrop reference if it\n                // is still the same instance that we started to remove.\n                if (this._backdropElement === backdropToDetach) {\n                    this._backdropElement = null;\n                }\n            };\n\n            backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n\n            backdropToDetach.addEventListener('transitionend', finishDetach);\n\n            // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n            // In this case we make it unclickable and we try to remove it after a delay.\n            backdropToDetach.style.pointerEvents = 'none';\n\n            // Run this outside the Angular zone because there's nothing that Angular cares about.\n            // If it were to run inside the Angular zone, every test that used Overlay would have to be\n            // either async or fakeAsync.\n            this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500)); //tslint:disable-line\n        }\n    }\n\n    /** Toggles a single CSS class or an array of classes on an element. */\n    private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\n        const classList = element.classList;\n\n        coerceArray(cssClasses).forEach((cssClass) => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n        });\n    }\n}\n\n\n/** Size properties for an overlay. */\nexport interface IOverlaySizeConfig {\n    width?: number | string;\n    height?: number | string;\n    minWidth?: number | string;\n    minHeight?: number | string;\n    maxWidth?: number | string;\n    maxHeight?: number | string;\n}\n","\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf\n} from '@angular/core';\n\n\n/** Container inside which all overlays will render. */\n@Injectable({providedIn: 'root'})\nexport class OverlayContainer implements OnDestroy {\n  protected _containerElement: HTMLElement;\n\n  constructor(@Inject(DOCUMENT) protected _document: any) {}\n\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    const container = this._document.createElement('div');\n\n    container.classList.add('cdk-overlay-container');\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer,\n                                                   _document: any) {\n  return parentContainer || new OverlayContainer(_document);\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayContainer],\n    DOCUMENT as InjectionToken<any> // We need to use the InjectionToken somewhere to keep TS happy\n  ],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n","import {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf\n} from '@angular/core';\n\nimport {OverlayRef} from '../overlay-ref';\n\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayKeyboardDispatcher implements OnDestroy {\n\n  /** Currently attached overlays in the order they were attached. */\n  _attachedOverlays: OverlayRef[] = [];\n\n  private _document: Document;\n  private _isAttached: boolean;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    this._detach();\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayRef): void {\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      this._document.body.addEventListener('keydown', this._keydownListener, true);\n      this._isAttached = true;\n    }\n\n    this._attachedOverlays.push(overlayRef);\n  }\n\n  /** Remove an overlay from the list of attached overlay refs. */\n  remove(overlayRef: OverlayRef): void {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this._detach();\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  private _detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener, true);\n      this._isAttached = false;\n    }\n  }\n\n  /** Keyboard event listener that will be attached to the body. */\n  private _keydownListener = (event: KeyboardEvent) => {\n    if (this._attachedOverlays.length) {\n      // Dispatch the keydown event to the top overlay. We want to target the most recent overlay,\n      // rather than trying to match where the event came from, because some components might open\n      // an overlay, but keep focus on a trigger element (e.g. for select and autocomplete).\n      this._attachedOverlays[this._attachedOverlays.length - 1]._keydownEvents.next(event);\n    }\n  }\n}\n\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(\n    dispatcher: OverlayKeyboardDispatcher, _document: any) {\n  return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n  // If there is already an OverlayKeyboardDispatcher available, use that.\n  // Otherwise, provide a new one.\n  provide: OverlayKeyboardDispatcher,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n\n    // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n    // of the type expected by Angular\n    DOCUMENT as InjectionToken<any>\n  ],\n  useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n","import {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {ScrollDispatcher, ViewportRuler} from '@ptsecurity/cdk/scrolling';\n\n\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {CloseScrollStrategy, ICloseScrollStrategyConfig} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {\n  RepositionScrollStrategy,\n  IRepositionScrollStrategyConfig\n} from './reposition-scroll-strategy';\n\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollStrategyOptions {\n  private _document: Document;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /** Do nothing on scroll. */\n  noop = () => new NoopScrollStrategy();\n\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n  close = (config?: ICloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher,\n      this._ngZone, this._viewportRuler, config)\n\n  /** Block scrolling. */\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n  reposition = (config?: IRepositionScrollStrategyConfig) => new RepositionScrollStrategy(\n      this._scrollDispatcher, this._viewportRuler, this._ngZone, config)\n}\n","import {NgZone} from '@angular/core';\nimport {ScrollDispatcher, ViewportRuler} from '@ptsecurity/cdk/scrolling';\nimport {Subscription} from 'rxjs';\n\nimport {IOverlayReference} from '../overlay-reference';\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\n\nimport {IScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\n\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface IRepositionScrollStrategyConfig {\n    /** Time in milliseconds to throttle the scroll events. */\n    scrollThrottle?: number;\n\n    /** Whether to close the overlay once the user has scrolled away completely. */\n    autoClose?: boolean;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements IScrollStrategy {\n    private _scrollSubscription: Subscription|null = null;\n    private _overlayRef: IOverlayReference;\n\n    constructor(\n        private _scrollDispatcher: ScrollDispatcher,\n        private _viewportRuler: ViewportRuler,\n        private _ngZone: NgZone,\n        private _config?: IRepositionScrollStrategyConfig) { }\n\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef: IOverlayReference) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n\n        this._overlayRef = overlayRef;\n    }\n\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const {width, height} = this._viewportRuler.getViewportSize();\n\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\n\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n}\n","/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nexport function isElementScrolledOutsideView(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some((containerBounds) => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nexport function isElementClippedByScrolling(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some((scrollContainerRect) => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n","import {NgZone} from '@angular/core';\nimport {ScrollDispatcher, ViewportRuler} from '@ptsecurity/cdk/scrolling';\nimport {Subscription} from 'rxjs';\n\nimport {IOverlayReference} from '../overlay-reference';\n\nimport {IScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\n\n\n/**\n * Config options for the CloseScrollStrategy.\n */\nexport interface ICloseScrollStrategyConfig {\n    /** Amount of pixels the user has to scroll before the overlay is closed. */\n    threshold?: number;\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements IScrollStrategy {\n    private _scrollSubscription: Subscription|null = null;\n    private _overlayRef: IOverlayReference;\n    private _initialScrollPosition: number;\n\n    constructor(\n        private _scrollDispatcher: ScrollDispatcher,\n        private _ngZone: NgZone,\n        private _viewportRuler: ViewportRuler,\n        private _config?: ICloseScrollStrategyConfig) {}\n\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef: IOverlayReference) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n\n        this._overlayRef = overlayRef;\n    }\n\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n\n        const stream = this._scrollDispatcher.scrolled(0);\n\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) { //tslint:disable-line\n                    this._detach();\n                } else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        } else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n\n    /** Detaches the overlay ref and disables the scroll strategy. */\n    private _detach = () => {\n        this.disable();\n\n        if (this._overlayRef.hasAttached()) {\n            this._ngZone.run(() => this._overlayRef.detach());\n        }\n    }\n}\n","import {IOverlayReference} from '../overlay-reference';\n\n\n/**\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\n */\nexport interface IScrollStrategy {\n  /** Enable this scroll strategy (called when the attached overlay is attached to a portal). */\n  enable(): void;\n\n  /** Disable this scroll strategy (called when the attached overlay is detached from a portal). */\n  disable(): void;\n\n  /** Attaches this `ScrollStrategy` to an overlay. */\n  attach(overlayRef: IOverlayReference): void;\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nexport function getMatScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n","import {coerceCssPixelValue} from '@ptsecurity/cdk/coercion';\nimport {ViewportRuler} from '@ptsecurity/cdk/scrolling';\n\nimport {IScrollStrategy} from './scroll-strategy';\n\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements IScrollStrategy {\n  private _previousHTMLStyles = { top: '', left: '' };\n  private _previousScrollPosition: { top: number, left: number };\n  private _isEnabled = false;\n  private _document: Document;\n\n  constructor(private _viewportRuler: ViewportRuler, document: any) {\n    this._document = document;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach() { } // tslint:disable-line\n\n  /** Blocks page-level scroll while the attached overlay is open. */\n  enable() { // tslint:disable-line\n\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n\n  /** Unblocks page-level scroll while the attached overlay is open. */\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement;\n      const body = this._document.body;\n      const previousHtmlScrollBehavior = html.style['scrollBehavior'] || ''; // tslint:disable-line\n      const previousBodyScrollBehavior = body.style['scrollBehavior'] || ''; // tslint:disable-line\n\n      this._isEnabled = false;\n\n      html.style.left = this._previousHTMLStyles.left;\n      html.style.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      html.style['scrollBehavior'] = body.style['scrollBehavior'] = 'auto'; // tslint:disable-line\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      html.style['scrollBehavior'] = previousHtmlScrollBehavior; // tslint:disable-line\n      body.style['scrollBehavior'] = previousBodyScrollBehavior; // tslint:disable-line\n    }\n  }\n\n  private _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n    const viewport = this._viewportRuler.getViewportSize();\n\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n","import {Optional} from '@angular/core';\n\n\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface IOriginConnectionPosition {\n    originX: HorizontalConnectionPos;\n    originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface IOverlayConnectionPosition {\n    overlayX: HorizontalConnectionPos;\n    overlayY: VerticalConnectionPos;\n}\n\n/** The points of the origin element and the overlay element to connect. */\nexport class ConnectionPositionPair {\n    /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n    originX: HorizontalConnectionPos;\n    /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n    originY: VerticalConnectionPos;\n    /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n    overlayX: HorizontalConnectionPos;\n    /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n    overlayY: VerticalConnectionPos;\n\n    constructor(\n        origin: IOriginConnectionPosition,\n        overlay: IOverlayConnectionPosition,\n        public offsetX?: number,\n        public offsetY?: number) {\n\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nexport class ScrollingVisibility {\n    isOriginClipped: boolean;\n    isOriginOutsideView: boolean;\n    isOverlayClipped: boolean;\n    isOverlayOutsideView: boolean;\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nexport class ConnectedOverlayPositionChange {\n    constructor(\n        /** The position used as a result of this change. */\n        public connectionPair: ConnectionPositionPair,\n        /** @docs-private */\n        @Optional() public scrollableViewProperties: ScrollingVisibility) {}\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n","import {Direction, Directionality} from '@ptsecurity/cdk/bidi';\n\nimport {IPositionStrategy} from './position/position-strategy';\nimport {NoopScrollStrategy} from './scroll/noop-scroll-strategy';\nimport {IScrollStrategy} from './scroll/scroll-strategy';\n\n\n/** Initial configuration used when creating an overlay. */\nexport class OverlayConfig {\n    /** Strategy with which to position the overlay. */\n    positionStrategy?: IPositionStrategy;\n\n    /** Strategy to be used when handling scroll events while the overlay is open. */\n    scrollStrategy?: IScrollStrategy = new NoopScrollStrategy();\n\n    /** Custom class to add to the overlay pane. */\n    panelClass?: string | string[] = '';\n\n    /** Whether the overlay has a backdrop. */\n    hasBackdrop?: boolean = false;\n\n    /** Custom class to add to the backdrop */\n    backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\n\n    /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n    width?: number | string;\n\n    /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n    height?: number | string;\n\n    /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n    minWidth?: number | string;\n\n    /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n    minHeight?: number | string;\n\n    /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n    maxWidth?: number | string;\n\n    /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n    maxHeight?: number | string;\n\n    /**\n     * Direction of the text in the overlay panel. If a `Directionality` instance\n     * is passed in, the overlay will handle changes to its value automatically.\n     */\n    direction?: Direction | Directionality;\n\n    constructor(config?: OverlayConfig) {\n        if (config) {\n            Object.keys(config)\n                .filter((key) => config[key] !== undefined)\n                .forEach((key) => this[key] = config[key]);\n        }\n    }\n}\n","import {IScrollStrategy} from './scroll-strategy';\n\n\n/** Scroll strategy that doesn't do anything. */\nexport class NoopScrollStrategy implements IScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() { } // tslint:disable-line\n  /** Does nothing, as this scroll strategy is a no-op. */\n  disable() { } // tslint:disable-line\n  /** Does nothing, as this scroll strategy is a no-op. */\n  attach() { } // tslint:disable-line\n}\n"],"names":["tslib_1.__param","tslib_1.__decorate","tslib_1.__extends","tslib_1.__metadata","tslib_1.__assign"],"mappings":"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"}