{"version":3,"file":"scrolling.es5.js","sources":["../../../src/cdk/scrolling/index.ts","../../../src/cdk/scrolling/viewport-ruler.ts","../../../src/cdk/scrolling/scrolling-module.ts","../../../src/cdk/scrolling/scrollable.ts","../../../src/cdk/scrolling/scroll-dispatcher.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","import { Injectable, NgZone, OnDestroy, Optional, SkipSelf } from '@angular/core';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { merge, of as observableOf, fromEvent, Observable, Subscription } from 'rxjs';\nimport { auditTime } from 'rxjs/operators';\n\n\n/** Time in ms to throttle the resize events by default. */\nexport const DEFAULT_RESIZE_TIME = 20;\n\nexport interface ViewportScrollPosition {\n    top: number;\n    left: number;\n}\n\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class ViewportRuler implements OnDestroy {\n    /** Cached viewport dimensions. */\n    private _viewportSize: {width: number; height: number};\n\n    /** Stream of viewport change events. */\n    private _change: Observable<Event>;\n\n    /** Subscription to streams that invalidate the cached viewport dimensions. */\n    private _invalidateCache: Subscription;\n\n    constructor(private _platform: Platform, ngZone: NgZone) {\n        ngZone.runOutsideAngular(() => {\n            this._change = _platform.isBrowser ?\n                merge<Event>(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) :\n                observableOf();\n\n            // Note that we need to do the subscription inside `runOutsideAngular`\n            // since subscribing is what causes the event listener to be added.\n            this._invalidateCache = this.change().subscribe(() => this._updateViewportSize());\n        });\n    }\n\n    ngOnDestroy() {\n        this._invalidateCache.unsubscribe();\n    }\n\n    /** Returns the viewport's width and height. */\n    getViewportSize(): Readonly<{width: number, height: number}> {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n\n        const output = {width: this._viewportSize.width, height: this._viewportSize.height};\n\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null!; //tslint:disable-line\n        }\n\n        return output;\n    }\n\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect(): ClientRect {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const {width, height} = this.getViewportSize();\n\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width\n        };\n    }\n\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition(): ViewportScrollPosition {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return {top: 0, left: 0};\n        }\n\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const documentElement = document.documentElement!;\n        const documentRect = documentElement.getBoundingClientRect();\n\n        const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            document.documentElement!.scrollTop || 0;\n\n        const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            document.documentElement!.scrollLeft || 0;\n\n        return { top, left };\n    }\n\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime: number = DEFAULT_RESIZE_TIME): Observable<Event> {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n\n    /** Updates the cached viewport size. */\n    private _updateViewportSize() {\n        this._viewportSize = this._platform.isBrowser ?\n            {width: window.innerWidth, height: window.innerHeight} :\n            {width: 0, height: 0};\n    }\n}\n\n\n/** @docs-private\n * @deprecated\n */\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\n                                                platform: Platform,\n                                                ngZone: NgZone) {\n    return parentRuler || new ViewportRuler(platform, ngZone);\n}\n\n/** @docs-private @deprecated @deletion-target 7.0.0 */\nexport const VIEWPORT_RULER_PROVIDER = {\n    // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n    provide: ViewportRuler,\n    deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\n    useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n","import { NgModule } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { CdkScrollable } from './scrollable';\n\n\n@NgModule({\n    imports: [BidiModule, PlatformModule],\n    exports: [\n        BidiModule,\n        CdkScrollable\n    ],\n    declarations: [\n        CdkScrollable\n    ]\n})\nexport class ScrollingModule {}\n\n\n/**\n * @deprecated\n * @breaking-change\n */\n@NgModule({\n    imports: [ScrollingModule],\n    exports: [ScrollingModule]\n})\nexport class ScrollDispatchModule {}\n","import { Directive, ElementRef, OnInit, OnDestroy, NgZone, Optional } from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior } from '@ptsecurity/cdk/platform';\nimport { fromEvent, Observable, Observer, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { ScrollDispatcher } from './scroll-dispatcher';\n\n\nexport type _Without<T> = {[P in keyof T]?: never};\nexport type _XOR<T, U> = (_Without<T> & U) | (_Without<U> & T);\n\nexport interface _Top    { top?: number; }\nexport interface _Bottom { bottom?: number; }\nexport interface _Left   { left?: number; }\nexport interface _Right  { right?: number; }\nexport interface _Start  { start?: number; }\nexport interface _End    { end?: number; }\n\nexport type _XAxis = _XOR<_XOR<_Left, _Right>, _XOR<_Start, _End>>;\nexport type _YAxis = _XOR<_Top, _Bottom>;\n\n/**\n * An extended version of ScrollToOptions that allows expressing scroll offsets relative to the\n * top, bottom, left, right, start, or end of the viewport rather than just the top and left.\n * Please note: the top and bottom properties are mutually exclusive, as are the left, right,\n * start, and end properties.\n */\nexport type ExtendedScrollToOptions = _XAxis & _YAxis & ScrollOptions;\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n@Directive({\n    selector: '[cdk-scrollable], [cdkScrollable]'\n})\nexport class CdkScrollable implements OnInit, OnDestroy {\n\n    private destroyed = new Subject();\n\n    private _elementScrolled: Observable<Event> = Observable.create((observer: Observer<Event>) =>\n        this.ngZone.runOutsideAngular(() =>\n            fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this.destroyed))\n                .subscribe(observer)));\n\n    constructor(protected elementRef: ElementRef<HTMLElement>,\n                protected scrollDispatcher: ScrollDispatcher,\n                protected ngZone: NgZone,\n                @Optional() protected dir?: Directionality\n    ) {}\n\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled(): Observable<Event> {\n        return this._elementScrolled;\n    }\n\n    /** Gets the ElementRef for the viewport. */\n    getElementRef(): ElementRef<HTMLElement> {\n        return this.elementRef;\n    }\n\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options: ExtendedScrollToOptions): void {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n\n        // Rewrite start & end offsets as right or left offsets.\n        options.left = options.left == null ? (isRtl ? options.end : options.start) : options.left;\n        options.right = options.right == null ? (isRtl ? options.start : options.end) : options.right;\n\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top = el.scrollHeight - el.clientHeight - options.bottom;\n        }\n\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n            if (options.left != null) {\n                options.right = el.scrollWidth - el.clientWidth - options.left;\n            }\n\n            if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n                options.left = options.right;\n            } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        } else {\n            if (options.right != null) {\n                options.left = el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n\n        this.applyScrollToOptions(options);\n    }\n\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        } else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n\n        if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            } else {\n                return el.scrollLeft;\n            }\n        } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            } else {\n                return -el.scrollLeft;\n            }\n        } else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            } else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n\n    private applyScrollToOptions(options: ScrollToOptions): void {\n        const el = this.elementRef.nativeElement;\n\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        } else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n\n\n}\n","import {\n    ElementRef,\n    Injectable,\n    NgZone,\n    OnDestroy\n} from '@angular/core';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { fromEvent, of as observableOf, Subject, Subscription, Observable, Observer } from 'rxjs';\nimport { auditTime, filter } from 'rxjs/operators';\n\nimport { CdkScrollable } from './scrollable';\n\n\n/** Time in ms to throttle the scrolling events by default. */\nexport const DEFAULT_SCROLL_TIME = 20;\n\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollDispatcher implements OnDestroy {\n\n    /**\n     * Map of all the scrollable references that are registered with the service and their\n     * scroll event subscriptions.\n     */\n    scrollContainers: Map<CdkScrollable, Subscription> = new Map();\n\n    /** Keeps track of the global `scroll` and `resize` subscriptions. */\n    _globalSubscription: Subscription | null = null;\n\n    /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n    private _scrolled = new Subject<CdkScrollable | void>();\n\n    /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n    private scrolledCount = 0;\n\n    constructor(private ngZone: NgZone, private platform: Platform) { }\n\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable: CdkScrollable): void {\n        const scrollSubscription = scrollable.elementScrolled()\n            .subscribe(() => this._scrolled.next(scrollable));\n\n        this.scrollContainers.set(scrollable, scrollSubscription);\n    }\n\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable: CdkScrollable): void {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME): Observable<CdkScrollable | void> {\n\n        if (!this.platform.isBrowser) {\n            return observableOf<void>();\n        }\n\n        return Observable.create((observer: Observer<CdkScrollable | void>) => {\n            if (!this._globalSubscription) {\n                this.addGlobalListener();\n            }\n\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0 ?\n                this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                this._scrolled.subscribe(observer);\n\n            this.scrolledCount++;\n\n            return () => {\n                subscription.unsubscribe();\n                this.scrolledCount--;\n\n                if (!this.scrolledCount) {\n                    this.removeGlobalListener();\n                }\n            };\n        });\n    }\n\n    ngOnDestroy() {\n        this.removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementRef: ElementRef, auditTimeInMs?: number): Observable<CdkScrollable | void> {\n        const ancestors = this.getAncestorScrollContainers(elementRef);\n\n        return this.scrolled(auditTimeInMs).pipe(filter((target) => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementRef: ElementRef): CdkScrollable[] {\n        const scrollingContainers: CdkScrollable[] = [];\n\n        this.scrollContainers.forEach((_subscription: Subscription, scrollable: CdkScrollable) => {\n            if (this.scrollableContainsElement(scrollable, elementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n\n        return scrollingContainers;\n    }\n\n    /** Returns true if the element is contained within the provided Scrollable. */\n    private scrollableContainsElement(scrollable: CdkScrollable, elementRef: ElementRef): boolean {\n        let element = elementRef.nativeElement;\n        let scrollableElement = scrollable.getElementRef().nativeElement; //tslint:disable-line\n\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element === scrollableElement) { return true; }\n        } while (element = element.parentElement); // tslint:disable-line\n\n        return false;\n    }\n\n    /** Sets up the global scroll listeners. */\n    private addGlobalListener() {\n        this._globalSubscription = this.ngZone.runOutsideAngular(() => {\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n\n    /** Cleans up the global scroll listener. */\n    private removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\n"],"names":["tslib_1.__metadata","tslib_1.__decorate","observableOf","tslib_1.__param"],"mappings":"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"}