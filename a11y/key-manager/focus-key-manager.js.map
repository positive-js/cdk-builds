{"version":3,"file":"focus-key-manager.js","sourceRoot":"","sources":["../../../../../src/cdk/a11y/key-manager/focus-key-manager.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,cAAc,EAAyB,MAAM,oBAAoB,CAAC;AAa3E,MAAM,sBAA0B,SAAQ,cAAoC;;;uBACzC,SAAS;;;;;;IAMxC,cAAc,CAAC,MAAmB;QAC9B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAEtB,MAAM,CAAC,IAAI,CAAC;KACf;;;;;IAMD,aAAa,CAAC,KAAa;QACvB,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAE3B,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACvC;KACJ;CACJ","sourcesContent":["\nimport { FocusOrigin } from '../focus-monitor/focus-monitor';\n\nimport { ListKeyManager, IListKeyManagerOption } from './list-key-manager';\n\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply it's label.\n */\nexport interface IFocusableOption extends IListKeyManagerOption {\n    // Focuses the `FocusableOption`. */\n    focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<IFocusableOption & T> {\n    private _origin: FocusOrigin = 'program';\n\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin: FocusOrigin): this {\n        this._origin = origin;\n\n        return this;\n    }\n\n    /**\n     * This method sets the active item to the item at the specified index.\n     * It also adds focuses the newly active item.\n     */\n    setActiveItem(index: number): void {\n        super.setActiveItem(index);\n\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n"]}